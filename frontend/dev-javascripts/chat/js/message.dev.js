let svg_infoBlankBtn = `
<svg width="53" height="104" viewBox="0 0 53 104" xmlns="http://www.w3.org/2000/svg">
<path d="M38.6887 2C45.68 2 49.1756 6.56 49.1756 11.785C49.1756 18.31 43.1026 24.345 35.1983 24.345C28.5774 24.345 24.7165 20.595 24.8991 14.395C24.8991 9.18 29.4957 2 38.6887 2ZM17.1774 102C11.6574 102 7.61391 98.74 11.4748 84.38L17.8087 58.92C18.9096 54.85 19.0922 53.215 17.8087 53.215C16.1548 53.215 8.99652 56.025 4.75478 58.8L2 54.4C15.4191 43.47 30.8574 37.065 37.4835 37.065C42.9983 37.065 43.9165 43.43 41.1617 53.215L33.9043 79.975C32.6209 84.7 33.1687 86.33 34.4574 86.33C36.1113 86.33 41.5374 84.37 46.8696 80.295L50 84.365C36.9461 97.1 22.687 102 17.1774 102Z"/>
</svg>
`
let svg_messageTickIcon = `
<svg width="100" height="100" viewBox="0 0 100 75" xmlns="http://www.w3.org/2000/svg">
<path d="M35.5523 72.8954C34.3946 74.0434 32.7545 75 31.3073 75C29.8601 75 28.22 73.9955 27.014 72.8476L0 46.0619L8.58659 37.5478L31.3555 60.1244L91.5581 0L100 8.65752L35.5523 72.8954V72.8954Z" />
</svg>
`
let svg_messageEndCallIcon = `
<svg width="100" height="100" viewBox="0 0 100 100"  xmlns="http://www.w3.org/2000/svg">
<path d="M17.0231 58.5209C17.7515 59.5258 19.2083 59.6243 20.0942 58.7377L30.6065 48.2166C31.1971 47.6255 31.3546 46.7192 30.9806 45.9508C30.1538 44.2367 29.4057 42.4635 28.7364 40.5721C27.8111 37.8926 28.5198 34.8978 30.5081 32.9079L37.9888 25.421C39.3275 24.0812 39.3275 21.8943 37.9888 20.5348L18.4799 1.00975C17.1413 -0.330015 14.9561 -0.330015 13.5978 1.00975L5.11306 9.52117C0.467139 14.1709 -1.22586 21.0865 0.919919 27.2927C4.95557 38.9762 10.3692 49.3396 17.0231 58.5209ZM98.996 81.5924L79.4871 62.0674C78.1484 60.7276 75.9633 60.7276 74.6049 62.0674L67.1439 69.5149C65.1359 71.5245 62.1043 72.2338 59.427 71.2684C57.5568 70.5985 55.785 69.8301 54.0724 69.0026C53.3046 68.6283 52.399 68.7859 51.8085 69.3769L41.3551 79.8389C40.489 80.7058 40.5874 82.1835 41.5914 82.9125C50.7257 89.4537 61.0412 94.8915 72.6954 99.029C78.9359 101.255 85.9048 99.561 90.5901 94.8915L98.996 86.4786C100.335 85.1388 100.335 82.9519 98.996 81.5924ZM98.5039 1.4629C96.5549 -0.487633 93.3855 -0.487633 91.4365 1.4629L1.54987 91.4239C-0.399049 93.3744 -0.399049 96.5465 1.54987 98.497C2.53418 99.4822 3.79409 99.955 5.07368 99.955C6.35328 99.955 7.63288 99.4625 8.59749 98.497L98.5039 8.53605C100.453 6.58552 100.453 3.43314 98.5039 1.4629Z"/>
</svg>

`
let svg_messageStartCallIcon = `
<svg width="100" height="100" viewBox="0 0 100 100"  xmlns="http://www.w3.org/2000/svg">
<path d="M98.1868 80.7796L77.9281 60.517C75.4896 58.0987 71.5504 58.078 69.1327 60.517L66.2356 63.3938C65.1727 64.457 62.4423 64.2484 59.0868 62.8309C55.0016 61.0797 50.4372 57.8277 46.2688 53.6793C37.2233 44.6112 34.4721 35.7932 36.5563 33.7086L39.4326 30.8109C41.8711 28.3927 41.8711 24.4528 39.4326 22.0137L19.1739 1.75109C16.8396 -0.583695 12.7337 -0.583695 10.3785 1.75109L3.91751 8.23428C-6.52446 18.6783 4.58435 46.1329 29.1991 70.7525C40.7248 82.2806 53.376 91.307 64.881 96.1851C70.8627 98.7284 76.2191 100 80.7418 100C85.3479 100 89.0787 98.6867 91.7049 96.0391L98.1868 89.5768C100.604 87.1377 100.604 83.1978 98.1868 80.7796Z" />
</svg>

`
let svg_newGroupBlankIcon = `
<svg width="100" height="95" viewBox="0 0 100 95"  xmlns="http://www.w3.org/2000/svg">
<path d="M25.3225 43.9352C30.4422 43.9352 35.0389 41.3001 38.058 37.2084C41.3326 40.0866 45.4826 41.8197 50 41.8197C54.5152 41.8197 58.6635 40.0882 61.9377 37.2125C64.9662 41.2993 69.5523 43.9352 74.6775 43.9352C83.7097 43.9352 91.0645 35.8878 91.0645 26.0053C91.0645 16.1227 83.7097 8.07535 74.6775 8.07535C71.7653 8.07535 68.9731 8.94869 66.5397 10.4797C63.2318 4.22661 57.0643 0 50 0C42.9317 0 36.7619 4.23113 33.4557 10.4901C31.0262 8.95882 28.2394 8.07538 25.3225 8.07538C16.2903 8.07538 8.93555 16.1227 8.93555 26.0053C8.93555 35.8878 16.2903 43.9352 25.3225 43.9352ZM74.6775 18.6639C78.387 18.6639 81.387 21.9465 81.387 26.0053C81.387 30.0643 78.3871 33.3467 74.6775 33.3467C71.4599 33.3467 68.7549 30.8245 68.141 27.4502C68.6502 25.7651 68.9563 23.9851 69.0552 22.1423C70.2408 20.0251 72.3538 18.6639 74.6775 18.6639ZM50 10.5885C55.201 10.5885 59.4348 15.2192 59.4348 20.9099C59.4348 26.6005 55.201 31.2312 50 31.2312C44.799 31.2312 40.5667 26.6005 40.5667 20.9099C40.5667 15.2192 44.799 10.5885 50 10.5885ZM25.3225 18.6639C27.6474 18.6639 29.7614 20.026 30.9464 22.1451C31.0455 23.9857 31.351 25.764 31.8594 27.4473C31.2465 30.8232 28.5408 33.3467 25.3225 33.3467C21.613 33.3467 18.613 30.0643 18.613 26.0053C18.613 21.9465 21.6129 18.6639 25.3225 18.6639ZM92.5813 52.0515C87.8024 46.8175 81.4409 43.9352 74.6775 43.9352C70.3684 43.9352 66.2411 45.1555 62.5366 47.3875C58.7131 45.4651 54.4765 44.3634 50 44.3634C45.524 44.3634 41.2875 45.4651 37.4644 47.3875C33.7593 45.1555 29.6304 43.9352 25.3225 43.9352C11.3593 43.9352 0 56.3651 0 71.6412V81.63C0 84.5545 2.16577 86.9242 4.83871 86.9242H19.8447V89.7058C19.8447 92.6303 22.0105 95 24.6834 95H75.3182C77.9896 95 80.1569 92.6303 80.1569 89.7058V86.9242H95.1613C97.8327 86.9242 100 84.5545 100 81.63V71.6412C100 64.241 97.3664 57.2819 92.5813 52.0515ZM9.67742 71.6412C9.67742 62.2022 16.6961 54.5245 25.3229 54.5245C26.2487 54.5245 27.1571 54.6327 28.0512 54.8039C23.1792 60.4767 20.1272 68.0167 19.8921 76.3357H9.67742V71.6412ZM70.4795 84.4115H29.5221V77.3594C29.5221 65.0044 38.7081 54.9519 50 54.9519C61.2935 54.9519 70.4795 65.0044 70.4795 77.3594V84.4115ZM90.3226 76.3357H80.1094C79.8743 68.0165 76.8224 60.4764 71.9502 54.8037C72.8443 54.6324 73.7525 54.5245 74.6787 54.5245C78.8558 54.5245 82.7842 56.3048 85.739 59.5396C88.6939 62.7709 90.3226 67.069 90.3226 71.6412V76.3357Z" />
</svg>
`
let svg_deletedMessageBlankIcon = `
<svg width="100" height="100" viewBox="0 0 100 100"  xmlns="http://www.w3.org/2000/svg">
<path d="M50 0C22.4304 0 0 22.4304 0 50C0 77.5696 22.4304 100 50 100C77.5696 100 100 77.5696 100 50C100 22.4304 77.5696 0 50 0ZM12.5 50C12.5 41.9136 15.0986 34.4372 19.4679 28.3058L71.6942 80.5321C65.5628 84.9014 58.0864 87.5 50 87.5C29.3213 87.5 12.5 70.6787 12.5 50ZM80.5319 71.6942L28.3056 19.4679C34.437 15.0986 41.9134 12.5 49.9998 12.5C70.6785 12.5 87.4998 29.3213 87.4998 50C87.4998 58.0864 84.9012 65.5628 80.5319 71.6942Z" />
</svg>
`
let svg_imageIcon = `
<svg width="100" height="100" viewBox="0 0 100 100"  xmlns="http://www.w3.org/2000/svg">
<path d="M57.5 20C53.5 20 50 23.5 50 27.5C50 31.5 53.5 35 57.5 35C61.5 35 65 31.5 65 27.5C65 23.5 61.5 20 57.5 20ZM85 0H15C6.5 0 0 6.5 0 15V85C0 93.5 6.5 100 15 100H85C93.5 100 100 93.5 100 85V15C100 6.5 93.5 0 85 0ZM90 59.5L80.5 50C74.5 44.5 65 44.5 59.5 50L55 54.5L40.5 40C34.5 34.5 25 34.5 19.5 40L10 49.5V15C10 12 12 10 15 10H85C88 10 90 12 90 15V59.5Z" />
</svg>
`
let svg_videoIcon = `
<svg width="100" height="65" viewBox="0 0 100 65"  xmlns="http://www.w3.org/2000/svg">
<path d="M94.9525 9.98214C93.4341 9.34699 91.7483 9.14039 90.1046 9.38803C88.4608 9.63566 86.9317 10.3266 85.7071 11.375L74.9625 20.6607V13.9286C74.9625 10.2345 73.383 6.6917 70.5713 4.07958C67.7597 1.46747 63.9463 0 59.97 0H14.9925C11.0162 0 7.20284 1.46747 4.3912 4.07958C1.57956 6.6917 0 10.2345 0 13.9286V51.0714C0 54.7655 1.57956 58.3083 4.3912 60.9204C7.20284 63.5325 11.0162 65 14.9925 65H59.97C63.9463 65 67.7597 63.5325 70.5713 60.9204C73.383 58.3083 74.9625 54.7655 74.9625 51.0714V44.3393L85.7571 53.625C87.3463 54.9614 89.4107 55.7055 91.5542 55.7143C92.7438 55.7117 93.9192 55.4743 95.0025 55.0179C96.4765 54.4639 97.7392 53.5143 98.6294 52.2903C99.5196 51.0663 99.9968 49.6236 100 48.1464V16.8536C99.9928 15.371 99.5082 13.9244 98.6087 12.6999C97.7092 11.4753 96.4359 10.5288 94.9525 9.98214Z" />
</svg>
`
let svg_audioIcon = `
<svg width="70" height="100" viewBox="0 0 70 100"  xmlns="http://www.w3.org/2000/svg">
<path d="M35 65C40.3043 65 45.3914 62.8929 49.1421 59.1421C52.8929 55.3914 55 50.3043 55 45V20C55 14.6957 52.8929 9.60859 49.1421 5.85786C45.3914 2.10714 40.3043 0 35 0C29.6957 0 24.6086 2.10714 20.8579 5.85786C17.1071 9.60859 15 14.6957 15 20V45C15 50.3043 17.1071 55.3914 20.8579 59.1421C24.6086 62.8929 29.6957 65 35 65Z" />
<path d="M70 45C70 43.6739 69.4732 42.4021 68.5355 41.4645C67.5979 40.5268 66.3261 40 65 40C63.6739 40 62.4021 40.5268 61.4645 41.4645C60.5268 42.4021 60 43.6739 60 45C60 51.6304 57.3661 57.9893 52.6777 62.6777C47.9893 67.3661 41.6304 70 35 70C28.3696 70 22.0107 67.3661 17.3223 62.6777C12.6339 57.9893 10 51.6304 10 45C10 43.6739 9.47321 42.4021 8.53553 41.4645C7.59785 40.5268 6.32608 40 5 40C3.67392 40 2.40215 40.5268 1.46447 41.4645C0.526785 42.4021 0 43.6739 0 45C0.00985554 53.4092 3.04704 61.5338 8.5559 67.8874C14.0648 74.2409 21.677 78.3987 30 79.6V90H19.45C18.2698 90 17.1379 90.4688 16.3034 91.3034C15.4688 92.1379 15 93.2698 15 94.45V95.55C15 96.7302 15.4688 97.8621 16.3034 98.6966C17.1379 99.5312 18.2698 100 19.45 100H50.55C51.7302 100 52.8621 99.5312 53.6966 98.6966C54.5312 97.8621 55 96.7302 55 95.55V94.45C55 93.2698 54.5312 92.1379 53.6966 91.3034C52.8621 90.4688 51.7302 90 50.55 90H40V79.6C48.323 78.3987 55.9352 74.2409 61.4441 67.8874C66.953 61.5338 69.9901 53.4092 70 45Z" />
</svg>
`
let svg_youtubeIcon = `
<svg width="100" height="68" viewBox="0 0 100 68"  xmlns="http://www.w3.org/2000/svg">
<path d="M99.977 23.9653C100.202 17.6732 98.7797 11.4282 95.8432 5.81006C93.8509 3.50481 91.0858 1.94914 88.03 1.4141C75.3903 0.304237 62.6984 -0.150661 50.0085 0.0513592C37.3649 -0.15983 24.7186 0.280389 12.1233 1.37015C9.63317 1.80849 7.32871 2.9388 5.49115 4.62315C1.40282 8.27179 0.948564 14.514 0.494306 19.7892C-0.164769 29.2737 -0.164769 38.7904 0.494306 48.2749C0.625724 51.244 1.08254 54.1911 1.85708 57.0668C2.4048 59.2871 3.51296 61.3412 5.08232 63.0453C6.93237 64.8189 9.2905 66.0135 11.8508 66.4742C21.6442 67.644 31.5121 68.1288 41.3776 67.9248C57.2766 68.1446 71.2224 67.9248 87.712 66.694C90.3351 66.2616 92.7597 65.0655 94.6621 63.2651C95.9339 62.0339 96.8838 60.5269 97.4331 58.8692C99.0577 54.0451 99.8556 48.9964 99.7953 43.923C99.977 41.4612 99.977 26.6029 99.977 23.9653ZM39.7423 46.5605V19.3496L66.6344 33.021C59.0937 37.0653 49.1454 41.6371 39.7423 46.5605Z" />
</svg>
`
let svg_messageLinkPreviewWebsiteIcon = `
<svg width="100" height="100" viewBox="0 0 100 100"  xmlns="http://www.w3.org/2000/svg">
<path d="M50 8.83032e-07C27.1383 8.83032e-07 7.81718 15.373 1.88079 36.3715C1.77508 36.7245 1.74062 37.0949 1.77943 37.4613C1.81824 37.8276 1.92953 38.1826 2.10683 38.5056C2.28413 38.8285 2.5239 39.113 2.81218 39.3424C3.10046 39.5718 3.43149 39.7416 3.78601 39.8418C4.14052 39.9421 4.51144 39.9708 4.87717 39.9264C5.2429 39.882 5.59614 39.7652 5.91632 39.5829C6.2365 39.4007 6.51723 39.1566 6.74217 38.8648C6.96711 38.573 7.13177 38.2394 7.22656 37.8834C8.80737 32.2917 11.4715 27.1594 14.9523 22.696C17.973 24.9026 21.3239 26.7974 24.9277 28.3456C23.408 34.1209 22.4943 40.4888 22.2946 47.2222H2.77778C2.04109 47.2223 1.33459 47.515 0.813674 48.0359C0.292756 48.5568 7.3658e-05 49.2633 0 50C-5.44555e-05 77.5813 22.4187 100 50 100C77.5813 100 100 77.5813 100 50C100 22.4187 77.5813 8.83032e-07 50 8.83032e-07ZM50 5.55556C55.4857 5.55556 60.9728 9.87808 65.2235 17.9073C66.3445 20.0246 67.3509 22.3893 68.24 24.9385C62.5951 26.7624 56.3923 27.7703 50.0036 27.7778C43.6126 27.7714 37.4046 26.7693 31.7564 24.9457C32.6461 22.3937 33.6545 20.0266 34.7765 17.9073C39.0272 9.87808 44.5143 5.55556 50 5.55556ZM65.502 8.32972C71.5138 10.5617 76.9058 14.0542 81.3621 18.4896C78.9706 20.1881 76.291 21.6544 73.4339 22.9239C72.471 20.2017 71.3694 17.6484 70.1317 15.3103C68.7627 12.7246 67.2118 10.3747 65.502 8.32972ZM34.4727 8.37312C32.7749 10.4099 31.2291 12.7401 29.8683 15.3103C28.6262 17.6566 27.5205 20.2198 26.5553 22.9528C23.7078 21.6891 21.0594 20.2011 18.674 18.5113C23.1175 14.0894 28.4835 10.6071 34.4727 8.37312ZM85.0586 22.678C90.4025 29.5299 93.7826 37.9878 94.3504 47.2222H77.7054C77.5056 40.4832 76.5907 34.1102 75.0687 28.3312C78.6757 26.7793 82.0355 24.889 85.0586 22.678ZM69.8242 30.2915C71.3333 36.2307 72.2222 42.9093 72.2222 50C72.2222 57.09 71.3406 63.7738 69.8315 69.7121C63.644 67.7312 56.915 66.6735 50.0036 66.6667C50.0012 66.6667 49.9988 66.6667 49.9964 66.6667C43.0884 66.6739 36.3624 67.7308 30.1758 69.7085C28.8663 64.5549 28.0488 58.8365 27.8537 52.7778H62.963C63.3311 52.783 63.6965 52.715 64.0381 52.5777C64.3797 52.4405 64.6905 52.2367 64.9527 51.9782C65.2148 51.7198 65.423 51.4118 65.5651 51.0722C65.7071 50.7326 65.7803 50.3681 65.7803 50C65.7803 49.6319 65.7071 49.2674 65.5651 48.9278C65.423 48.5882 65.2148 48.2802 64.9527 48.0218C64.6905 47.7633 64.3797 47.5595 64.0381 47.4223C63.6965 47.285 63.3311 47.217 62.963 47.2222H27.8537C28.0488 41.1649 28.8668 35.4478 30.1758 30.2951C36.3622 32.2725 43.0886 33.3265 49.9964 33.3333C49.9988 33.3333 50.0012 33.3333 50.0036 33.3333C56.9118 33.3261 63.6396 32.2713 69.8242 30.2915ZM5.83406 52.7778H22.2946C22.4943 59.5112 23.408 65.8791 24.9277 71.6544C21.3545 73.1895 18.0324 75.0672 15.0318 77.2497C9.75084 70.4069 6.41035 61.975 5.83406 52.7778ZM77.7091 52.7778H94.3504C93.7828 62.0096 90.4071 70.4675 85.0658 77.3184C82.0461 75.1099 78.6858 73.2231 75.0832 71.6725C76.6039 65.8953 77.5091 59.5132 77.7091 52.7778ZM49.9964 72.2222C56.3855 72.2286 62.5916 73.2327 68.24 75.0543C67.5096 77.1472 66.7031 79.125 65.8131 80.9317C65.6518 81.259 65.5566 81.6148 65.5329 81.9788C65.5091 82.3429 65.5573 82.7081 65.6747 83.0535C65.9118 83.7511 66.4163 84.326 67.0772 84.6517C67.4044 84.8129 67.7603 84.9082 68.1243 84.9319C68.4884 84.9557 68.8535 84.9075 69.199 84.7901C69.8966 84.553 70.4715 84.0485 70.7972 83.3876C71.773 81.4065 72.6445 79.2688 73.4339 77.0327C76.3023 78.3037 78.9628 79.8072 81.3621 81.5104C73.3293 89.5056 62.2516 94.4444 50 94.4444C44.5143 94.4444 39.0272 90.1219 34.7765 82.0927C33.6545 79.9734 32.6461 77.6063 31.7564 75.0543C37.4038 73.2329 43.6084 72.2297 49.9964 72.2222ZM26.5553 77.0399C27.521 79.7753 28.6253 82.3416 29.8683 84.6897C31.227 87.2561 32.7643 89.5951 34.4582 91.6305C28.4821 89.3874 23.1344 85.8875 18.7174 81.4489C21.0925 79.7717 23.7233 78.2953 26.5553 77.0399Z" />
</svg>
`
let svg_messageLinkPreviewImageIcon = `
<svg width="100" height="100" viewBox="0 0 100 100"  xmlns="http://www.w3.org/2000/svg">
<path d="M85 0H15C6.5 0 0 6.5 0 15V85C0 93.5 6.5 100 15 100H85C93.5 100 100 93.5 100 85V15C100 6.5 93.5 0 85 0ZM90 59.5L80.5 50C74.5 44.5 65 44.5 59.5 50L55 54.5L40.5 40C34.5 34.5 25 34.5 19.5 40L10 49.5V15C10 12 12 10 15 10H85C88 10 90 12 90 15V59.5Z" />
</svg>

`
let svg_messageLinkPreviewAudioIcon = `
<svg width="100" height="100" viewBox="0 0 100 100"  xmlns="http://www.w3.org/2000/svg">
<path d="M50 12.5V51.1458C48.0417 50.4583 45.9583 50 43.75 50C38.7772 50 34.0081 51.9754 30.4917 55.4917C26.9754 59.0081 25 63.7772 25 68.75C25 73.7228 26.9754 78.4919 30.4917 82.0082C34.0081 85.5246 38.7772 87.5 43.75 87.5C53.3958 87.5 61.25 80.1875 62.2917 70.8333H62.5V25H79.1667V12.5H50Z" />
</svg
`
let svg_messageLinkPreviewVideoIcon = `
<svg width="100" height="72" viewBox="0 0 100 72"  xmlns="http://www.w3.org/2000/svg">
<path d="M83.2384 72H16.7616C12.3162 72 8.05279 70.4196 4.90937 67.6066C1.76595 64.7936 0 60.9782 0 57V15C0 11.0218 1.76595 7.20644 4.90937 4.3934C8.05279 1.58035 12.3162 0 16.7616 0H83.2384C87.6838 0 91.9472 1.58035 95.0906 4.3934C98.234 7.20644 100 11.0218 100 15V57C100 60.9782 98.234 64.7936 95.0906 67.6066C91.9472 70.4196 87.6838 72 83.2384 72ZM16.7616 6C14.0944 6 11.5363 6.94821 9.65028 8.63604C7.76423 10.3239 6.70466 12.6131 6.70466 15V57C6.70466 59.3869 7.76423 61.6761 9.65028 63.364C11.5363 65.0518 14.0944 66 16.7616 66H83.2384C85.9056 66 88.4637 65.0518 90.3497 63.364C92.2358 61.6761 93.2953 59.3869 93.2953 57V15C93.2953 12.6131 92.2358 10.3239 90.3497 8.63604C88.4637 6.94821 85.9056 6 83.2384 6H16.7616Z" />
<path d="M36.3895 54.705C35.5004 54.705 34.6478 54.3889 34.0191 53.8263C33.3904 53.2637 33.0372 52.5006 33.0372 51.705V20.295C33.0387 19.7778 33.1897 19.2697 33.4754 18.8201C33.761 18.3705 34.1718 17.9946 34.6676 17.729C35.1635 17.4633 35.7277 17.3169 36.3055 17.3039C36.8833 17.291 37.455 17.4119 37.9651 17.655L70.7006 33.36C71.2328 33.617 71.6774 33.9981 71.9872 34.4629C72.2971 34.9277 72.4607 35.4588 72.4607 36C72.4607 36.5412 72.2971 37.0723 71.9872 37.5371C71.6774 38.0018 71.2328 38.3829 70.7006 38.64L37.9651 54.345C37.4809 54.5789 36.9398 54.7025 36.3895 54.705ZM39.7419 25.305V46.695L62.0181 36L39.7419 25.305Z" />
</svg>
`
let svg_messageLinkPreviewApplicationIcon = `
<svg width="100" height="100" viewBox="0 0 100 100"  xmlns="http://www.w3.org/2000/svg">
<path d="M81.6197 3.66403C76.7476 -1.22134 68.848 -1.22134 63.9762 3.66403L49.6105 18.069C48.3784 12.4594 43.3914 8.2621 37.4268 8.2621H12.4756C5.58558 8.2621 0 13.8629 0 20.7718V87.4736C0 91.7294 2.11927 95.489 5.35736 97.7491C7.38049 99.1677 9.84284 100 12.499 100H79.0356C85.9254 100 91.5112 94.399 91.5112 87.4903V62.4709C91.5112 56.6412 87.534 51.7428 82.1528 50.3548L96.3459 36.1224C101.218 31.2371 101.218 23.3164 96.3459 18.431L81.6197 3.66403ZM49.9024 36.7772L63.0504 49.9611H49.9024V36.7772ZM41.5854 49.9611H8.31707V20.7718C8.31707 18.4689 10.1789 16.6019 12.4756 16.6019H37.4268C39.7235 16.6019 41.5854 18.4689 41.5854 20.7718V49.9611ZM10.1004 90.8971C9.03559 90.1423 8.34044 88.8972 8.34044 87.4903V58.301H41.5854V91.6435H12.4756C11.5926 91.6435 10.7738 91.3675 10.1004 90.8971ZM49.9024 91.6602V58.301H79.0356C81.3319 58.301 83.1941 60.1679 83.1941 62.4709V87.4903C83.1941 89.7929 81.3319 91.6602 79.0356 91.6602H49.9024Z" />
</svg>

`
let svg_messageAudioClientIcon = `
<svg width="318" height="80" viewBox="0 0 318 80" xmlns="http://www.w3.org/2000/svg">
<path d="M112.846 54.5455C111.826 54.5455 110.848 54.1623 110.127 53.4804C109.405 52.7984 109 51.8735 109 50.9091V29.0909C109 28.1265 109.405 27.2016 110.127 26.5196C110.848 25.8377 111.826 25.4545 112.846 25.4545C113.866 25.4545 114.845 25.8377 115.566 26.5196C116.287 27.2016 116.692 28.1265 116.692 29.0909V50.9091C116.692 51.8735 116.287 52.7984 115.566 53.4804C114.845 54.1623 113.866 54.5455 112.846 54.5455ZM128.231 65.4545C127.211 65.4545 126.232 65.0714 125.511 64.3895C124.79 63.7075 124.385 62.7826 124.385 61.8182V18.1818C124.385 17.2174 124.79 16.2925 125.511 15.6105C126.232 14.9286 127.211 14.5455 128.231 14.5455C129.251 14.5455 130.229 14.9286 130.95 15.6105C131.672 16.2925 132.077 17.2174 132.077 18.1818V61.8182C132.077 62.7826 131.672 63.7075 130.95 64.3895C130.229 65.0714 129.251 65.4545 128.231 65.4545ZM143.615 54.5455C142.595 54.5455 141.617 54.1623 140.896 53.4804C140.174 52.7984 139.769 51.8735 139.769 50.9091V29.0909C139.769 28.1265 140.174 27.2016 140.896 26.5196C141.617 25.8377 142.595 25.4545 143.615 25.4545C144.635 25.4545 145.614 25.8377 146.335 26.5196C147.056 27.2016 147.462 28.1265 147.462 29.0909V50.9091C147.462 51.8735 147.056 52.7984 146.335 53.4804C145.614 54.1623 144.635 54.5455 143.615 54.5455ZM159 69.0909C157.98 69.0909 157.002 68.7078 156.28 68.0258C155.559 67.3439 155.154 66.419 155.154 65.4545V14.5455C155.154 13.581 155.559 12.6561 156.28 11.9742C157.002 11.2922 157.98 10.9091 159 10.9091C160.02 10.9091 160.998 11.2922 161.72 11.9742C162.441 12.6561 162.846 13.581 162.846 14.5455V65.4545C162.846 66.419 162.441 67.3439 161.72 68.0258C160.998 68.7078 160.02 69.0909 159 69.0909ZM174.385 80C173.365 80 172.386 79.6169 171.665 78.9349C170.944 78.253 170.538 77.3281 170.538 76.3636V3.63636C170.538 2.67194 170.944 1.74702 171.665 1.06507C172.386 0.383117 173.365 0 174.385 0C175.405 0 176.383 0.383117 177.104 1.06507C177.826 1.74702 178.231 2.67194 178.231 3.63636V76.3636C178.231 77.3281 177.826 78.253 177.104 78.9349C176.383 79.6169 175.405 80 174.385 80ZM189.769 65.4545C188.749 65.4545 187.771 65.0714 187.05 64.3895C186.328 63.7075 185.923 62.7826 185.923 61.8182V18.1818C185.923 17.2174 186.328 16.2925 187.05 15.6105C187.771 14.9286 188.749 14.5455 189.769 14.5455C190.789 14.5455 191.768 14.9286 192.489 15.6105C193.21 16.2925 193.615 17.2174 193.615 18.1818V61.8182C193.615 62.7826 193.21 63.7075 192.489 64.3895C191.768 65.0714 190.789 65.4545 189.769 65.4545ZM205.154 50.9091C204.134 50.9091 203.155 50.526 202.434 49.844C201.713 49.1621 201.308 48.2372 201.308 47.2727V32.7273C201.308 31.7629 201.713 30.8379 202.434 30.156C203.155 29.474 204.134 29.0909 205.154 29.0909C206.174 29.0909 207.152 29.474 207.873 30.156C208.595 30.8379 209 31.7629 209 32.7273V47.2727C209 48.2372 208.595 49.1621 207.873 49.844C207.152 50.526 206.174 50.9091 205.154 50.9091Z" />
<path d="M221.846 54.5455C220.826 54.5455 219.848 54.1623 219.127 53.4804C218.405 52.7984 218 51.8735 218 50.9091V29.0909C218 28.1265 218.405 27.2016 219.127 26.5196C219.848 25.8377 220.826 25.4545 221.846 25.4545C222.866 25.4545 223.845 25.8377 224.566 26.5196C225.287 27.2016 225.692 28.1265 225.692 29.0909V50.9091C225.692 51.8735 225.287 52.7984 224.566 53.4804C223.845 54.1623 222.866 54.5455 221.846 54.5455ZM237.231 65.4545C236.211 65.4545 235.232 65.0714 234.511 64.3895C233.79 63.7075 233.385 62.7826 233.385 61.8182V18.1818C233.385 17.2174 233.79 16.2925 234.511 15.6105C235.232 14.9286 236.211 14.5455 237.231 14.5455C238.251 14.5455 239.229 14.9286 239.95 15.6105C240.672 16.2925 241.077 17.2174 241.077 18.1818V61.8182C241.077 62.7826 240.672 63.7075 239.95 64.3895C239.229 65.0714 238.251 65.4545 237.231 65.4545ZM252.615 54.5455C251.595 54.5455 250.617 54.1623 249.896 53.4804C249.174 52.7984 248.769 51.8735 248.769 50.9091V29.0909C248.769 28.1265 249.174 27.2016 249.896 26.5196C250.617 25.8377 251.595 25.4545 252.615 25.4545C253.635 25.4545 254.614 25.8377 255.335 26.5196C256.056 27.2016 256.462 28.1265 256.462 29.0909V50.9091C256.462 51.8735 256.056 52.7984 255.335 53.4804C254.614 54.1623 253.635 54.5455 252.615 54.5455ZM268 69.0909C266.98 69.0909 266.002 68.7078 265.28 68.0258C264.559 67.3439 264.154 66.419 264.154 65.4545V14.5455C264.154 13.581 264.559 12.6561 265.28 11.9742C266.002 11.2922 266.98 10.9091 268 10.9091C269.02 10.9091 269.998 11.2922 270.72 11.9742C271.441 12.6561 271.846 13.581 271.846 14.5455V65.4545C271.846 66.419 271.441 67.3439 270.72 68.0258C269.998 68.7078 269.02 69.0909 268 69.0909ZM283.385 80C282.365 80 281.386 79.6169 280.665 78.9349C279.944 78.253 279.538 77.3281 279.538 76.3636V3.63636C279.538 2.67194 279.944 1.74702 280.665 1.06507C281.386 0.383117 282.365 0 283.385 0C284.405 0 285.383 0.383117 286.104 1.06507C286.826 1.74702 287.231 2.67194 287.231 3.63636V76.3636C287.231 77.3281 286.826 78.253 286.104 78.9349C285.383 79.6169 284.405 80 283.385 80ZM298.769 65.4545C297.749 65.4545 296.771 65.0714 296.05 64.3895C295.328 63.7075 294.923 62.7826 294.923 61.8182V18.1818C294.923 17.2174 295.328 16.2925 296.05 15.6105C296.771 14.9286 297.749 14.5455 298.769 14.5455C299.789 14.5455 300.768 14.9286 301.489 15.6105C302.21 16.2925 302.615 17.2174 302.615 18.1818V61.8182C302.615 62.7826 302.21 63.7075 301.489 64.3895C300.768 65.0714 299.789 65.4545 298.769 65.4545ZM314.154 50.9091C313.134 50.9091 312.155 50.526 311.434 49.844C310.713 49.1621 310.308 48.2372 310.308 47.2727V32.7273C310.308 31.7629 310.713 30.8379 311.434 30.156C312.155 29.474 313.134 29.0909 314.154 29.0909C315.174 29.0909 316.152 29.474 316.873 30.156C317.595 30.8379 318 31.7629 318 32.7273V47.2727C318 48.2372 317.595 49.1621 316.873 49.844C316.152 50.526 315.174 50.9091 314.154 50.9091Z" />
<path d="M3.84615 54.5455C2.82609 54.5455 1.84781 54.1623 1.12651 53.4804C0.405218 52.7984 0 51.8735 0 50.9091V29.0909C0 28.1265 0.405218 27.2016 1.12651 26.5196C1.84781 25.8377 2.82609 25.4545 3.84615 25.4545C4.86622 25.4545 5.8445 25.8377 6.56579 26.5196C7.28709 27.2016 7.69231 28.1265 7.69231 29.0909V50.9091C7.69231 51.8735 7.28709 52.7984 6.56579 53.4804C5.8445 54.1623 4.86622 54.5455 3.84615 54.5455ZM19.2308 65.4545C18.2107 65.4545 17.2324 65.0714 16.5111 64.3895C15.7898 63.7075 15.3846 62.7826 15.3846 61.8182V18.1818C15.3846 17.2174 15.7898 16.2925 16.5111 15.6105C17.2324 14.9286 18.2107 14.5455 19.2308 14.5455C20.2508 14.5455 21.2291 14.9286 21.9504 15.6105C22.6717 16.2925 23.0769 17.2174 23.0769 18.1818V61.8182C23.0769 62.7826 22.6717 63.7075 21.9504 64.3895C21.2291 65.0714 20.2508 65.4545 19.2308 65.4545ZM34.6154 54.5455C33.5953 54.5455 32.617 54.1623 31.8957 53.4804C31.1744 52.7984 30.7692 51.8735 30.7692 50.9091V29.0909C30.7692 28.1265 31.1744 27.2016 31.8957 26.5196C32.617 25.8377 33.5953 25.4545 34.6154 25.4545C35.6354 25.4545 36.6137 25.8377 37.335 26.5196C38.0563 27.2016 38.4615 28.1265 38.4615 29.0909V50.9091C38.4615 51.8735 38.0563 52.7984 37.335 53.4804C36.6137 54.1623 35.6354 54.5455 34.6154 54.5455ZM50 69.0909C48.9799 69.0909 48.0017 68.7078 47.2804 68.0258C46.5591 67.3439 46.1538 66.419 46.1538 65.4545V14.5455C46.1538 13.581 46.5591 12.6561 47.2804 11.9742C48.0017 11.2922 48.9799 10.9091 50 10.9091C51.0201 10.9091 51.9983 11.2922 52.7196 11.9742C53.4409 12.6561 53.8462 13.581 53.8462 14.5455V65.4545C53.8462 66.419 53.4409 67.3439 52.7196 68.0258C51.9983 68.7078 51.0201 69.0909 50 69.0909ZM65.3846 80C64.3646 80 63.3863 79.6169 62.665 78.9349C61.9437 78.253 61.5385 77.3281 61.5385 76.3636V3.63636C61.5385 2.67194 61.9437 1.74702 62.665 1.06507C63.3863 0.383117 64.3646 0 65.3846 0C66.4047 0 67.383 0.383117 68.1043 1.06507C68.8256 1.74702 69.2308 2.67194 69.2308 3.63636V76.3636C69.2308 77.3281 68.8256 78.253 68.1043 78.9349C67.383 79.6169 66.4047 80 65.3846 80ZM80.7692 65.4545C79.7492 65.4545 78.7709 65.0714 78.0496 64.3895C77.3283 63.7075 76.9231 62.7826 76.9231 61.8182V18.1818C76.9231 17.2174 77.3283 16.2925 78.0496 15.6105C78.7709 14.9286 79.7492 14.5455 80.7692 14.5455C81.7893 14.5455 82.7676 14.9286 83.4889 15.6105C84.2102 16.2925 84.6154 17.2174 84.6154 18.1818V61.8182C84.6154 62.7826 84.2102 63.7075 83.4889 64.3895C82.7676 65.0714 81.7893 65.4545 80.7692 65.4545ZM96.1538 50.9091C95.1338 50.9091 94.1555 50.526 93.4342 49.844C92.7129 49.1621 92.3077 48.2372 92.3077 47.2727V32.7273C92.3077 31.7629 92.7129 30.8379 93.4342 30.156C94.1555 29.474 95.1338 29.0909 96.1538 29.0909C97.1739 29.0909 98.1522 29.474 98.8735 30.156C99.5948 30.8379 100 31.7629 100 32.7273V47.2727C100 48.2372 99.5948 49.1621 98.8735 49.844C98.1522 50.526 97.1739 50.9091 96.1538 50.9091Z" />
</svg>
`
let svg_messageVideoClientIcon = `
<svg width="75" height="100" viewBox="0 0 75 100" xmlns="http://www.w3.org/2000/svg">
<path d="M71.4592 42.9499L13.1974 1.53339C10.6223 -0.267334 7.32296 -0.512887 4.50644 0.960429C1.68991 2.43374 0 5.38038 0 8.57256V91.4057C0 94.5978 1.77039 97.5445 4.50644 99.0178C5.71352 99.6726 7.08154 100 8.3691 100C10.059 100 11.7489 99.5089 13.1974 98.4448L71.3788 57.0283C73.632 55.3913 75 52.772 75 49.9891C75 47.2062 73.7124 44.587 71.4592 42.9499ZM12.2318 83.8754V16.1028L59.8712 49.9891L12.2318 83.8754Z" />
</svg>
`
let svg_messagePendingIcon = `
<svg width="100" height="100" viewBox="0 0 100 100"  xmlns="http://www.w3.org/2000/svg">
<path d="M50 0C40.111 0 30.444 2.93245 22.2215 8.42652C13.999 13.9206 7.59043 21.7295 3.80605 30.8658C0.0216642 40.0021 -0.968502 50.0555 0.960758 59.7545C2.89002 69.4535 7.65206 78.3627 14.6447 85.3553C21.6373 92.3479 30.5465 97.11 40.2455 99.0392C49.9445 100.969 59.9979 99.9783 69.1342 96.194C78.2705 92.4096 86.0794 86.0009 91.5735 77.7785C97.0675 69.556 100 59.889 100 50C100 43.4339 98.7067 36.9321 96.194 30.8658C93.6812 24.7995 89.9983 19.2876 85.3553 14.6447C80.7124 10.0017 75.2005 6.31876 69.1342 3.80602C63.0679 1.29329 56.5661 0 50 0ZM50 90C42.0888 90 34.3552 87.654 27.7772 83.2588C21.1992 78.8635 16.0723 72.6164 13.0448 65.3073C10.0173 57.9983 9.2252 49.9556 10.7686 42.1964C12.312 34.4371 16.1216 27.3098 21.7157 21.7157C27.3098 16.1216 34.4372 12.312 42.1964 10.7686C49.9556 9.22518 57.9983 10.0173 65.3073 13.0448C72.6164 16.0723 78.8635 21.1992 83.2588 27.7772C87.654 34.3551 90 42.0887 90 50C90 60.6086 85.7857 70.7828 78.2843 78.2843C70.7828 85.7857 60.6087 90 50 90Z" />
<path d="M50 20C48.6739 20 47.4022 20.5268 46.4645 21.4645C45.5268 22.4021 45 23.6739 45 25V47.95L31.45 61.45C30.9266 61.8982 30.5015 62.4498 30.2014 63.0701C29.9013 63.6905 29.7326 64.3661 29.706 65.0547C29.6794 65.7433 29.7955 66.43 30.0468 67.0716C30.2982 67.7132 30.6795 68.296 31.1668 68.7832C31.654 69.2705 32.2368 69.6518 32.8784 69.9032C33.52 70.1545 34.2067 70.2706 34.8953 70.244C35.5839 70.2174 36.2595 70.0487 36.8799 69.7486C37.5002 69.4485 38.0518 69.0234 38.5 68.5L53.5 53.5C54.4421 52.5768 54.9812 51.3188 55 50V25C55 23.6739 54.4732 22.4021 53.5355 21.4645C52.5979 20.5268 51.3261 20 50 20Z" />
</svg>

`
let svg_messageErrorIcon = `
<svg width="100" height="100" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M50 0C22.3875 0 0 22.3875 0 50C0 77.6125 22.3875 100 50 100C77.6125 100 100 77.6125 100 50C100 22.3875 77.6125 0 50 0ZM50 93.75C25.875 93.75 6.25 74.125 6.25 50C6.25 25.875 25.875 6.25 50 6.25C74.125 6.25 93.75 25.875 93.75 50C93.75 74.125 74.125 93.75 50 93.75ZM50 18.75C48.3424 18.75 46.7527 19.4085 45.5806 20.5806C44.4085 21.7527 43.75 23.3424 43.75 25V56.25C43.75 57.9076 44.4085 59.4973 45.5806 60.6694C46.7527 61.8415 48.3424 62.5 50 62.5C51.6576 62.5 53.2473 61.8415 54.4194 60.6694C55.5915 59.4973 56.25 57.9076 56.25 56.25V25C56.25 23.3424 55.5915 21.7527 54.4194 20.5806C53.2473 19.4085 51.6576 18.75 50 18.75ZM43.75 74.9C43.75 76.5576 44.4085 78.1473 45.5806 79.3194C46.7527 80.4915 48.3424 81.15 50 81.15C51.6576 81.15 53.2473 80.4915 54.4194 79.3194C55.5915 78.1473 56.25 76.5576 56.25 74.9C56.25 74.0792 56.0883 73.2665 55.7742 72.5082C55.4602 71.7499 54.9998 71.061 54.4194 70.4806C53.8391 69.9002 53.1501 69.4398 52.3918 69.1258C51.6335 68.8117 50.8208 68.65 50 68.65C49.1792 68.65 48.3665 68.8117 47.6082 69.1258C46.8499 69.4398 46.1609 69.9002 45.5806 70.4806C45.0002 71.061 44.5398 71.7499 44.2258 72.5082C43.9117 73.2665 43.75 74.0792 43.75 74.9Z" />
</svg>

`

import Plyr from "plyr"
import { increaseTotalReceivedMessagesCount } from "./showActiveChatSection.dev"

let activeChatMessageContainer = document.getElementById(
  "activeChatMessageContainer"
)

function createPlyr(element, type) {
  let player = new Plyr(element, {
    controls: [
      "play-large",
      "play",
      "progress",
      "current-time",
      "settings",
      "pip",
      "airplay",
      "fullscreen"
    ],
    debug: false,
    settings: ["captions", "quality", "speed", "loop"],
    clickToPlay: true,
    resetOnEnd: true,
    invertTime: true,
    ratio: "16:9",

    youtube: {
      origin: `${location.origin}`
    }
  })
}

const weekDaysArray = ["Sun", "Mon", "Tues", "Wed", "Thur", "Fri", "Sat"]

function getTimeString(date) {
  let dateObj
  if (date) dateObj = typeof date === "string" ? new Date(date) : date
  else {
    dateObj = new Date()
  }
  let dateHour = dateObj.getHours()
  let dateMin = dateObj.getMinutes()
  let dateStr1 = dateHour < 10 ? "0" + dateHour : dateHour
  let dateStr2 = dateMin < 10 ? "0" + dateMin : dateMin
  let dateStr3 = dateHour < 12 ? "AM" : "PM"
  let dateString = dateStr1 + ":" + dateStr2 + " " + dateStr3

  return dateString
}
function getDateString(date) {
  let currentDate = new Date()
  date = typeof date === "string" ? new Date(date) : date
  if (
    currentDate.getFullYear() === date.getFullYear() &&
    currentDate.getMonth() === date.getMonth()
  ) {
    if (currentDate.getDate() - date.getDate() === 0) {
      return (
        "Today" +
        " ( " +
        weekDaysArray[date.getDay()] +
        ", " +
        date.getDate() +
        "-" +
        date.getMonth() +
        "-" +
        date.getFullYear() +
        " )"
      )
    } else if (currentDate.getDate() - date.getDate() === 1) {
      return (
        "Yesterday" +
        " ( " +
        weekDaysArray[date.getDay()] +
        ", " +
        date.getDate() +
        "-" +
        date.getMonth() +
        "-" +
        date.getFullYear() +
        " )"
      )
    } else if (currentDate.getDate() - date.getDate() === 2) {
      return (
        weekDaysArray[date.getDay()] +
        ", " +
        date.getDate() +
        "-" +
        date.getMonth() +
        "-" +
        date.getFullYear()
      )
    } else {
      return (
        weekDaysArray[date.getDay()] +
        ", " +
        date.getDate() +
        "-" +
        date.getMonth() +
        "-" +
        date.getFullYear()
      )
    }
  } else {
    return (
      weekDaysArray[date.getDay()] +
      ", " +
      date.getDate() +
      "-" +
      date.getMonth() +
      "-" +
      date.getFullYear()
    )
  }
}
function isMessageDateChanged(messageDate, fromCheckingDate) {
  // convert to date object if it is not
  messageDate =
    typeof messageDate === "string" ? new Date(messageDate) : messageDate
  fromCheckingDate =
    typeof fromCheckingDate === "string"
      ? new Date(fromCheckingDate)
      : fromCheckingDate

  if (fromCheckingDate.getDate() !== messageDate.getDate()) {
    return true
  } else if (fromCheckingDate.getMonth() !== messageDate.getMonth()) {
    return true
  } else if (fromCheckingDate.getFullYear() !== messageDate.getFullYear()) {
    return true
  } else {
    return false
  }
}

export function checkTimeAndCreateOldMessages(
  allMessages,
  isScrolledToTop = false,
  isScrolledToBottom = false
) {
  let isUserChanged
  // let container = document.createElement("div")
  let scrollPosBefore =
    activeChatMessageContainer.scrollHeight -
    activeChatMessageContainer.scrollTop -
    activeChatMessageContainer.clientHeight
  if (allMessages.length > 0) {
    if (activeChatMessageContainer.children.length == 0) {
      TOP_MESSAGE_TIME_POINTER = allMessages[0].createdAt
      BOTTOM_MESSAGE_TIME_POINTER = allMessages[0].createdAt
    }
    for (let i = 0; i < allMessages.length; i++) {
      if (
        isMessageDateChanged(allMessages[i].createdAt, TOP_MESSAGE_TIME_POINTER)
      ) {
        let dateMessageBox = createDateMessage(TOP_MESSAGE_TIME_POINTER)
        activeChatMessageContainer.insertAdjacentElement(
          "afterbegin",
          dateMessageBox
        )

        TOP_MESSAGE_TIME_POINTER = allMessages[i].createdAt
      }
      if (
        allMessages[i].hasOwnProperty("isInfoMessage") &&
        allMessages[i].isInfoMessage === true
      ) {
        let infoMessageBox = createInfoMessage(allMessages[i])
        activeChatMessageContainer.insertAdjacentElement(
          "afterbegin",
          infoMessageBox
        )
      } else {
        isUserChanged = false
        if (
          !activeChatMessageContainer.getElementsByClassName(
            "active-chat-user-message-box"
          )[0]
        ) {
          BOTTOM_MESSAGE_USER_POINTER = allMessages[i].sender
        }
        if (i + 1 < allMessages.length) {
          if (
            allMessages[i + 1].hasOwnProperty("isInfoMessage") &&
            allMessages[i + 1].isInfoMessage === true
          ) {
            isUserChanged = true
          } else if (
            allMessages[i].sender._id.toString() !==
            allMessages[i + 1].sender._id.toString()
          ) {
            isUserChanged = true
          }
        } else {
          isUserChanged = true
        }

        let userMessageBox = createUserMessage(
          allMessages[i],
          isUserChanged,
          isScrolledToBottom
        )
        activeChatMessageContainer.insertAdjacentElement(
          "afterbegin",
          userMessageBox
        )
      }
    }
  } else {
    if (TOP_MESSAGE_TIME_POINTER !== "") {
      let dateMessageBox = createDateMessage(TOP_MESSAGE_TIME_POINTER)
      activeChatMessageContainer.insertAdjacentElement(
        "afterbegin",
        dateMessageBox
      )
    } else {
      TOP_MESSAGE_TIME_POINTER = ""
      BOTTOM_MESSAGE_TIME_POINTER = ""
    }
  }
  let loadingMessageAnimationBox = [
    ...activeChatMessageContainer.getElementsByClassName(
      "loading-message-animation-box"
    )
  ]
  loadingMessageAnimationBox.forEach(box => {
    box.parentNode.removeChild(box)
  })

  let scrollPosAfter =
    activeChatMessageContainer.scrollHeight -
    activeChatMessageContainer.scrollTop -
    activeChatMessageContainer.clientHeight

  if (isScrolledToBottom === true) {
    activeChatMessageContainer.scrollTop =
      activeChatMessageContainer.scrollHeight + 1000
  }
  if (isScrolledToTop === false) {
    activeChatMessageContainer.scrollTop += scrollPosAfter - scrollPosBefore
    // console.log("before", scrollPosBefore, "after", scrollPosAfter)
  }
  // }

  // console.log(container)
}

export function checkTimeAndCreateNewMessage(
  message,
  isScrolledToBottom = false
) {
  let isUserChanged
  if (activeChatMessageContainer.children.length === 0) {
    BOTTOM_MESSAGE_TIME_POINTER = message.createdAt
    TOP_MESSAGE_TIME_POINTER = message.createdAt
  }
  if (isMessageDateChanged(message.createdAt, BOTTOM_MESSAGE_TIME_POINTER)) {
    let dateMessageBox = createDateMessage(message.createdAt)
    activeChatMessageContainer.insertAdjacentElement(
      "beforeend",
      dateMessageBox
    )
    BOTTOM_MESSAGE_TIME_POINTER = message.createdAt
  }
  if (
    message.hasOwnProperty("isInfoMessage") &&
    message.isInfoMessage === true
  ) {
    let infoMessageBox = createInfoMessage(message)
    activeChatMessageContainer.insertAdjacentElement(
      "beforeend",
      infoMessageBox
    )
  } else {
    isUserChanged = false
    if (
      !activeChatMessageContainer.getElementsByClassName(
        "active-chat-user-message-box"
      )[0]
    ) {
      isUserChanged = true
    } else {
      if (
        BOTTOM_MESSAGE_USER_POINTER._id.toString() !==
        message.sender._id.toString()
      ) {
        isUserChanged = true
      }
    }
    let userMessageBox = createUserMessage(
      message,
      isUserChanged,
      isScrolledToBottom
    )
    activeChatMessageContainer.insertAdjacentElement(
      "beforeend",
      userMessageBox
    )
    if (isUserChanged) BOTTOM_MESSAGE_USER_POINTER = message.sender
  }
  increaseTotalReceivedMessagesCount()
  if (isScrolledToBottom) {
    activeChatMessageContainer.scrollTop =
      activeChatMessageContainer.scrollHeight + 1000
  }
}

export function createUserMessage(
  message,
  isUserChanged = true,
  isScrolledToBottom = false
) {
  const messageBox = document.createElement("div")
  messageBox.classList.add("active-chat-user-message-box")
  messageBox.setAttribute("data-message-id", message._id)
  if (message.hasOwnProperty("sender")) {
    messageBox.setAttribute("data-sender-id", message.sender._id)
    messageBox.setAttribute(
      "data-sender-name",
      message.sender.firstName + " " + message.sender.lastName
    )
  }
  if (
    !message.hasOwnProperty("isDeletedForAll") ||
    (message.hasOwnProperty("isDeletedForAll") &&
      message.isDeletedForAll === false)
  ) {
    let messageBoxInnerHtml = `
        
        <div class="active-chat-user-message-box__content-box">
      
           <div class="active-chat-user-message-box__content-info">
               <div class="active-chat-user-message-box__content-time">${getTimeString(
                 message.createdAt
               )}
               </div>
           </div>
       </div>
       <div class="active-chat-user-message-box__btn" data-message-box-btn="user">${svg_infoBlankBtn}
       </div>
        `
    messageBox.insertAdjacentHTML("beforeend", messageBoxInnerHtml)

    let messageContentBox = messageBox.getElementsByClassName(
      "active-chat-user-message-box__content-box"
    )[0]
    let messageContentInfo = messageBox.getElementsByClassName(
      "active-chat-user-message-box__content-info"
    )[0]

    if (message.hasMediaContent) {
      if (message.mediaContentType === "video") {
        messageBox.classList.add("active-chat-user-message-box--video")
        messageContentBox.classList.add(
          "active-chat-user-message-box__content-box--video"
        )
        messageContentInfo.classList.add(
          "active-chat-user-message-box__content-info--video"
        )
        let video = document.createElement("video")
        video.classList.add(
          "active-chat-user-message-box__content",
          "active-chat-user-message-box__content--video"
        )
        let videoSource = document.createElement("source")
        videoSource.src = message.mediaContentPath
        //   videoSource.type = message.mediaContentMimeType.split(";")[0]
        video.insertAdjacentElement("beforeend", videoSource)

        messageContentBox.insertAdjacentElement("afterbegin", video)
        createPlyr(video, "video")
      }
      if (message.mediaContentType === "audio") {
        messageBox.classList.add("active-chat-user-message-box--audio")
        messageContentBox.classList.add(
          "active-chat-user-message-box__content-box--audio"
        )
        messageContentInfo.classList.add(
          "active-chat-user-message-box__content-info--audio"
        )
        let audio = document.createElement("audio")
        audio.classList.add(
          "active-chat-user-message-box__content",
          "active-chat-user-message-box__content--audio"
        )

        let audioSource = document.createElement("source")
        audioSource.src = message.mediaContentPath
        audioSource.type = message.mediaContentMimeType
        audio.insertAdjacentElement("beforeend", audioSource)

        messageContentBox.insertAdjacentElement("afterbegin", audio)
        createPlyr(audio, "audio")
      }
      if (message.mediaContentType === "youtube") {
        messageBox.classList.add("active-chat-user-message-box--youtube")
        messageContentBox.classList.add(
          "active-chat-user-message-box__content-box--youtube"
        )
        messageContentInfo.classList.add(
          "active-chat-user-message-box__content-info--youtube"
        )
        let youtube = document.createElement("div")
        youtube.classList.add(
          "active-chat-user-message-box__content",
          "active-chat-user-message-box__content--youtube"
        )

        youtube.setAttribute("data-plyr-provider", "youtube")
        youtube.setAttribute("data-plyr-embed-id", message.mediaContentPath)

        messageContentBox.insertAdjacentElement("afterbegin", youtube)
        createPlyr(youtube, "youtube")
      }
      if (message.mediaContentType === "image") {
        messageBox.classList.add("active-chat-user-message-box--image")
        messageContentBox.classList.add(
          "active-chat-user-message-box__content-box--image"
        )
        messageContentInfo.classList.add(
          "active-chat-user-message-box__content-info--image"
        )

        let image = document.createElement("img")
        image.classList.add(
          "active-chat-user-message-box__content",
          "active-chat-user-message-box__content--image"
        )
        image.onload = () => {
          if (isScrolledToBottom) {
            activeChatMessageContainer.scrollTop =
              activeChatMessageContainer.scrollHeight
          }
        }
        image.setAttribute("src", message.mediaContentPath)
        image.setAttribute("alt", "Image")

        messageContentBox.insertAdjacentElement("afterbegin", image)
      }
    } else {
      messageBox.classList.add("active-chat-user-message-box--text")
      messageContentBox.classList.add(
        "active-chat-user-message-box__content-box--text"
      )
      messageContentInfo.classList.add(
        "active-chat-user-message-box__content-info--text"
      )

      let textMessage = document.createElement("div")
      textMessage.classList.add(
        "active-chat-user-message-box__content",
        "active-chat-user-message-box__content--text"
      )

      if (message.hasOwnProperty("hasLinks") && message.hasLinks === true) {
        insertLinksToTextContent(
          textMessage,
          message.textContent,
          message.linksData
        )
        if (
          message.hasOwnProperty("hasLinkPreview") &&
          message.hasOwnProperty("linkPreviewData") &&
          message.hasLinkPreview === true
        ) {
          let linkPreview = createLinkPreview(
            message.linkPreviewData,
            isScrolledToBottom
          )
          linkPreview.classList.add("link-preview--message")

          messageContentBox.insertAdjacentElement("beforeend", linkPreview)
        }
      } else {
        textMessage.textContent = message.textContent
      }

      ////////////////////////////////////////////////////////////////////
      messageContentBox.insertAdjacentElement("afterbegin", textMessage)
    }
    if (message.isRepliedMessage && message.hasOwnProperty("repliedTo")) {
      let repliedMessageContent, repliedMessageUser

      messageContentBox.insertAdjacentHTML(
        "afterbegin",
        `<div class='active-chat-user-message-reply-box ${
          message.sender._id.toString() ===
          message.repliedTo.sender._id.toString()
            ? "active-chat-user-message-reply-box--self-replied"
            : ""
        }'>
            <div class="active-chat-user-message-reply-box__user">
            </div>
           <div class="active-chat-user-message-reply-box__user-message">
          </div>
        </div>`
      )

      repliedMessageUser =
        message.repliedTo.sender._id.toString() === loginUser._id.toString()
          ? "You"
          : message.repliedTo.sender.firstName +
            " " +
            message.repliedTo.sender.lastName

      messageContentBox.getElementsByClassName(
        "active-chat-user-message-reply-box__user"
      )[0].textContent = repliedMessageUser

      if (
        message.repliedTo.hasOwnProperty("isDeletedForAll") &&
        message.repliedTo.isDeletedForAll === true
      ) {
        repliedMessageContent = `${svg_deletedMessageBlankIcon} <span>This Message has been deleted.</span>`
        messageContentBox.getElementsByClassName(
          "active-chat-user-message-reply-box__user-message"
        )[0].innerHTML = repliedMessageContent
        messageContentBox
          .getElementsByClassName("active-chat-user-message-reply-box")[0]
          .classList.add("active-chat-user-message-reply-box--deleted-message")
      } else {
        if (message.repliedTo.hasMediaContent) {
          if (message.repliedTo.mediaContentType === "video") {
            repliedMessageContent = `${svg_videoIcon} <span>Video</span>`
          }
          if (message.repliedTo.mediaContentType === "audio") {
            repliedMessageContent = `${svg_audioIcon} <span>Audio</span>`
          }
          if (message.repliedTo.mediaContentType === "image") {
            repliedMessageContent = `${svg_imageIcon} <span>Image</span>`
          }
          if (message.repliedTo.mediaContentType === "youtube") {
            repliedMessageContent = `${svg_youtubeIcon} <span>Youtube</span>`
          }
          messageContentBox.getElementsByClassName(
            "active-chat-user-message-reply-box__user-message"
          )[0].innerHTML = repliedMessageContent
        } else {
          repliedMessageContent = message.repliedTo.textContent
          messageContentBox.getElementsByClassName(
            "active-chat-user-message-reply-box__user-message"
          )[0].textContent = repliedMessageContent
        }
      }

      messageContentBox.classList.add(
        "active-chat-user-message-box__content-box--replied-message"
      )
      messageBox.classList.add("active-chat-user-message-box--replied-message")
      messageBox.dataset.repliedMessageId = message.repliedTo._id
    }
  } else {
    messageBox.classList.add("active-chat-user-message-box--deleted-message")

    messageBox.innerHTML = `<div class="active-chat-user-message-box__content-box active-chat-user-message-box__content-box--deleted-message">
    <div class="active-chat-user-message-box__content active-chat-user-message-box__content--deleted-message">
   ${svg_deletedMessageBlankIcon}<span>This Message has been deleted.</span>
    </div>
    <div class="active-chat-user-message-box__content-info active-chat-user-message-box__content-info--deleted-message">
        <div class="active-chat-user-message-box__content-time active-chat-user-message-box__content-time--deleted-message">${getTimeString(
          message.createdAt
        )}
        </div>
    </div>
  </div>
  <div class="active-chat-user-message-box__btn" data-message-box-btn="user">${svg_infoBlankBtn}
  </div>`
  }

  let messageContentInfo = messageBox.getElementsByClassName(
    "active-chat-user-message-box__content-info"
  )[0]
  if (message.sender._id.toString() === loginUser._id.toString()) {
    messageBox.classList.add("active-chat-user-message-box--right")
    messageContentInfo.insertAdjacentHTML(
      "beforeend",
      `<div class="active-chat-user-message-box__content-status-container">
               <div class="active-chat-user-message-box__content-status active-chat-user-message-box__content-status--tick">${svg_messageTickIcon}
                </div>
               <div class="active-chat-user-message-box__content-status active-chat-user-message-box__content-status--tick active-chat-user-message-box__content-status--second-tick ">${svg_messageTickIcon}
               </div>
      </div>`
    )
    let contentStatusContainer = messageContentInfo.getElementsByClassName(
      "active-chat-user-message-box__content-status-container"
    )[0]
    if (
      message.hasOwnProperty("deliveryStatus") &&
      message.deliveryStatus.isDelivered === true
    ) {
      contentStatusContainer.classList.add(
        "active-chat-user-message-box__content-status-container--delivered"
      )
    }

    if (
      message.hasOwnProperty("seenStatus") &&
      message.hasOwnProperty("reader")
    ) {
      let svgs = [
        ...messageBox.querySelectorAll(
          ".active-chat-user-message-box__content-status-container--delivered .active-chat-user-message-box__content-status--tick svg"
        )
      ]
      let color = generateColorForUserMessageStatus(
        message.seenStatus.length - 1,
        message.reader.length - 1
      )
      svgs.forEach(svg => {
        svg.style.fill = `rgba(${color.r}, ${color.g},${color.b},0.7)`
        svg.style.strokeWidth = `1px`
        svg.style.stroke = `rgba(${color.r}, ${color.g},${color.b},0.7)`
      })
      messageBox.dataset.messageSeenStatusCount = message.seenStatus.length
    }
  }

  if (
    isUserChanged === true &&
    message.sender._id.toString() !== loginUser._id.toString()
  ) {
    let messageContentBox = messageBox.getElementsByClassName(
      "active-chat-user-message-box__content-box"
    )[0]
    messageContentBox.insertAdjacentHTML(
      "afterbegin",
      `<div class="active-chat-user-message-box__user-box">
      </div>`
    )
    messageContentBox.getElementsByClassName(
      "active-chat-user-message-box__user-box"
    )[0].textContent = message.sender.firstName + " " + message.sender.lastName
    messageContentBox.classList.add(
      "active-chat-user-message-box__content-box--has-user-box"
    )
    messageBox.classList.add("active-chat-user-message-box--has-user-box")
  }

  if (
    message.hasOwnProperty("seenStatus") &&
    message.hasOwnProperty("reader") &&
    message.seenStatus.length !== message.reader.length &&
    message.sender._id.toString() !== loginUser._id.toString()
  ) {
    USER_MESSAGE_BOX_OBSERVER.observe(messageBox)
  }
  return messageBox
}

export function checkTimeAndCreateNewClientUserMessage(
  message,
  isScrolledToBottom = false
) {
  let isUserChanged
  let currentTimeObj = new Date()
  if (activeChatMessageContainer.children.length === 0) {
    BOTTOM_MESSAGE_TIME_POINTER = currentTimeObj
    TOP_MESSAGE_TIME_POINTER = currentTimeObj
  }

  if (isMessageDateChanged(currentTimeObj, BOTTOM_MESSAGE_TIME_POINTER)) {
    let dateMessageBox = createDateMessage(currentTimeObj)
    activeChatMessageContainer.insertAdjacentElement(
      "beforeend",
      dateMessageBox
    )
    BOTTOM_MESSAGE_TIME_POINTER = currentTimeObj
  }

  isUserChanged = false
  if (
    !activeChatMessageContainer.getElementsByClassName(
      "active-chat-user-message-box"
    )[0]
  ) {
    isUserChanged = true
  } else {
    if (
      BOTTOM_MESSAGE_USER_POINTER._id.toString() !== loginUser._id.toString()
    ) {
      isUserChanged = true
    }
  }
  let userMessageBox = createClientUserMessage(message, isScrolledToBottom)
  activeChatMessageContainer.insertAdjacentElement("beforeend", userMessageBox)
  if (isUserChanged) BOTTOM_MESSAGE_USER_POINTER = loginUser
  if (isScrolledToBottom) {
    activeChatMessageContainer.scrollTop =
      activeChatMessageContainer.scrollHeight + 1000
  }
}
export function createClientUserMessage(message, isScrolledToBottom = false) {
  let currentTimeObj = new Date()
  const messageBox = document.createElement("div")
  messageBox.classList.add("active-chat-user-message-box")
  messageBox.setAttribute("data-client-message-id", message.clientMessageId)

  if (
    !message.hasOwnProperty("isDeletedForAll") ||
    (message.hasOwnProperty("isDeletedForAll") &&
      message.isDeletedForAll === false)
  ) {
    let messageBoxInnerHtml = `
        
        <div class="active-chat-user-message-box__content-box">
      
           <div class="active-chat-user-message-box__content-info">
               <div class="active-chat-user-message-box__content-time">${getTimeString(
                 currentTimeObj
               )}
               </div>
           </div>
       </div>
      
        `
    messageBox.insertAdjacentHTML("beforeend", messageBoxInnerHtml)

    let messageContentBox = messageBox.getElementsByClassName(
      "active-chat-user-message-box__content-box"
    )[0]
    let messageContentInfo = messageBox.getElementsByClassName(
      "active-chat-user-message-box__content-info"
    )[0]

    if (
      message.hasOwnProperty("hasMediaContent") &&
      message.hasMediaContent === true
    ) {
      if (message.mediaContentType === "video") {
        messageBox.classList.add("active-chat-user-message-box--video-client")
        messageContentBox.classList.add(
          "active-chat-user-message-box__content-box--video-client"
        )
        messageContentInfo.classList.add(
          "active-chat-user-message-box__content-info--video-client"
        )
        let videoClient = document.createElement("div")
        videoClient.classList.add(
          "active-chat-user-message-box__content",
          "active-chat-user-message-box__content--video-client"
        )
        videoClient.insertAdjacentHTML("beforeend", svg_messageVideoClientIcon)
        messageContentBox.insertAdjacentElement("afterbegin", videoClient)
      }
      if (message.mediaContentType === "audio") {
        messageBox.classList.add("active-chat-user-message-box--audio-client")
        messageContentBox.classList.add(
          "active-chat-user-message-box__content-box--audio-client"
        )
        messageContentInfo.classList.add(
          "active-chat-user-message-box__content-info--audio-client"
        )
        let audioClient = document.createElement("div")
        audioClient.classList.add(
          "active-chat-user-message-box__content",
          "active-chat-user-message-box__content--audio-client"
        )

        audioClient.insertAdjacentHTML("beforeend", svg_messageAudioClientIcon)

        messageContentBox.insertAdjacentElement("afterbegin", audioClient)
      }
      if (message.mediaContentType === "youtube") {
        messageBox.classList.add("active-chat-user-message-box--youtube")
        messageContentBox.classList.add(
          "active-chat-user-message-box__content-box--youtube"
        )
        messageContentInfo.classList.add(
          "active-chat-user-message-box__content-info--youtube"
        )
        let youtube = document.createElement("div")
        youtube.classList.add(
          "active-chat-user-message-box__content",
          "active-chat-user-message-box__content--youtube"
        )

        youtube.setAttribute("data-plyr-provider", "youtube")
        youtube.setAttribute("data-plyr-embed-id", message.mediaContentPath)

        messageContentBox.insertAdjacentElement("afterbegin", youtube)
        createPlyr(youtube, "youtube")
      }
      if (message.mediaContentType === "image") {
        messageBox.classList.add("active-chat-user-message-box--image")
        messageContentBox.classList.add(
          "active-chat-user-message-box__content-box--image"
        )
        messageContentInfo.classList.add(
          "active-chat-user-message-box__content-info--image"
        )

        let image = document.createElement("img")
        image.classList.add(
          "active-chat-user-message-box__content",
          "active-chat-user-message-box__content--image"
        )
        image.onload = () => {
          if (isScrolledToBottom) {
            activeChatMessageContainer.scrollTop =
              activeChatMessageContainer.scrollHeight
          }
        }
        image.setAttribute("src", message.mediaContentImagePreview)
        image.setAttribute("alt", "Image")

        messageContentBox.insertAdjacentElement("afterbegin", image)
      }
    } else {
      messageBox.classList.add("active-chat-user-message-box--text")
      messageContentBox.classList.add(
        "active-chat-user-message-box__content-box--text"
      )
      messageContentInfo.classList.add(
        "active-chat-user-message-box__content-info--text"
      )

      let textMessage = document.createElement("div")
      textMessage.classList.add(
        "active-chat-user-message-box__content",
        "active-chat-user-message-box__content--text"
      )
      textMessage.textContent = message.textContent
      messageContentBox.insertAdjacentElement("afterbegin", textMessage)
    }
    ////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////
    if (message.isRepliedMessage && message.hasOwnProperty("repliedTo")) {
      let userMessageBox = document.querySelector(
        `.active-chat-user-message-box[data-message-id="${message.repliedTo}"]`
      )
      if (userMessageBox) {
        let repliedMessageContent, repliedMessageUser

        messageContentBox.insertAdjacentHTML(
          "afterbegin",
          `<div class='active-chat-user-message-reply-box ${
            userMessageBox.dataset.senderId.toString() ===
            loginUser._id.toString()
              ? "active-chat-user-message-reply-box--self-replied"
              : ""
          }'>
              <div class="active-chat-user-message-reply-box__user">
              </div>
             <div class="active-chat-user-message-reply-box__user-message">
            </div>
          </div>`
        )

        //reply message user
        repliedMessageUser =
          userMessageBox.dataset.senderId.toString() ===
          loginUser._id.toString()
            ? "You"
            : userMessageBox.dataset.senderName

        messageContentBox.getElementsByClassName(
          "active-chat-user-message-reply-box__user"
        )[0].textContent = repliedMessageUser

        if (
          userMessageBox.classList.contains(
            "active-chat-user-message-box--deleted-message"
          )
        ) {
          repliedMessageContent = `${svg_deletedMessageBlankIcon} <span>This Message has been deleted.</span>`

          messageContentBox.getElementsByClassName(
            "active-chat-user-message-reply-box__user-message"
          )[0].innerHTML = repliedMessageContent

          messageContentBox
            .getElementsByClassName("active-chat-user-message-reply-box")[0]
            .classList.add(
              "active-chat-user-message-reply-box--deleted-message"
            )
        } else {
          if (
            userMessageBox.classList.contains(
              "active-chat-user-message-box--text"
            )
          ) {
            let userMessageTextContent = userMessageBox.getElementsByClassName(
              "active-chat-user-message-box__content--text"
            )[0]
            if (userMessageTextContent)
              repliedMessageContent = userMessageTextContent.textContent
            messageContentBox.getElementsByClassName(
              "active-chat-user-message-reply-box__user-message"
            )[0].textContent = repliedMessageContent
          } else {
            repliedMessageContent = ""
            if (
              userMessageBox.classList.contains(
                "active-chat-user-message-box--video"
              )
            ) {
              repliedMessageContent = `${svg_videoIcon} <span>Video</span>`
            }
            if (
              userMessageBox.classList.contains(
                "active-chat-user-message-box--audio"
              )
            ) {
              repliedMessageContent = `${svg_audioIcon} <span>Audio</span>`
            }
            if (
              userMessageBox.classList.contains(
                "active-chat-user-message-box--image"
              )
            ) {
              repliedMessageContent = `${svg_imageIcon} <span>Image</span>`
            }
            if (
              userMessageBox.classList.contains(
                "active-chat-user-message-box--youtube"
              )
            ) {
              repliedMessageContent = `${svg_youtubeIcon} <span>Youtube</span>`
            }

            messageContentBox.getElementsByClassName(
              "active-chat-user-message-reply-box__user-message"
            )[0].innerHTML = repliedMessageContent
          }
        }

        messageContentBox.classList.add(
          "active-chat-user-message-box__content-box--replied-message"
        )
        messageBox.classList.add(
          "active-chat-user-message-box--replied-message"
        )
        messageBox.dataset.repliedMessageId = message.repliedTo
      }
    }
  }

  let messageContentInfo = messageBox.getElementsByClassName(
    "active-chat-user-message-box__content-info"
  )[0]

  messageContentInfo.insertAdjacentHTML(
    "beforeend",
    `<div class="active-chat-user-message-box__content-status-container active-chat-user-message-box__content-status-container--pending">
               <div class="active-chat-user-message-box__content-status active-chat-user-message-box__content-status--pending">${svg_messagePendingIcon}
                </div>
      </div>`
  )

  messageBox.classList.add("active-chat-user-message-box--right")
  return messageBox
}

export function replaceClientUserMessage(
  clientMessageId,
  message,
  isUserChanged = true,
  isScrolledToBottom = false
) {
  increaseTotalReceivedMessagesCount()

  let messageBox = activeChatMessageContainer.querySelector(
    `.active-chat-user-message-box[data-client-message-id = "${clientMessageId}"]`
  )

  if (messageBox) {
    messageBox.setAttribute("data-message-id", message._id)
    if (message.hasOwnProperty("sender")) {
      messageBox.setAttribute("data-sender-id", message.sender._id)
      messageBox.setAttribute(
        "data-sender-name",
        message.sender.firstName + " " + message.sender.lastName
      )
    }
    if (
      !message.hasOwnProperty("isDeletedForAll") ||
      (message.hasOwnProperty("isDeletedForAll") &&
        message.isDeletedForAll === false)
    ) {
      let messageBoxInnerHtml = `
        
        <div class="active-chat-user-message-box__content-box">
      
           <div class="active-chat-user-message-box__content-info">
               <div class="active-chat-user-message-box__content-time">${getTimeString(
                 message.createdAt
               )}
               </div>
           </div>
       </div>
       <div class="active-chat-user-message-box__btn" data-message-box-btn="user">${svg_infoBlankBtn}
       </div>
        `
      messageBox.innerHTML = messageBoxInnerHtml

      let messageContentBox = messageBox.getElementsByClassName(
        "active-chat-user-message-box__content-box"
      )[0]
      let messageContentInfo = messageBox.getElementsByClassName(
        "active-chat-user-message-box__content-info"
      )[0]

      if (message.hasMediaContent) {
        if (message.mediaContentType === "video") {
          messageBox.classList.add("active-chat-user-message-box--video")
          messageContentBox.classList.add(
            "active-chat-user-message-box__content-box--video"
          )
          messageContentInfo.classList.add(
            "active-chat-user-message-box__content-info--video"
          )
          let video = document.createElement("video")
          video.classList.add(
            "active-chat-user-message-box__content",
            "active-chat-user-message-box__content--video"
          )
          let videoSource = document.createElement("source")
          videoSource.src = message.mediaContentPath
          //   videoSource.type = message.mediaContentMimeType.split(";")[0]
          video.insertAdjacentElement("beforeend", videoSource)

          messageContentBox.insertAdjacentElement("afterbegin", video)
          createPlyr(video, "video")
        }
        if (message.mediaContentType === "audio") {
          messageBox.classList.add("active-chat-user-message-box--audio")
          messageContentBox.classList.add(
            "active-chat-user-message-box__content-box--audio"
          )
          messageContentInfo.classList.add(
            "active-chat-user-message-box__content-info--audio"
          )
          let audio = document.createElement("audio")
          audio.classList.add(
            "active-chat-user-message-box__content",
            "active-chat-user-message-box__content--audio"
          )

          let audioSource = document.createElement("source")
          audioSource.src = message.mediaContentPath
          audioSource.type = message.mediaContentMimeType
          audio.insertAdjacentElement("beforeend", audioSource)

          messageContentBox.insertAdjacentElement("afterbegin", audio)
          createPlyr(audio, "audio")
        }
        if (message.mediaContentType === "youtube") {
          messageBox.classList.add("active-chat-user-message-box--youtube")
          messageContentBox.classList.add(
            "active-chat-user-message-box__content-box--youtube"
          )
          messageContentInfo.classList.add(
            "active-chat-user-message-box__content-info--youtube"
          )
          let youtube = document.createElement("div")
          youtube.classList.add(
            "active-chat-user-message-box__content",
            "active-chat-user-message-box__content--youtube"
          )

          youtube.setAttribute("data-plyr-provider", "youtube")
          youtube.setAttribute("data-plyr-embed-id", message.mediaContentPath)

          messageContentBox.insertAdjacentElement("afterbegin", youtube)
          createPlyr(youtube, "youtube")
        }
        if (message.mediaContentType === "image") {
          messageBox.classList.add("active-chat-user-message-box--image")
          messageContentBox.classList.add(
            "active-chat-user-message-box__content-box--image"
          )
          messageContentInfo.classList.add(
            "active-chat-user-message-box__content-info--image"
          )

          let image = document.createElement("img")
          image.classList.add(
            "active-chat-user-message-box__content",
            "active-chat-user-message-box__content--image"
          )
          image.onload = () => {
            if (isScrolledToBottom) {
              activeChatMessageContainer.scrollTop =
                activeChatMessageContainer.scrollHeight
            }
          }
          image.setAttribute("src", message.mediaContentPath)
          image.setAttribute("alt", "Image")

          messageContentBox.insertAdjacentElement("afterbegin", image)
        }
      } else {
        messageBox.classList.add("active-chat-user-message-box--text")
        messageContentBox.classList.add(
          "active-chat-user-message-box__content-box--text"
        )
        messageContentInfo.classList.add(
          "active-chat-user-message-box__content-info--text"
        )

        let textMessage = document.createElement("div")
        textMessage.classList.add(
          "active-chat-user-message-box__content",
          "active-chat-user-message-box__content--text"
        )

        if (message.hasOwnProperty("hasLinks") && message.hasLinks === true) {
          insertLinksToTextContent(
            textMessage,
            message.textContent,
            message.linksData
          )
          if (
            message.hasOwnProperty("hasLinkPreview") &&
            message.hasOwnProperty("linkPreviewData") &&
            message.hasLinkPreview === true
          ) {
            let linkPreview = createLinkPreview(
              message.linkPreviewData,
              isScrolledToBottom
            )
            linkPreview.classList.add("link-preview--message")

            messageContentBox.insertAdjacentElement("beforeend", linkPreview)
          }
        } else {
          textMessage.textContent = message.textContent
        }

        ////////////////////////////////////////////////////////////////////
        messageContentBox.insertAdjacentElement("afterbegin", textMessage)
      }
      if (message.isRepliedMessage && message.hasOwnProperty("repliedTo")) {
        let repliedMessageContent, repliedMessageUser

        messageContentBox.insertAdjacentHTML(
          "afterbegin",
          `<div class='active-chat-user-message-reply-box ${
            message.sender._id.toString() ===
            message.repliedTo.sender._id.toString()
              ? "active-chat-user-message-reply-box--self-replied"
              : ""
          }'>
            <div class="active-chat-user-message-reply-box__user">
            </div>
           <div class="active-chat-user-message-reply-box__user-message">
          </div>
        </div>`
        )

        repliedMessageUser =
          message.repliedTo.sender._id.toString() === loginUser._id.toString()
            ? "You"
            : message.repliedTo.sender.firstName +
              " " +
              message.repliedTo.sender.lastName

        messageContentBox.getElementsByClassName(
          "active-chat-user-message-reply-box__user"
        )[0].textContent = repliedMessageUser

        if (
          message.repliedTo.hasOwnProperty("isDeletedForAll") &&
          message.repliedTo.isDeletedForAll === true
        ) {
          repliedMessageContent = `${svg_deletedMessageBlankIcon} <span>This Message has been deleted.</span>`
          messageContentBox.getElementsByClassName(
            "active-chat-user-message-reply-box__user-message"
          )[0].innerHTML = repliedMessageContent
          messageContentBox
            .getElementsByClassName("active-chat-user-message-reply-box")[0]
            .classList.add(
              "active-chat-user-message-reply-box--deleted-message"
            )
        } else {
          if (message.repliedTo.hasMediaContent) {
            if (message.repliedTo.mediaContentType === "video") {
              repliedMessageContent = `${svg_videoIcon} <span>Video</span>`
            }
            if (message.repliedTo.mediaContentType === "audio") {
              repliedMessageContent = `${svg_audioIcon} <span>Audio</span>`
            }
            if (message.repliedTo.mediaContentType === "image") {
              repliedMessageContent = `${svg_imageIcon} <span>Image</span>`
            }
            if (message.repliedTo.mediaContentType === "youtube") {
              repliedMessageContent = `${svg_youtubeIcon} <span>Youtube</span>`
            }
            messageContentBox.getElementsByClassName(
              "active-chat-user-message-reply-box__user-message"
            )[0].innerHTML = repliedMessageContent
          } else {
            repliedMessageContent = message.repliedTo.textContent
            messageContentBox.getElementsByClassName(
              "active-chat-user-message-reply-box__user-message"
            )[0].textContent = repliedMessageContent
          }
        }

        messageContentBox.classList.add(
          "active-chat-user-message-box__content-box--replied-message"
        )
        messageBox.classList.add(
          "active-chat-user-message-box--replied-message"
        )
        messageBox.dataset.repliedMessageId = message.repliedTo._id
      }
    } else {
      messageBox.classList.add("active-chat-user-message-box--deleted-message")

      messageBox.innerHTML = `<div class="active-chat-user-message-box__content-box active-chat-user-message-box__content-box--deleted-message">
    <div class="active-chat-user-message-box__content active-chat-user-message-box__content--deleted-message">
   ${svg_deletedMessageBlankIcon}<span>This Message has been deleted.</span>
    </div>
    <div class="active-chat-user-message-box__content-info active-chat-user-message-box__content-info--deleted-message">
        <div class="active-chat-user-message-box__content-time active-chat-user-message-box__content-time--deleted-message">${getTimeString(
          message.createdAt
        )}
        </div>
    </div>
     </div>
     <div class="active-chat-user-message-box__btn" data-message-box-btn="user">${svg_infoBlankBtn}
     </div>`
    }

    let messageContentInfo = messageBox.getElementsByClassName(
      "active-chat-user-message-box__content-info"
    )[0]
    if (message.sender._id.toString() === loginUser._id.toString()) {
      messageBox.classList.add("active-chat-user-message-box--right")
      messageContentInfo.insertAdjacentHTML(
        "beforeend",
        `<div class="active-chat-user-message-box__content-status-container">
               <div class="active-chat-user-message-box__content-status active-chat-user-message-box__content-status--tick">${svg_messageTickIcon}
                </div>
               <div class="active-chat-user-message-box__content-status active-chat-user-message-box__content-status--tick active-chat-user-message-box__content-status--second-tick ">${svg_messageTickIcon}
               </div>
      </div>`
      )
      let contentStatusContainer = messageContentInfo.getElementsByClassName(
        "active-chat-user-message-box__content-status-container"
      )[0]
      if (
        message.hasOwnProperty("deliveryStatus") &&
        message.deliveryStatus.isDelivered === true
      ) {
        contentStatusContainer.classList.add(
          "active-chat-user-message-box__content-status-container--delivered"
        )
      }

      if (
        message.hasOwnProperty("seenStatus") &&
        message.hasOwnProperty("reader")
      ) {
        let svgs = [
          ...messageBox.querySelectorAll(
            ".active-chat-user-message-box__content-status-container--delivered .active-chat-user-message-box__content-status--tick svg"
          )
        ]
        let color = generateColorForUserMessageStatus(
          message.seenStatus.length - 1,
          message.reader.length - 1
        )
        svgs.forEach(svg => {
          svg.style.fill = `rgba(${color.r}, ${color.g},${color.b},0.7)`
          svg.style.strokeWidth = `1px`
          svg.style.stroke = `rgba(${color.r}, ${color.g},${color.b},0.7)`
        })
        messageBox.dataset.messageSeenStatusCount = message.seenStatus.length
      }
    }

    if (
      isUserChanged === true &&
      message.sender._id.toString() !== loginUser._id.toString()
    ) {
      let messageContentBox = messageBox.getElementsByClassName(
        "active-chat-user-message-box__content-box"
      )[0]
      messageContentBox.insertAdjacentHTML(
        "afterbegin",
        `<div class="active-chat-user-message-box__user-box">
      </div>`
      )
      messageContentBox.getElementsByClassName(
        "active-chat-user-message-box__user-box"
      )[0].textContent =
        message.sender.firstName + " " + message.sender.lastName
      messageContentBox.classList.add(
        "active-chat-user-message-box__content-box--has-user-box"
      )
      messageBox.classList.add("active-chat-user-message-box--has-user-box")
    }

    if (
      message.hasOwnProperty("seenStatus") &&
      message.hasOwnProperty("reader") &&
      message.seenStatus.length !== message.reader.length &&
      message.sender._id.toString() !== loginUser._id.toString()
    ) {
      USER_MESSAGE_BOX_OBSERVER.observe(messageBox)
    }
  }
}

export function updateClientUserMessageStatus(clientMessageId, status) {
  let messageBox = activeChatMessageContainer.querySelector(
    `.active-chat-user-message-box[data-client-message-id = "${clientMessageId}"]`
  )

  if (messageBox) {
    let contentStatusContainer = messageBox.getElementsByClassName(
      "active-chat-user-message-box__content-status-container"
    )[0]
    if (status === "error") {
      contentStatusContainer.className =
        "active-chat-user-message-box__content-status-container active-chat-user-message-box__content-status-container--error"

      contentStatusContainer.innerHTML = `<div class="active-chat-user-message-box__content-status active-chat-user-message-box__content-status--error">${svg_messageErrorIcon}
      </div>
      `
    } else if (status === "sent") {
      contentStatusContainer.className =
        "active-chat-user-message-box__content-status-container active-chat-user-message-box__content-status-container--sent"

      contentStatusContainer.innerHTML = `<div class="active-chat-user-message-box__content-status active-chat-user-message-box__content-status--tick">${svg_messageTickIcon}
        </div>
       <div class="active-chat-user-message-box__content-status
       active-chat-user-message-box__content-status--tick active-chat-user-message-box__content-status--second-tick">${svg_messageTickIcon}
       </div>`
    }
  }
}

function insertLinksToString(str) {
  const regexForUrl =
    /(?:https?:\/\/)(?:www\.)?[^\s]+|(?:\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/g

  const allUrls = str.match(regexForUrl)
  if (allUrls === null) {
    return str
  }
  allUrls.forEach(url => {
    url.startsWith("http") ? url : `http://${url}`
  })

  // console.log("allUrls:", allUrls)
  let textNodes = []
  let i = 0
  let arr = str.split(regexForUrl)

  arr.forEach(text => {
    textNodes.push(document.createTextNode(text))
    if (i < allUrls.length) {
      const link = document.createElement("a")
      link.href = allUrls[i]
      link.target = "_blank"
      link.setAttribute("rel", "noopener noreferrer")
      link.textContent = allUrls[i]
      textNodes.push(link)
      i++
    }
  })

  const container = document.createElement("div")
  textNodes.forEach(node => {
    container.appendChild(node)
  })

  return container.innerHTML
}

function insertLinksToTextContent(textContentContainer, textContent, allLinks) {
  let nodes = []
  let textLastPos = 0

  allLinks.forEach(link => {
    if (link.hasOwnProperty("isLink") && link.isLink) {
      nodes.push(
        document.createTextNode(textContent.slice(textLastPos, link.start))
      )
      const linkNode = document.createElement("a")
      linkNode.classList.add("text-message-url")

      linkNode.href = link.href
      linkNode.target = "_blank"
      linkNode.setAttribute("rel", "noopener noreferrer")
      linkNode.textContent = link.value
      nodes.push(linkNode)

      textLastPos = link.end

      if (link.type === "url") {
        linkNode.classList.add("text-message-url--link")
      } else if (link.type === "email") {
        linkNode.classList.add("text-message-url--email")
      }
    }
  })

  nodes.push(document.createTextNode(textContent.slice(textLastPos)))
  nodes.forEach(node => {
    textContentContainer.appendChild(node)
  })
}

export function createInfoMessage(message) {
  if (
    message.hasOwnProperty("isInfoMessage") &&
    message.isInfoMessage === true
  ) {
    const infoMessageBox = document.createElement("div")
    infoMessageBox.classList.add("active-chat-info-message-box")
    infoMessageBox.setAttribute("data-message-id", message._id)

    let infoMessageBoxInnerHtml = `<div class="active-chat-info-message-box__content">
  </div>`
    infoMessageBox.insertAdjacentHTML("beforeend", infoMessageBoxInnerHtml)

    let infoMessageBoxContent = infoMessageBox.getElementsByClassName(
      "active-chat-info-message-box__content"
    )[0]
    infoMessageBoxContent.textContent = message.infoMessageContent
    if (message.infoMessageType === "start-call") {
      infoMessageBoxContent.insertAdjacentHTML(
        "afterbegin",
        svg_messageStartCallIcon
      )
    }
    if (message.infoMessageType === "end-call") {
      infoMessageBoxContent.insertAdjacentHTML(
        "afterbegin",
        svg_messageEndCallIcon
      )
    }
    if (message.infoMessageType === "new-group") {
      infoMessageBoxContent.insertAdjacentHTML(
        "afterbegin",
        svg_newGroupBlankIcon
      )
    }

    return infoMessageBox
  }
}

export function createDateMessage(messageDate) {
  const dateMessageBox = document.createElement("div")
  dateMessageBox.classList.add("active-chat-date-message-box")

  let dateMessageBoxInnerHtml = `<div class="active-chat-date-message-box__content">
  </div>`
  dateMessageBox.insertAdjacentHTML("beforeend", dateMessageBoxInnerHtml)

  dateMessageBox.getElementsByClassName(
    "active-chat-date-message-box__content"
  )[0].textContent = getDateString(messageDate)

  return dateMessageBox
}

export function createUnseenMessageTagBox(
  messageCount,
  addPosition = "afterbegin"
) {
  const unseenMessageTagBox = document.createElement("div")
  unseenMessageTagBox.classList.add("active-chat-unseen-message-tag-box")

  let unseenMessageTagBoxInnerHtml = `<div class="active-chat-unseen-message-tag-box__content">
    </div>`
  unseenMessageTagBox.insertAdjacentHTML(
    "beforeend",
    unseenMessageTagBoxInnerHtml
  )

  unseenMessageTagBox.getElementsByClassName(
    "active-chat-unseen-message-tag-box__content"
  )[0].textContent = messageCount + " unread messages"

  activeChatMessageContainer.insertAdjacentElement(
    addPosition,
    unseenMessageTagBox
  )
}

export function createLoadingMessagesAnimation() {
  let loadingMessageAnimationBox = document.createElement("div")
  loadingMessageAnimationBox.classList.add("loading-message-animation-box")
  loadingMessageAnimationBox.innerHTML = `<div class="loading-message-animation-box__content"><div></div><div></div></div>`
  return loadingMessageAnimationBox
}
export function convertUserMessageToDeletedForAllMessage(message) {
  let userMessageBox = document.querySelector(
    `.active-chat-user-message-box[data-message-id="${message._id}"]`
  )

  // here senderId and messageId is already set in data attribute
  if (userMessageBox) {
    userMessageBox.className = `active-chat-user-message-box active-chat-user-message-box--deleted-message`
    userMessageBox.innerHTML = `<div class="active-chat-user-message-box__content-box active-chat-user-message-box__content-box--deleted-message">
    <div class="active-chat-user-message-box__content active-chat-user-message-box__content--deleted-message">
   ${svg_deletedMessageBlankIcon}  <span>This Message has been deleted.</span>
    </div>
    <div class="active-chat-user-message-box__content-info active-chat-user-message-box__content-info--deleted-message">
        <div class="active-chat-user-message-box__content-time active-chat-user-message-box__content-time--deleted-message">${getTimeString(
          message.createdAt
        )}
        </div>
    </div>
  </div>
  <div class="active-chat-user-message-box__btn" data-message-box-btn="user">${svg_infoBlankBtn}
  </div>`

    if (message.sender._id.toString() === loginUser._id.toString()) {
      userMessageBox.classList.add("active-chat-user-message-box--right")
    }
  }
}

export function deleteUserMessage(messageId) {
  let userMessageBox = document.querySelector(
    `.active-chat-user-message-box[data-message-id="${messageId}"]`
  )
  if (userMessageBox) userMessageBox.parentNode.removeChild(userMessageBox)
}

export function selectUserMessage(messageId) {
  let userMessageBox = document.querySelector(
    `.active-chat-user-message-box[data-message-id="${messageId}"]`
  )
  if (userMessageBox)
    userMessageBox.classList.add("active-chat-user-message-box--selected")
}

export function unSelectUserMessage(messageId) {
  let userMessageBox = document.querySelector(
    `.active-chat-user-message-box[data-message-id="${messageId}"]`
  )
  if (userMessageBox)
    userMessageBox.classList.remove("active-chat-user-message-box--selected")
}

export function changeUserMessageStatusToDelivered(messageId) {
  setTimeout(() => {
    let userMessageBox = document.querySelector(
      `.active-chat-user-message-box[data-message-id="${messageId}"]`
    )

    if (userMessageBox) {
      userMessageBox
        .getElementsByClassName(
          "active-chat-user-message-box__content-status-container"
        )[0]
        .classList.add(
          "active-chat-user-message-box__content-status-container--delivered"
        )
    }
  }, 500)
}

export function changeUserMessageStatusWithMessageSeenStatusCount(
  messageId,
  messageSeenStatusCount,
  messageReaderCount
) {
  let userMessageBox = document.querySelector(
    `.active-chat-user-message-box[data-message-id="${messageId}"]`
  )

  if (userMessageBox) {
    if (
      messageSeenStatusCount > userMessageBox.dataset.messageSeenStatusCount
    ) {
      let svgs = [
        ...userMessageBox.querySelectorAll(
          ".active-chat-user-message-box__content-status-container .active-chat-user-message-box__content-status svg"
        )
      ]

      let color = generateColorForUserMessageStatus(
        messageSeenStatusCount - 1,
        messageReaderCount - 1
      )
      svgs.forEach(svg => {
        svg.style.fill = `rgb(${color.r}, ${color.g},${color.b})`
        svg.style.strokeWidth = `1px`
        svg.style.stroke = `rgb(${color.r}, ${color.g},${color.b})`
      })
      userMessageBox.dataset.messageSeenStatusCount = messageSeenStatusCount
    }
  }
}
export function generateColorForUserMessageStatus(
  seenStatusCountExceptMe,
  readerCountExceptMe
) {
  let percent = seenStatusCountExceptMe / readerCountExceptMe
  let firstColor = { r: 255, g: 255, b: 255 }
  let secondColor = { r: 8, g: 175, b: 124 }
  let thirdColor = { r: 236, g: 179, b: 101 }

  let resultColor

  if (percent < 0.5) {
    let subPercent = percent / 0.5
    resultColor = getColorWithPercentage(firstColor, secondColor, subPercent)
  } else {
    var subPercent = (percent - 0.5) / 0.5
    resultColor = getColorWithPercentage(secondColor, thirdColor, subPercent)
  }
  return resultColor
}
export function getColorWithPercentage(color1, color2, percent) {
  let r = Math.round(color1.r + (color2.r - color1.r) * percent)
  let g = Math.round(color1.g + (color2.g - color1.g) * percent)
  let b = Math.round(color1.b + (color2.b - color1.b) * percent)
  return { r, g, b }
}

function createLinkPreview(linkPreviewData, isScrolledToBottom = false) {
  let linkPreview = document.createElement("div")
  linkPreview.classList.add("link-preview")
  linkPreview.innerHTML = ` 
    <a href="#" class="link-preview__link">
        <h3 class='link-preview__title'>
        </h3>
      
        <div class='link-preview__pic link-preview__pic--img'>
        </div>
  
         <p class='link-preview__desc'>
         </p>
    </a>
  `
  linkPreview.getElementsByClassName("link-preview__link")[0].href =
    linkPreviewData.url

  let linkPreviewPic =
    linkPreview.getElementsByClassName("link-preview__pic")[0]

  let linkPreviewTitle = linkPreview.getElementsByClassName(
    "link-preview__title"
  )[0]

  let linkPreviewDesc =
    linkPreview.getElementsByClassName("link-preview__desc")[0]

  if (linkPreviewData.mediaType === "image") {
    linkPreviewTitle.textContent = "Image"
    linkPreviewPic.classList.add("link-preview__pic--svg")
    linkPreviewPic.innerHTML = `${svg_messageLinkPreviewImageIcon}`
    linkPreviewDesc.textContent = ""
  } else if (linkPreviewData.mediaType === "audio") {
    linkPreviewTitle.textContent = "Audio"
    linkPreviewPic.classList.add("link-preview__pic--svg")
    linkPreviewPic.innerHTML = `${svg_messageLinkPreviewAudioIcon}`

    linkPreviewDesc.textContent = ""
  } else if (linkPreviewData.mediaType === "video") {
    linkPreviewTitle.textContent = "Video"
    linkPreviewPic.classList.add("link-preview__pic--svg")
    linkPreviewPic.innerHTML = `${svg_messageLinkPreviewVideoIcon}`
    linkPreviewDesc.textContent = ""
  } else if (linkPreviewData.mediaType === "application") {
    linkPreviewTitle.textContent = "Application"
    linkPreviewPic.classList.add("link-preview__pic--svg")
    linkPreviewPic.innerHTML = `${svg_messageLinkPreviewApplicationIcon}`
    linkPreviewDesc.textContent = ""
  } else {
    if (
      linkPreviewData.hasOwnProperty("siteName") &&
      linkPreviewData.siteName &&
      linkPreviewData.siteName !== ""
    ) {
      linkPreviewTitle.insertAdjacentHTML(
        "afterend",
        `  
          <div class='link-preview__site'>
                 <div class='link-preview__site-icon'>
                 </div>
                 <div class='link-preview__site-name'>
                </div>
        </div>
      `
      )
      linkPreview.getElementsByClassName(
        "link-preview__site-name"
      )[0].textContent = linkPreviewData.siteName

      if (
        linkPreviewData.hasOwnProperty("favicons") &&
        linkPreviewData.favicons.length > 0
      ) {
        linkPreview
          .getElementsByClassName("link-preview__site-icon")[0]
          .classList.add("link-preview__site-icon--img")
        linkPreview.getElementsByClassName(
          "link-preview__site-icon"
        )[0].innerHTML = `<img src="${linkPreviewData.favicons[0]}" alt="Website logo">`
      } else {
        linkPreview
          .getElementsByClassName("link-preview__site-icon")[0]
          .classList.add("link-preview__site-icon--svg")
        linkPreview.getElementsByClassName(
          "link-preview__site-icon"
        )[0].innerHTML = `${svg_messageLinkPreviewWebsiteIcon}`
      }
    }
    linkPreview.getElementsByClassName("link-preview__title")[0].textContent =
      linkPreviewData.title || ""

    if (linkPreviewData.images.length > 0) {
      linkPreviewPic.classList.add("link-preview__pic--img")
      let img = document.createElement("img")
      img.src = linkPreviewData.images[0]
      img.alt = "Image preview"
      img.onload = () => {
        if (isScrolledToBottom) {
          if (activeChatMessageContainer) {
            activeChatMessageContainer.scrollTop =
              activeChatMessageContainer.scrollHeight
          }
        }
      }
      linkPreviewPic.insertAdjacentElement("afterbegin", img)
    } else {
      linkPreviewPic.classList.add("link-preview__pic--svg")
      linkPreviewPic.innerHTML = `${svg_messageLinkPreviewWebsiteIcon}`
    }

    linkPreview.getElementsByClassName("link-preview__desc")[0].textContent =
      linkPreviewData.description || ""
  }
  return linkPreview
}
