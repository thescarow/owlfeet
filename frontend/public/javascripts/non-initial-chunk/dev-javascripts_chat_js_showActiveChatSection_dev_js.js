"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkfrontend"] = self["webpackChunkfrontend"] || []).push([["dev-javascripts_chat_js_showActiveChatSection_dev_js"],{

/***/ "./dev-javascripts/chat/js/showActiveChatSection.dev.js":
/*!**************************************************************!*\
  !*** ./dev-javascripts/chat/js/showActiveChatSection.dev.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"clearActiveChatMessageContainer\": () => (/* binding */ clearActiveChatMessageContainer),\n/* harmony export */   \"increaseTotalReceivedMessagesCount\": () => (/* binding */ increaseTotalReceivedMessagesCount),\n/* harmony export */   \"onOffActiveChatInputContainer\": () => (/* binding */ onOffActiveChatInputContainer),\n/* harmony export */   \"showActiveChatSection\": () => (/* binding */ showActiveChatSection),\n/* harmony export */   \"updateActiveChatSection\": () => (/* binding */ updateActiveChatSection)\n/* harmony export */ });\nlet allChatSection = document.getElementById(\"allChatSection\");\nlet activeChatSection = document.getElementById(\"activeChatSection\");\nconst activeChatMessageContainer = document.getElementById(\"activeChatMessageContainer\");\nlet totalReceivedMessagesCount;\nlet totalUnseenMessagesCount;\nasync function showActiveChatSection(chat) {\n  let activeChatInputTextContent = document.getElementById(\"activeChatInputTextContent\");\n  totalReceivedMessagesCount = 0;\n  totalUnseenMessagesCount = 0;\n  activeChatInputTextContent.value = \"\";\n  activeChatMessageContainer.innerHTML = \"\";\n  let {\n    openActiveChatInputBox\n  } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_chat_chat_dev_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../chat.dev.js */ \"./dev-javascripts/chat/chat.dev.js\"));\n  openActiveChatInputBox();\n  updateActiveChatSection(chat);\n\n  if (USER_MESSAGE_BOX_OBSERVER !== undefined) {\n    USER_MESSAGE_BOX_OBSERVER.disconnect();\n  }\n\n  initializeUserMessageBoxObserver();\n\n  if (TOP_MESSAGE_BOX_OBSERVER !== undefined) {\n    TOP_MESSAGE_BOX_OBSERVER.disconnect();\n  }\n\n  initializeTopMessageBoxObserver(); ///////////////////\n\n  const {\n    checkTimeAndCreateOldMessage\n  } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_plyr_dist_plyr_min_js\"), __webpack_require__.e(\"dev-javascripts_chat_js_message_dev_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./message.dev */ \"./dev-javascripts/chat/js/message.dev.js\"));\n  fetch(`/message/fetch-messages/${chat._id}?totalReceivedMessagesCount=0`).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    return Promise.reject(response);\n  }).then(async data => {\n    if (data.isSuccess) {\n      activeChatMessageContainer.innerHTML = \"\";\n      console.log(data);\n\n      if (data.allMessages.length > 0) {\n        totalReceivedMessagesCount += data.allMessages.length;\n        checkTimeAndCreateOldMessage(data.allMessages, activeChatMessageContainer, false);\n        TOP_MESSAGE_BOX_OBSERVER.observe(activeChatMessageContainer.firstElementChild);\n      } // let unseenMessages = data.allMessages.slice(0, data.unseenMessagesCount)\n      // let seenMessages = data.allMessages.slice(data.unseenMessagesCount)\n      // console.log(\n      //   \"unseenMessages:\",\n      //   unseenMessages,\n      //   \"seenMessages:\",\n      //   seenMessages\n      // )\n      // await checkTimeAndCreateOldMessage(\n      //   seenMessages,\n      //   activeChatMessageContainer,\n      //   true\n      // )\n      // if (unseenMessages.length > 0) {\n      //   const { checkTimeAndCreateNewMessage } = await import(\"./message.dev\")\n      //   const { createUnseenMessageTagBox } = await import(\"./message.dev\")\n      //   createUnseenMessageTagBox(\n      //     unseenMessages.length,\n      //     activeChatMessageContainer,\n      //     \"beforeend\",\n      //     false\n      //   )\n      //   for (let i = unseenMessages.length - 1; i >= 0; i--) {\n      //     await checkTimeAndCreateNewMessage(\n      //       unseenMessages[i],\n      //       activeChatMessageContainer,\n      //       false\n      //     )\n      //   }\n      //   let unseenMessageTagBox =\n      //     activeChatMessageContainer.getElementsByClassName(\n      //       \"active-chat-unseen-message-tag-box\"\n      //     )[0]\n      //   if (unseenMessageTagBox) {\n      //     activeChatMessageContainer.scrollTop = unseenMessageTagBox.offsetTop\n      //     // unseenMessageTagBox.scrollIntoView({\n      //     //   behavior: \"smooth\",\n      //     //   block: \"end\",\n      //     //   inline: \"nearest\"\n      //     // })\n      //   }\n      // }\n      // let activeChatUnseenMessageTagBox = document.getElementById(\n      //   \"activeChatUnseenMessageTagBox\"\n      // )\n      // if (activeChatUnseenMessageTagBox) {\n      //   // activeChatMessageContainer.scrollTop = unseenMessageTagBox.offsetTop\n      //   activeChatUnseenMessageTagBox.scrollIntoView({\n      //     behavior: \"smooth\",\n      //     block: \"end\",\n      //     inline: \"nearest\"\n      //   })\n      // }\n\n\n      let {\n        adjustMessageContainerBottomPadding\n      } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_chat_chat_dev_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../chat.dev */ \"./dev-javascripts/chat/chat.dev.js\"));\n      adjustMessageContainerBottomPadding();\n    } else {\n      let {\n        createMainNotification\n      } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_common_mainNotification_dev_js-_81c90\").then(__webpack_require__.bind(__webpack_require__, /*! ../../common/mainNotification.dev */ \"./dev-javascripts/common/mainNotification.dev.js\"));\n      createMainNotification(data.error, \"error\");\n    }\n  }).catch(async err => {\n    console.log(err);\n    let {\n      createMainNotification\n    } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_common_mainNotification_dev_js-_81c90\").then(__webpack_require__.bind(__webpack_require__, /*! ../../common/mainNotification.dev */ \"./dev-javascripts/common/mainNotification.dev.js\"));\n    createMainNotification(\"Server Error In Accessing Messages, Please Refresh Your Page\", \"error\");\n  });\n  allChatSection.classList.add(\"all-chat-section--hide\");\n  activeChatSection.classList.remove(\"active-chat-section--hide\");\n}\nasync function updateActiveChatSection(chat) {\n  let {\n    closeReplyMessageBox\n  } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_chat_js_replyMessageBox_dev_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./replyMessageBox.dev.js */ \"./dev-javascripts/chat/js/replyMessageBox.dev.js\"));\n  closeReplyMessageBox();\n  activeChatSection.dataset.chatId = chat._id;\n  const activeChatHeader = document.getElementById(\"activeChatHeader\");\n  const activeChatHeaderPic = document.getElementById(\"activeChatHeaderPic\");\n  const activeChatImg = document.getElementById(\"activeChatImg\");\n  const activeChatHeaderName = document.getElementById(\"activeChatHeaderName\");\n  const activeChatHeaderStatus = document.getElementById(\"activeChatHeaderStatus\");\n  const activeChatInputContainer = document.getElementById(\"activeChatInputContainer\");\n  activeChatHeader.dataset.chatId = chat._id;\n\n  if (chat.hasOwnProperty(\"chatPic\") && chat.chatPic !== \"\") {\n    activeChatImg.src = chat.chatPic;\n    activeChatHeaderPic.classList.add(\"active-chat-header__pic--hide-svg\");\n    activeChatHeaderPic.classList.remove(\"active-chat-header__pic--hide-img\");\n  } else {\n    activeChatHeaderPic.classList.add(\"active-chat-header__pic--hide-img\");\n    activeChatHeaderPic.classList.remove(\"active-chat-header__pic--hide-svg\");\n  }\n\n  activeChatHeaderName.textContent = chat.chatName;\n\n  if (!chat.isGroupChat) {\n    if (chat.isUserActive) {\n      activeChatHeaderStatus.classList.remove(\"active-chat-header__chat-status--hide\");\n      activeChatHeaderStatus.textContent = \"Active\";\n    } else {\n      let {\n        timeDifferenceFromNow\n      } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_common_calculateTimeDifference_dev_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../../common/calculateTimeDifference.dev */ \"./dev-javascripts/common/calculateTimeDifference.dev.js\"));\n      activeChatHeaderStatus.classList.remove(\"active-chat-header__chat-status--hide\");\n\n      if (chat.hasOwnProperty(\"userLastActive\")) {\n        activeChatHeaderStatus.textContent = `last active ${timeDifferenceFromNow(chat.userLastActive)} ago`;\n      } else {\n        activeChatHeaderStatus.textContent = \"\";\n      }\n    }\n  } else {\n    activeChatHeaderStatus.classList.remove(\"active-chat-header__chat-status--hide\");\n    activeChatHeaderStatus.textContent = \"\";\n  }\n\n  onOffActiveChatInputContainer(chat);\n}\nasync function clearActiveChatMessageContainer() {\n  let activeChatMessageContainer = document.getElementById(\"activeChatMessageContainer\");\n  activeChatMessageContainer.innerHTML = \"\";\n}\nasync function onOffActiveChatInputContainer(chat) {\n  const activeChatInputContainer = document.getElementById(\"activeChatInputContainer\");\n\n  if (chat.hasOwnProperty(\"canSendMessageToThisChat\") && chat.canSendMessageToThisChat === false) {\n    activeChatInputContainer.classList.add(\"active-chat-input-container--disable\");\n    activeChatInputContainer.classList.remove(\"active-chat-input-container--enable\");\n  } else {\n    activeChatInputContainer.classList.add(\"active-chat-input-container--enable\");\n    activeChatInputContainer.classList.remove(\"active-chat-input-container--disable\");\n  }\n}\n\nfunction initializeUserMessageBoxObserver() {\n  USER_MESSAGE_BOX_OBSERVER = new IntersectionObserver(async (entries, observer) => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting === true) {\n        let messageId = entry.target.dataset.messageId;\n        socket.emit(\"chat:update-message-seen-status\", {\n          messageId: messageId\n        });\n        observer.unobserve(entry.target);\n      }\n    });\n  }, {\n    threshold: 0.5,\n    root: activeChatMessageContainer\n  });\n}\n\nfunction initializeTopMessageBoxObserver() {\n  TOP_MESSAGE_BOX_OBSERVER = new IntersectionObserver(async (entries, observer) => {\n    entries.forEach(async entry => {\n      console.log(\"entry.target\", entry.target);\n\n      if (entry.isIntersecting === true) {\n        console.log(\"called topMessageBoxObserver\");\n        observer.unobserve(entry.target);\n        let chatId = activeChatSection.dataset.chatId; // activeChatMessageContainer.scrollTop += 100\n\n        await fetchMessageAndCreateUserMessageBox(chatId);\n      }\n    });\n  }, {\n    threshold: 0.5,\n    root: activeChatMessageContainer,\n    rootMargin: \"0px\"\n  });\n}\n\nasync function fetchMessageAndCreateUserMessageBox(chatId) {\n  const {\n    checkTimeAndCreateOldMessage\n  } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_plyr_dist_plyr_min_js\"), __webpack_require__.e(\"dev-javascripts_chat_js_message_dev_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./message.dev */ \"./dev-javascripts/chat/js/message.dev.js\"));\n  fetch(`/message/fetch-messages/${chatId}?totalReceivedMessagesCount=${totalReceivedMessagesCount}`).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    return Promise.reject(response);\n  }).then(async data => {\n    if (data.isSuccess) {\n      console.log(data);\n\n      if (data.allMessages.length > 0) {\n        totalReceivedMessagesCount += data.allMessages.length;\n        checkTimeAndCreateOldMessage(data.allMessages, activeChatMessageContainer, false);\n        activeChatMessageContainer.scrollTop = activeChatMessageContainer.scrollHeight;\n        TOP_MESSAGE_BOX_OBSERVER.observe(activeChatMessageContainer.firstElementChild);\n      } // if (totalUnseenMessagesCount < totalReceivedMessagesCount) {\n      //   let unseenMessagesLine =\n      //     totalReceivedMessagesCount - totalUnseenMessagesCount\n      //   await checkTimeAndCreateOldMessage(\n      //     data.allMessages.slice(0, unseenMessagesLine),\n      //     activeChatMessageContainer,\n      //     false\n      //   )\n      //   const { createUnseenMessageTagBox } = await import(\"./message.dev\")\n      //   createUnseenMessageTagBox(\n      //     totalUnseenMessagesCount,\n      //     activeChatMessageContainer,\n      //     \"afterbegin\",\n      //     false\n      //   )\n      //   await checkTimeAndCreateOldMessage(\n      //     data.allMessages.slice(unseenMessagesLine),\n      //     activeChatMessageContainer,\n      //     false\n      //   )\n      // } else {\n      // }\n\n    } else {\n      let {\n        createMainNotification\n      } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_common_mainNotification_dev_js-_81c90\").then(__webpack_require__.bind(__webpack_require__, /*! ../../common/mainNotification.dev */ \"./dev-javascripts/common/mainNotification.dev.js\"));\n      createMainNotification(data.error, \"error\");\n    }\n  }).catch(async err => {\n    console.log(err);\n    let {\n      createMainNotification\n    } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_common_mainNotification_dev_js-_81c90\").then(__webpack_require__.bind(__webpack_require__, /*! ../../common/mainNotification.dev */ \"./dev-javascripts/common/mainNotification.dev.js\"));\n    createMainNotification(\"Server Error In Accessing Messages, Please Refresh Your Page\", \"error\");\n  });\n}\n\nfunction increaseTotalReceivedMessagesCount() {\n  totalUnseenMessagesCount = -1;\n  totalReceivedMessagesCount++;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9kZXYtamF2YXNjcmlwdHMvY2hhdC9qcy9zaG93QWN0aXZlQ2hhdFNlY3Rpb24uZGV2LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBSUEsY0FBYyxHQUFHQyxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsZ0JBQXhCLENBQXJCO0FBQ0EsSUFBSUMsaUJBQWlCLEdBQUdGLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixtQkFBeEIsQ0FBeEI7QUFDQSxNQUFNRSwwQkFBMEIsR0FBR0gsUUFBUSxDQUFDQyxjQUFULENBQ2pDLDRCQURpQyxDQUFuQztBQUlBLElBQUlHLDBCQUFKO0FBQ0EsSUFBSUMsd0JBQUo7QUFDTyxlQUFlQyxxQkFBZixDQUFxQ0MsSUFBckMsRUFBMkM7RUFDaEQsSUFBSUMsMEJBQTBCLEdBQUdSLFFBQVEsQ0FBQ0MsY0FBVCxDQUMvQiw0QkFEK0IsQ0FBakM7RUFJQUcsMEJBQTBCLEdBQUcsQ0FBN0I7RUFDQUMsd0JBQXdCLEdBQUcsQ0FBM0I7RUFDQUcsMEJBQTBCLENBQUNDLEtBQTNCLEdBQW1DLEVBQW5DO0VBQ0FOLDBCQUEwQixDQUFDTyxTQUEzQixHQUF1QyxFQUF2QztFQUVBLElBQUk7SUFBRUM7RUFBRixJQUE2QixNQUFNLHlMQUF2QztFQUNBQSxzQkFBc0I7RUFFdEJDLHVCQUF1QixDQUFDTCxJQUFELENBQXZCOztFQUVBLElBQUlNLHlCQUF5QixLQUFLQyxTQUFsQyxFQUE2QztJQUMzQ0QseUJBQXlCLENBQUNFLFVBQTFCO0VBQ0Q7O0VBQ0RDLGdDQUFnQzs7RUFDaEMsSUFBSUMsd0JBQXdCLEtBQUtILFNBQWpDLEVBQTRDO0lBQzFDRyx3QkFBd0IsQ0FBQ0YsVUFBekI7RUFDRDs7RUFDREcsK0JBQStCLEdBdEJpQixDQXdCaEQ7O0VBQ0EsTUFBTTtJQUFFQztFQUFGLElBQW1DLE1BQU0sdVJBQS9DO0VBRUFDLEtBQUssQ0FBRSwyQkFBMEJiLElBQUksQ0FBQ2MsR0FBSSwrQkFBckMsQ0FBTCxDQUNHQyxJQURILENBQ1FDLFFBQVEsSUFBSTtJQUNoQixJQUFJQSxRQUFRLENBQUNDLEVBQWIsRUFBaUI7TUFDZixPQUFPRCxRQUFRLENBQUNFLElBQVQsRUFBUDtJQUNEOztJQUNELE9BQU9DLE9BQU8sQ0FBQ0MsTUFBUixDQUFlSixRQUFmLENBQVA7RUFDRCxDQU5ILEVBT0dELElBUEgsQ0FPUSxNQUFNTSxJQUFOLElBQWM7SUFDbEIsSUFBSUEsSUFBSSxDQUFDQyxTQUFULEVBQW9CO01BQ2xCMUIsMEJBQTBCLENBQUNPLFNBQTNCLEdBQXVDLEVBQXZDO01BQ0FvQixPQUFPLENBQUNDLEdBQVIsQ0FBWUgsSUFBWjs7TUFDQSxJQUFJQSxJQUFJLENBQUNJLFdBQUwsQ0FBaUJDLE1BQWpCLEdBQTBCLENBQTlCLEVBQWlDO1FBQy9CN0IsMEJBQTBCLElBQUl3QixJQUFJLENBQUNJLFdBQUwsQ0FBaUJDLE1BQS9DO1FBQ0FkLDRCQUE0QixDQUMxQlMsSUFBSSxDQUFDSSxXQURxQixFQUUxQjdCLDBCQUYwQixFQUcxQixLQUgwQixDQUE1QjtRQUtBYyx3QkFBd0IsQ0FBQ2lCLE9BQXpCLENBQ0UvQiwwQkFBMEIsQ0FBQ2dDLGlCQUQ3QjtNQUdELENBYmlCLENBZWxCO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BRUE7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BRUE7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFFQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUVBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7OztNQUNBLElBQUk7UUFBRUM7TUFBRixJQUEwQyxNQUFNLHNMQUFwRDtNQUdBQSxtQ0FBbUM7SUFDcEMsQ0E1RUQsTUE0RU87TUFDTCxJQUFJO1FBQUVDO01BQUYsSUFBNkIsTUFBTSwrT0FBdkM7TUFHQUEsc0JBQXNCLENBQUNULElBQUksQ0FBQ1UsS0FBTixFQUFhLE9BQWIsQ0FBdEI7SUFDRDtFQUNGLENBMUZILEVBMkZHQyxLQTNGSCxDQTJGUyxNQUFNQyxHQUFOLElBQWE7SUFDbEJWLE9BQU8sQ0FBQ0MsR0FBUixDQUFZUyxHQUFaO0lBQ0EsSUFBSTtNQUFFSDtJQUFGLElBQTZCLE1BQU0sK09BQXZDO0lBR0FBLHNCQUFzQixDQUNwQiw4REFEb0IsRUFFcEIsT0FGb0IsQ0FBdEI7RUFJRCxDQXBHSDtFQXNHQXRDLGNBQWMsQ0FBQzBDLFNBQWYsQ0FBeUJDLEdBQXpCLENBQTZCLHdCQUE3QjtFQUNBeEMsaUJBQWlCLENBQUN1QyxTQUFsQixDQUE0QkUsTUFBNUIsQ0FBbUMsMkJBQW5DO0FBQ0Q7QUFFTSxlQUFlL0IsdUJBQWYsQ0FBdUNMLElBQXZDLEVBQTZDO0VBQ2xELElBQUk7SUFBRXFDO0VBQUYsSUFBMkIsTUFBTSwrTkFBckM7RUFDQUEsb0JBQW9CO0VBQ3BCMUMsaUJBQWlCLENBQUMyQyxPQUFsQixDQUEwQkMsTUFBMUIsR0FBbUN2QyxJQUFJLENBQUNjLEdBQXhDO0VBQ0EsTUFBTTBCLGdCQUFnQixHQUFHL0MsUUFBUSxDQUFDQyxjQUFULENBQXdCLGtCQUF4QixDQUF6QjtFQUNBLE1BQU0rQyxtQkFBbUIsR0FBR2hELFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixxQkFBeEIsQ0FBNUI7RUFDQSxNQUFNZ0QsYUFBYSxHQUFHakQsUUFBUSxDQUFDQyxjQUFULENBQXdCLGVBQXhCLENBQXRCO0VBQ0EsTUFBTWlELG9CQUFvQixHQUFHbEQsUUFBUSxDQUFDQyxjQUFULENBQXdCLHNCQUF4QixDQUE3QjtFQUNBLE1BQU1rRCxzQkFBc0IsR0FBR25ELFFBQVEsQ0FBQ0MsY0FBVCxDQUM3Qix3QkFENkIsQ0FBL0I7RUFHQSxNQUFNbUQsd0JBQXdCLEdBQUdwRCxRQUFRLENBQUNDLGNBQVQsQ0FDL0IsMEJBRCtCLENBQWpDO0VBSUE4QyxnQkFBZ0IsQ0FBQ0YsT0FBakIsQ0FBeUJDLE1BQXpCLEdBQWtDdkMsSUFBSSxDQUFDYyxHQUF2Qzs7RUFFQSxJQUFJZCxJQUFJLENBQUM4QyxjQUFMLENBQW9CLFNBQXBCLEtBQWtDOUMsSUFBSSxDQUFDK0MsT0FBTCxLQUFpQixFQUF2RCxFQUEyRDtJQUN6REwsYUFBYSxDQUFDTSxHQUFkLEdBQW9CaEQsSUFBSSxDQUFDK0MsT0FBekI7SUFFQU4sbUJBQW1CLENBQUNQLFNBQXBCLENBQThCQyxHQUE5QixDQUFrQyxtQ0FBbEM7SUFDQU0sbUJBQW1CLENBQUNQLFNBQXBCLENBQThCRSxNQUE5QixDQUFxQyxtQ0FBckM7RUFDRCxDQUxELE1BS087SUFDTEssbUJBQW1CLENBQUNQLFNBQXBCLENBQThCQyxHQUE5QixDQUFrQyxtQ0FBbEM7SUFDQU0sbUJBQW1CLENBQUNQLFNBQXBCLENBQThCRSxNQUE5QixDQUFxQyxtQ0FBckM7RUFDRDs7RUFDRE8sb0JBQW9CLENBQUNNLFdBQXJCLEdBQW1DakQsSUFBSSxDQUFDa0QsUUFBeEM7O0VBQ0EsSUFBSSxDQUFDbEQsSUFBSSxDQUFDbUQsV0FBVixFQUF1QjtJQUNyQixJQUFJbkQsSUFBSSxDQUFDb0QsWUFBVCxFQUF1QjtNQUNyQlIsc0JBQXNCLENBQUNWLFNBQXZCLENBQWlDRSxNQUFqQyxDQUNFLHVDQURGO01BR0FRLHNCQUFzQixDQUFDSyxXQUF2QixHQUFxQyxRQUFyQztJQUNELENBTEQsTUFLTztNQUNMLElBQUk7UUFBRUk7TUFBRixJQUE0QixNQUFNLDZQQUF0QztNQUdBVCxzQkFBc0IsQ0FBQ1YsU0FBdkIsQ0FBaUNFLE1BQWpDLENBQ0UsdUNBREY7O01BR0EsSUFBSXBDLElBQUksQ0FBQzhDLGNBQUwsQ0FBb0IsZ0JBQXBCLENBQUosRUFBMkM7UUFDekNGLHNCQUFzQixDQUFDSyxXQUF2QixHQUFzQyxlQUFjSSxxQkFBcUIsQ0FDdkVyRCxJQUFJLENBQUNzRCxjQURrRSxDQUV2RSxNQUZGO01BR0QsQ0FKRCxNQUlPO1FBQ0xWLHNCQUFzQixDQUFDSyxXQUF2QixHQUFxQyxFQUFyQztNQUNEO0lBQ0Y7RUFDRixDQXJCRCxNQXFCTztJQUNMTCxzQkFBc0IsQ0FBQ1YsU0FBdkIsQ0FBaUNFLE1BQWpDLENBQ0UsdUNBREY7SUFHQVEsc0JBQXNCLENBQUNLLFdBQXZCLEdBQXFDLEVBQXJDO0VBQ0Q7O0VBRURNLDZCQUE2QixDQUFDdkQsSUFBRCxDQUE3QjtBQUNEO0FBRU0sZUFBZXdELCtCQUFmLEdBQWlEO0VBQ3RELElBQUk1RCwwQkFBMEIsR0FBR0gsUUFBUSxDQUFDQyxjQUFULENBQy9CLDRCQUQrQixDQUFqQztFQUdBRSwwQkFBMEIsQ0FBQ08sU0FBM0IsR0FBdUMsRUFBdkM7QUFDRDtBQUVNLGVBQWVvRCw2QkFBZixDQUE2Q3ZELElBQTdDLEVBQW1EO0VBQ3hELE1BQU02Qyx3QkFBd0IsR0FBR3BELFFBQVEsQ0FBQ0MsY0FBVCxDQUMvQiwwQkFEK0IsQ0FBakM7O0VBR0EsSUFDRU0sSUFBSSxDQUFDOEMsY0FBTCxDQUFvQiwwQkFBcEIsS0FDQTlDLElBQUksQ0FBQ3lELHdCQUFMLEtBQWtDLEtBRnBDLEVBR0U7SUFDQVosd0JBQXdCLENBQUNYLFNBQXpCLENBQW1DQyxHQUFuQyxDQUNFLHNDQURGO0lBR0FVLHdCQUF3QixDQUFDWCxTQUF6QixDQUFtQ0UsTUFBbkMsQ0FDRSxxQ0FERjtFQUdELENBVkQsTUFVTztJQUNMUyx3QkFBd0IsQ0FBQ1gsU0FBekIsQ0FBbUNDLEdBQW5DLENBQ0UscUNBREY7SUFHQVUsd0JBQXdCLENBQUNYLFNBQXpCLENBQW1DRSxNQUFuQyxDQUNFLHNDQURGO0VBR0Q7QUFDRjs7QUFFRCxTQUFTM0IsZ0NBQVQsR0FBNEM7RUFDMUNILHlCQUF5QixHQUFHLElBQUlvRCxvQkFBSixDQUMxQixPQUFPQyxPQUFQLEVBQWdCQyxRQUFoQixLQUE2QjtJQUMzQkQsT0FBTyxDQUFDRSxPQUFSLENBQWdCQyxLQUFLLElBQUk7TUFDdkIsSUFBSUEsS0FBSyxDQUFDQyxjQUFOLEtBQXlCLElBQTdCLEVBQW1DO1FBQ2pDLElBQUlDLFNBQVMsR0FBR0YsS0FBSyxDQUFDRyxNQUFOLENBQWEzQixPQUFiLENBQXFCMEIsU0FBckM7UUFDQUUsTUFBTSxDQUFDQyxJQUFQLENBQVksaUNBQVosRUFBK0M7VUFDN0NILFNBQVMsRUFBRUE7UUFEa0MsQ0FBL0M7UUFHQUosUUFBUSxDQUFDUSxTQUFULENBQW1CTixLQUFLLENBQUNHLE1BQXpCO01BQ0Q7SUFDRixDQVJEO0VBU0QsQ0FYeUIsRUFZMUI7SUFBRUksU0FBUyxFQUFFLEdBQWI7SUFBa0JDLElBQUksRUFBRTFFO0VBQXhCLENBWjBCLENBQTVCO0FBY0Q7O0FBQ0QsU0FBU2UsK0JBQVQsR0FBMkM7RUFDekNELHdCQUF3QixHQUFHLElBQUlnRCxvQkFBSixDQUN6QixPQUFPQyxPQUFQLEVBQWdCQyxRQUFoQixLQUE2QjtJQUMzQkQsT0FBTyxDQUFDRSxPQUFSLENBQWdCLE1BQU1DLEtBQU4sSUFBZTtNQUM3QnZDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGNBQVosRUFBNEJzQyxLQUFLLENBQUNHLE1BQWxDOztNQUNBLElBQUlILEtBQUssQ0FBQ0MsY0FBTixLQUF5QixJQUE3QixFQUFtQztRQUNqQ3hDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLDhCQUFaO1FBQ0FvQyxRQUFRLENBQUNRLFNBQVQsQ0FBbUJOLEtBQUssQ0FBQ0csTUFBekI7UUFDQSxJQUFJMUIsTUFBTSxHQUFHNUMsaUJBQWlCLENBQUMyQyxPQUFsQixDQUEwQkMsTUFBdkMsQ0FIaUMsQ0FJakM7O1FBQ0EsTUFBTWdDLG1DQUFtQyxDQUFDaEMsTUFBRCxDQUF6QztNQUNEO0lBQ0YsQ0FURDtFQVVELENBWndCLEVBYXpCO0lBQUU4QixTQUFTLEVBQUUsR0FBYjtJQUFrQkMsSUFBSSxFQUFFMUUsMEJBQXhCO0lBQW9ENEUsVUFBVSxFQUFFO0VBQWhFLENBYnlCLENBQTNCO0FBZUQ7O0FBRUQsZUFBZUQsbUNBQWYsQ0FBbURoQyxNQUFuRCxFQUEyRDtFQUN6RCxNQUFNO0lBQUUzQjtFQUFGLElBQW1DLE1BQU0sdVJBQS9DO0VBRUFDLEtBQUssQ0FDRiwyQkFBMEIwQixNQUFPLCtCQUE4QjFDLDBCQUEyQixFQUR4RixDQUFMLENBR0drQixJQUhILENBR1FDLFFBQVEsSUFBSTtJQUNoQixJQUFJQSxRQUFRLENBQUNDLEVBQWIsRUFBaUI7TUFDZixPQUFPRCxRQUFRLENBQUNFLElBQVQsRUFBUDtJQUNEOztJQUNELE9BQU9DLE9BQU8sQ0FBQ0MsTUFBUixDQUFlSixRQUFmLENBQVA7RUFDRCxDQVJILEVBU0dELElBVEgsQ0FTUSxNQUFNTSxJQUFOLElBQWM7SUFDbEIsSUFBSUEsSUFBSSxDQUFDQyxTQUFULEVBQW9CO01BQ2xCQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUgsSUFBWjs7TUFFQSxJQUFJQSxJQUFJLENBQUNJLFdBQUwsQ0FBaUJDLE1BQWpCLEdBQTBCLENBQTlCLEVBQWlDO1FBQy9CN0IsMEJBQTBCLElBQUl3QixJQUFJLENBQUNJLFdBQUwsQ0FBaUJDLE1BQS9DO1FBQ0FkLDRCQUE0QixDQUMxQlMsSUFBSSxDQUFDSSxXQURxQixFQUUxQjdCLDBCQUYwQixFQUcxQixLQUgwQixDQUE1QjtRQUtBQSwwQkFBMEIsQ0FBQzZFLFNBQTNCLEdBQ0U3RSwwQkFBMEIsQ0FBQzhFLFlBRDdCO1FBRUFoRSx3QkFBd0IsQ0FBQ2lCLE9BQXpCLENBQ0UvQiwwQkFBMEIsQ0FBQ2dDLGlCQUQ3QjtNQUdELENBZmlCLENBaUJsQjtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFFQTs7SUFDRCxDQXhDRCxNQXdDTztNQUNMLElBQUk7UUFBRUU7TUFBRixJQUE2QixNQUFNLCtPQUF2QztNQUdBQSxzQkFBc0IsQ0FBQ1QsSUFBSSxDQUFDVSxLQUFOLEVBQWEsT0FBYixDQUF0QjtJQUNEO0VBQ0YsQ0F4REgsRUF5REdDLEtBekRILENBeURTLE1BQU1DLEdBQU4sSUFBYTtJQUNsQlYsT0FBTyxDQUFDQyxHQUFSLENBQVlTLEdBQVo7SUFDQSxJQUFJO01BQUVIO0lBQUYsSUFBNkIsTUFBTSwrT0FBdkM7SUFHQUEsc0JBQXNCLENBQ3BCLDhEQURvQixFQUVwQixPQUZvQixDQUF0QjtFQUlELENBbEVIO0FBbUVEOztBQUVNLFNBQVM2QyxrQ0FBVCxHQUE4QztFQUNuRDdFLHdCQUF3QixHQUFHLENBQUMsQ0FBNUI7RUFDQUQsMEJBQTBCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9kZXYtamF2YXNjcmlwdHMvY2hhdC9qcy9zaG93QWN0aXZlQ2hhdFNlY3Rpb24uZGV2LmpzP2JiNzEiXSwic291cmNlc0NvbnRlbnQiOlsibGV0IGFsbENoYXRTZWN0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhbGxDaGF0U2VjdGlvblwiKVxyXG5sZXQgYWN0aXZlQ2hhdFNlY3Rpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFjdGl2ZUNoYXRTZWN0aW9uXCIpXHJcbmNvbnN0IGFjdGl2ZUNoYXRNZXNzYWdlQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgXCJhY3RpdmVDaGF0TWVzc2FnZUNvbnRhaW5lclwiXHJcbilcclxuXHJcbmxldCB0b3RhbFJlY2VpdmVkTWVzc2FnZXNDb3VudFxyXG5sZXQgdG90YWxVbnNlZW5NZXNzYWdlc0NvdW50XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaG93QWN0aXZlQ2hhdFNlY3Rpb24oY2hhdCkge1xyXG4gIGxldCBhY3RpdmVDaGF0SW5wdXRUZXh0Q29udGVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgXCJhY3RpdmVDaGF0SW5wdXRUZXh0Q29udGVudFwiXHJcbiAgKVxyXG5cclxuICB0b3RhbFJlY2VpdmVkTWVzc2FnZXNDb3VudCA9IDBcclxuICB0b3RhbFVuc2Vlbk1lc3NhZ2VzQ291bnQgPSAwXHJcbiAgYWN0aXZlQ2hhdElucHV0VGV4dENvbnRlbnQudmFsdWUgPSBcIlwiXHJcbiAgYWN0aXZlQ2hhdE1lc3NhZ2VDb250YWluZXIuaW5uZXJIVE1MID0gXCJcIlxyXG5cclxuICBsZXQgeyBvcGVuQWN0aXZlQ2hhdElucHV0Qm94IH0gPSBhd2FpdCBpbXBvcnQoXCIuLi9jaGF0LmRldi5qc1wiKVxyXG4gIG9wZW5BY3RpdmVDaGF0SW5wdXRCb3goKVxyXG5cclxuICB1cGRhdGVBY3RpdmVDaGF0U2VjdGlvbihjaGF0KVxyXG5cclxuICBpZiAoVVNFUl9NRVNTQUdFX0JPWF9PQlNFUlZFUiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICBVU0VSX01FU1NBR0VfQk9YX09CU0VSVkVSLmRpc2Nvbm5lY3QoKVxyXG4gIH1cclxuICBpbml0aWFsaXplVXNlck1lc3NhZ2VCb3hPYnNlcnZlcigpXHJcbiAgaWYgKFRPUF9NRVNTQUdFX0JPWF9PQlNFUlZFUiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICBUT1BfTUVTU0FHRV9CT1hfT0JTRVJWRVIuZGlzY29ubmVjdCgpXHJcbiAgfVxyXG4gIGluaXRpYWxpemVUb3BNZXNzYWdlQm94T2JzZXJ2ZXIoKVxyXG5cclxuICAvLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgY29uc3QgeyBjaGVja1RpbWVBbmRDcmVhdGVPbGRNZXNzYWdlIH0gPSBhd2FpdCBpbXBvcnQoXCIuL21lc3NhZ2UuZGV2XCIpXHJcblxyXG4gIGZldGNoKGAvbWVzc2FnZS9mZXRjaC1tZXNzYWdlcy8ke2NoYXQuX2lkfT90b3RhbFJlY2VpdmVkTWVzc2FnZXNDb3VudD0wYClcclxuICAgIC50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZXNwb25zZSlcclxuICAgIH0pXHJcbiAgICAudGhlbihhc3luYyBkYXRhID0+IHtcclxuICAgICAgaWYgKGRhdGEuaXNTdWNjZXNzKSB7XHJcbiAgICAgICAgYWN0aXZlQ2hhdE1lc3NhZ2VDb250YWluZXIuaW5uZXJIVE1MID0gXCJcIlxyXG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGEpXHJcbiAgICAgICAgaWYgKGRhdGEuYWxsTWVzc2FnZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgdG90YWxSZWNlaXZlZE1lc3NhZ2VzQ291bnQgKz0gZGF0YS5hbGxNZXNzYWdlcy5sZW5ndGhcclxuICAgICAgICAgIGNoZWNrVGltZUFuZENyZWF0ZU9sZE1lc3NhZ2UoXHJcbiAgICAgICAgICAgIGRhdGEuYWxsTWVzc2FnZXMsXHJcbiAgICAgICAgICAgIGFjdGl2ZUNoYXRNZXNzYWdlQ29udGFpbmVyLFxyXG4gICAgICAgICAgICBmYWxzZVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICAgVE9QX01FU1NBR0VfQk9YX09CU0VSVkVSLm9ic2VydmUoXHJcbiAgICAgICAgICAgIGFjdGl2ZUNoYXRNZXNzYWdlQ29udGFpbmVyLmZpcnN0RWxlbWVudENoaWxkXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBsZXQgdW5zZWVuTWVzc2FnZXMgPSBkYXRhLmFsbE1lc3NhZ2VzLnNsaWNlKDAsIGRhdGEudW5zZWVuTWVzc2FnZXNDb3VudClcclxuICAgICAgICAvLyBsZXQgc2Vlbk1lc3NhZ2VzID0gZGF0YS5hbGxNZXNzYWdlcy5zbGljZShkYXRhLnVuc2Vlbk1lc3NhZ2VzQ291bnQpXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXHJcbiAgICAgICAgLy8gICBcInVuc2Vlbk1lc3NhZ2VzOlwiLFxyXG4gICAgICAgIC8vICAgdW5zZWVuTWVzc2FnZXMsXHJcbiAgICAgICAgLy8gICBcInNlZW5NZXNzYWdlczpcIixcclxuICAgICAgICAvLyAgIHNlZW5NZXNzYWdlc1xyXG4gICAgICAgIC8vIClcclxuICAgICAgICAvLyBhd2FpdCBjaGVja1RpbWVBbmRDcmVhdGVPbGRNZXNzYWdlKFxyXG4gICAgICAgIC8vICAgc2Vlbk1lc3NhZ2VzLFxyXG4gICAgICAgIC8vICAgYWN0aXZlQ2hhdE1lc3NhZ2VDb250YWluZXIsXHJcbiAgICAgICAgLy8gICB0cnVlXHJcbiAgICAgICAgLy8gKVxyXG5cclxuICAgICAgICAvLyBpZiAodW5zZWVuTWVzc2FnZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIC8vICAgY29uc3QgeyBjaGVja1RpbWVBbmRDcmVhdGVOZXdNZXNzYWdlIH0gPSBhd2FpdCBpbXBvcnQoXCIuL21lc3NhZ2UuZGV2XCIpXHJcbiAgICAgICAgLy8gICBjb25zdCB7IGNyZWF0ZVVuc2Vlbk1lc3NhZ2VUYWdCb3ggfSA9IGF3YWl0IGltcG9ydChcIi4vbWVzc2FnZS5kZXZcIilcclxuICAgICAgICAvLyAgIGNyZWF0ZVVuc2Vlbk1lc3NhZ2VUYWdCb3goXHJcbiAgICAgICAgLy8gICAgIHVuc2Vlbk1lc3NhZ2VzLmxlbmd0aCxcclxuICAgICAgICAvLyAgICAgYWN0aXZlQ2hhdE1lc3NhZ2VDb250YWluZXIsXHJcbiAgICAgICAgLy8gICAgIFwiYmVmb3JlZW5kXCIsXHJcbiAgICAgICAgLy8gICAgIGZhbHNlXHJcbiAgICAgICAgLy8gICApXHJcblxyXG4gICAgICAgIC8vICAgZm9yIChsZXQgaSA9IHVuc2Vlbk1lc3NhZ2VzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgLy8gICAgIGF3YWl0IGNoZWNrVGltZUFuZENyZWF0ZU5ld01lc3NhZ2UoXHJcbiAgICAgICAgLy8gICAgICAgdW5zZWVuTWVzc2FnZXNbaV0sXHJcbiAgICAgICAgLy8gICAgICAgYWN0aXZlQ2hhdE1lc3NhZ2VDb250YWluZXIsXHJcbiAgICAgICAgLy8gICAgICAgZmFsc2VcclxuICAgICAgICAvLyAgICAgKVxyXG4gICAgICAgIC8vICAgfVxyXG5cclxuICAgICAgICAvLyAgIGxldCB1bnNlZW5NZXNzYWdlVGFnQm94ID1cclxuICAgICAgICAvLyAgICAgYWN0aXZlQ2hhdE1lc3NhZ2VDb250YWluZXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcclxuICAgICAgICAvLyAgICAgICBcImFjdGl2ZS1jaGF0LXVuc2Vlbi1tZXNzYWdlLXRhZy1ib3hcIlxyXG4gICAgICAgIC8vICAgICApWzBdXHJcbiAgICAgICAgLy8gICBpZiAodW5zZWVuTWVzc2FnZVRhZ0JveCkge1xyXG4gICAgICAgIC8vICAgICBhY3RpdmVDaGF0TWVzc2FnZUNvbnRhaW5lci5zY3JvbGxUb3AgPSB1bnNlZW5NZXNzYWdlVGFnQm94Lm9mZnNldFRvcFxyXG4gICAgICAgIC8vICAgICAvLyB1bnNlZW5NZXNzYWdlVGFnQm94LnNjcm9sbEludG9WaWV3KHtcclxuICAgICAgICAvLyAgICAgLy8gICBiZWhhdmlvcjogXCJzbW9vdGhcIixcclxuICAgICAgICAvLyAgICAgLy8gICBibG9jazogXCJlbmRcIixcclxuICAgICAgICAvLyAgICAgLy8gICBpbmxpbmU6IFwibmVhcmVzdFwiXHJcbiAgICAgICAgLy8gICAgIC8vIH0pXHJcbiAgICAgICAgLy8gICB9XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAvLyBsZXQgYWN0aXZlQ2hhdFVuc2Vlbk1lc3NhZ2VUYWdCb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcclxuICAgICAgICAvLyAgIFwiYWN0aXZlQ2hhdFVuc2Vlbk1lc3NhZ2VUYWdCb3hcIlxyXG4gICAgICAgIC8vIClcclxuICAgICAgICAvLyBpZiAoYWN0aXZlQ2hhdFVuc2Vlbk1lc3NhZ2VUYWdCb3gpIHtcclxuICAgICAgICAvLyAgIC8vIGFjdGl2ZUNoYXRNZXNzYWdlQ29udGFpbmVyLnNjcm9sbFRvcCA9IHVuc2Vlbk1lc3NhZ2VUYWdCb3gub2Zmc2V0VG9wXHJcbiAgICAgICAgLy8gICBhY3RpdmVDaGF0VW5zZWVuTWVzc2FnZVRhZ0JveC5zY3JvbGxJbnRvVmlldyh7XHJcbiAgICAgICAgLy8gICAgIGJlaGF2aW9yOiBcInNtb290aFwiLFxyXG4gICAgICAgIC8vICAgICBibG9jazogXCJlbmRcIixcclxuICAgICAgICAvLyAgICAgaW5saW5lOiBcIm5lYXJlc3RcIlxyXG4gICAgICAgIC8vICAgfSlcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgbGV0IHsgYWRqdXN0TWVzc2FnZUNvbnRhaW5lckJvdHRvbVBhZGRpbmcgfSA9IGF3YWl0IGltcG9ydChcclxuICAgICAgICAgIFwiLi4vY2hhdC5kZXZcIlxyXG4gICAgICAgIClcclxuICAgICAgICBhZGp1c3RNZXNzYWdlQ29udGFpbmVyQm90dG9tUGFkZGluZygpXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGV0IHsgY3JlYXRlTWFpbk5vdGlmaWNhdGlvbiB9ID0gYXdhaXQgaW1wb3J0KFxyXG4gICAgICAgICAgXCIuLi8uLi9jb21tb24vbWFpbk5vdGlmaWNhdGlvbi5kZXZcIlxyXG4gICAgICAgIClcclxuICAgICAgICBjcmVhdGVNYWluTm90aWZpY2F0aW9uKGRhdGEuZXJyb3IsIFwiZXJyb3JcIilcclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgIC5jYXRjaChhc3luYyBlcnIgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhlcnIpXHJcbiAgICAgIGxldCB7IGNyZWF0ZU1haW5Ob3RpZmljYXRpb24gfSA9IGF3YWl0IGltcG9ydChcclxuICAgICAgICBcIi4uLy4uL2NvbW1vbi9tYWluTm90aWZpY2F0aW9uLmRldlwiXHJcbiAgICAgIClcclxuICAgICAgY3JlYXRlTWFpbk5vdGlmaWNhdGlvbihcclxuICAgICAgICBcIlNlcnZlciBFcnJvciBJbiBBY2Nlc3NpbmcgTWVzc2FnZXMsIFBsZWFzZSBSZWZyZXNoIFlvdXIgUGFnZVwiLFxyXG4gICAgICAgIFwiZXJyb3JcIlxyXG4gICAgICApXHJcbiAgICB9KVxyXG5cclxuICBhbGxDaGF0U2VjdGlvbi5jbGFzc0xpc3QuYWRkKFwiYWxsLWNoYXQtc2VjdGlvbi0taGlkZVwiKVxyXG4gIGFjdGl2ZUNoYXRTZWN0aW9uLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmUtY2hhdC1zZWN0aW9uLS1oaWRlXCIpXHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVBY3RpdmVDaGF0U2VjdGlvbihjaGF0KSB7XHJcbiAgbGV0IHsgY2xvc2VSZXBseU1lc3NhZ2VCb3ggfSA9IGF3YWl0IGltcG9ydChcIi4vcmVwbHlNZXNzYWdlQm94LmRldi5qc1wiKVxyXG4gIGNsb3NlUmVwbHlNZXNzYWdlQm94KClcclxuICBhY3RpdmVDaGF0U2VjdGlvbi5kYXRhc2V0LmNoYXRJZCA9IGNoYXQuX2lkXHJcbiAgY29uc3QgYWN0aXZlQ2hhdEhlYWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWN0aXZlQ2hhdEhlYWRlclwiKVxyXG4gIGNvbnN0IGFjdGl2ZUNoYXRIZWFkZXJQaWMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFjdGl2ZUNoYXRIZWFkZXJQaWNcIilcclxuICBjb25zdCBhY3RpdmVDaGF0SW1nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhY3RpdmVDaGF0SW1nXCIpXHJcbiAgY29uc3QgYWN0aXZlQ2hhdEhlYWRlck5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFjdGl2ZUNoYXRIZWFkZXJOYW1lXCIpXHJcbiAgY29uc3QgYWN0aXZlQ2hhdEhlYWRlclN0YXR1cyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgXCJhY3RpdmVDaGF0SGVhZGVyU3RhdHVzXCJcclxuICApXHJcbiAgY29uc3QgYWN0aXZlQ2hhdElucHV0Q29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICBcImFjdGl2ZUNoYXRJbnB1dENvbnRhaW5lclwiXHJcbiAgKVxyXG5cclxuICBhY3RpdmVDaGF0SGVhZGVyLmRhdGFzZXQuY2hhdElkID0gY2hhdC5faWRcclxuXHJcbiAgaWYgKGNoYXQuaGFzT3duUHJvcGVydHkoXCJjaGF0UGljXCIpICYmIGNoYXQuY2hhdFBpYyAhPT0gXCJcIikge1xyXG4gICAgYWN0aXZlQ2hhdEltZy5zcmMgPSBjaGF0LmNoYXRQaWNcclxuXHJcbiAgICBhY3RpdmVDaGF0SGVhZGVyUGljLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmUtY2hhdC1oZWFkZXJfX3BpYy0taGlkZS1zdmdcIilcclxuICAgIGFjdGl2ZUNoYXRIZWFkZXJQaWMuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZS1jaGF0LWhlYWRlcl9fcGljLS1oaWRlLWltZ1wiKVxyXG4gIH0gZWxzZSB7XHJcbiAgICBhY3RpdmVDaGF0SGVhZGVyUGljLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmUtY2hhdC1oZWFkZXJfX3BpYy0taGlkZS1pbWdcIilcclxuICAgIGFjdGl2ZUNoYXRIZWFkZXJQaWMuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZS1jaGF0LWhlYWRlcl9fcGljLS1oaWRlLXN2Z1wiKVxyXG4gIH1cclxuICBhY3RpdmVDaGF0SGVhZGVyTmFtZS50ZXh0Q29udGVudCA9IGNoYXQuY2hhdE5hbWVcclxuICBpZiAoIWNoYXQuaXNHcm91cENoYXQpIHtcclxuICAgIGlmIChjaGF0LmlzVXNlckFjdGl2ZSkge1xyXG4gICAgICBhY3RpdmVDaGF0SGVhZGVyU3RhdHVzLmNsYXNzTGlzdC5yZW1vdmUoXHJcbiAgICAgICAgXCJhY3RpdmUtY2hhdC1oZWFkZXJfX2NoYXQtc3RhdHVzLS1oaWRlXCJcclxuICAgICAgKVxyXG4gICAgICBhY3RpdmVDaGF0SGVhZGVyU3RhdHVzLnRleHRDb250ZW50ID0gXCJBY3RpdmVcIlxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbGV0IHsgdGltZURpZmZlcmVuY2VGcm9tTm93IH0gPSBhd2FpdCBpbXBvcnQoXHJcbiAgICAgICAgXCIuLi8uLi9jb21tb24vY2FsY3VsYXRlVGltZURpZmZlcmVuY2UuZGV2XCJcclxuICAgICAgKVxyXG4gICAgICBhY3RpdmVDaGF0SGVhZGVyU3RhdHVzLmNsYXNzTGlzdC5yZW1vdmUoXHJcbiAgICAgICAgXCJhY3RpdmUtY2hhdC1oZWFkZXJfX2NoYXQtc3RhdHVzLS1oaWRlXCJcclxuICAgICAgKVxyXG4gICAgICBpZiAoY2hhdC5oYXNPd25Qcm9wZXJ0eShcInVzZXJMYXN0QWN0aXZlXCIpKSB7XHJcbiAgICAgICAgYWN0aXZlQ2hhdEhlYWRlclN0YXR1cy50ZXh0Q29udGVudCA9IGBsYXN0IGFjdGl2ZSAke3RpbWVEaWZmZXJlbmNlRnJvbU5vdyhcclxuICAgICAgICAgIGNoYXQudXNlckxhc3RBY3RpdmVcclxuICAgICAgICApfSBhZ29gXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYWN0aXZlQ2hhdEhlYWRlclN0YXR1cy50ZXh0Q29udGVudCA9IFwiXCJcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBhY3RpdmVDaGF0SGVhZGVyU3RhdHVzLmNsYXNzTGlzdC5yZW1vdmUoXHJcbiAgICAgIFwiYWN0aXZlLWNoYXQtaGVhZGVyX19jaGF0LXN0YXR1cy0taGlkZVwiXHJcbiAgICApXHJcbiAgICBhY3RpdmVDaGF0SGVhZGVyU3RhdHVzLnRleHRDb250ZW50ID0gXCJcIlxyXG4gIH1cclxuXHJcbiAgb25PZmZBY3RpdmVDaGF0SW5wdXRDb250YWluZXIoY2hhdClcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNsZWFyQWN0aXZlQ2hhdE1lc3NhZ2VDb250YWluZXIoKSB7XHJcbiAgbGV0IGFjdGl2ZUNoYXRNZXNzYWdlQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICBcImFjdGl2ZUNoYXRNZXNzYWdlQ29udGFpbmVyXCJcclxuICApXHJcbiAgYWN0aXZlQ2hhdE1lc3NhZ2VDb250YWluZXIuaW5uZXJIVE1MID0gXCJcIlxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gb25PZmZBY3RpdmVDaGF0SW5wdXRDb250YWluZXIoY2hhdCkge1xyXG4gIGNvbnN0IGFjdGl2ZUNoYXRJbnB1dENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgXCJhY3RpdmVDaGF0SW5wdXRDb250YWluZXJcIlxyXG4gIClcclxuICBpZiAoXHJcbiAgICBjaGF0Lmhhc093blByb3BlcnR5KFwiY2FuU2VuZE1lc3NhZ2VUb1RoaXNDaGF0XCIpICYmXHJcbiAgICBjaGF0LmNhblNlbmRNZXNzYWdlVG9UaGlzQ2hhdCA9PT0gZmFsc2VcclxuICApIHtcclxuICAgIGFjdGl2ZUNoYXRJbnB1dENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFxyXG4gICAgICBcImFjdGl2ZS1jaGF0LWlucHV0LWNvbnRhaW5lci0tZGlzYWJsZVwiXHJcbiAgICApXHJcbiAgICBhY3RpdmVDaGF0SW5wdXRDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShcclxuICAgICAgXCJhY3RpdmUtY2hhdC1pbnB1dC1jb250YWluZXItLWVuYWJsZVwiXHJcbiAgICApXHJcbiAgfSBlbHNlIHtcclxuICAgIGFjdGl2ZUNoYXRJbnB1dENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFxyXG4gICAgICBcImFjdGl2ZS1jaGF0LWlucHV0LWNvbnRhaW5lci0tZW5hYmxlXCJcclxuICAgIClcclxuICAgIGFjdGl2ZUNoYXRJbnB1dENvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKFxyXG4gICAgICBcImFjdGl2ZS1jaGF0LWlucHV0LWNvbnRhaW5lci0tZGlzYWJsZVwiXHJcbiAgICApXHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0aWFsaXplVXNlck1lc3NhZ2VCb3hPYnNlcnZlcigpIHtcclxuICBVU0VSX01FU1NBR0VfQk9YX09CU0VSVkVSID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKFxyXG4gICAgYXN5bmMgKGVudHJpZXMsIG9ic2VydmVyKSA9PiB7XHJcbiAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XHJcbiAgICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nID09PSB0cnVlKSB7XHJcbiAgICAgICAgICBsZXQgbWVzc2FnZUlkID0gZW50cnkudGFyZ2V0LmRhdGFzZXQubWVzc2FnZUlkXHJcbiAgICAgICAgICBzb2NrZXQuZW1pdChcImNoYXQ6dXBkYXRlLW1lc3NhZ2Utc2Vlbi1zdGF0dXNcIiwge1xyXG4gICAgICAgICAgICBtZXNzYWdlSWQ6IG1lc3NhZ2VJZFxyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZShlbnRyeS50YXJnZXQpXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfSxcclxuICAgIHsgdGhyZXNob2xkOiAwLjUsIHJvb3Q6IGFjdGl2ZUNoYXRNZXNzYWdlQ29udGFpbmVyIH1cclxuICApXHJcbn1cclxuZnVuY3Rpb24gaW5pdGlhbGl6ZVRvcE1lc3NhZ2VCb3hPYnNlcnZlcigpIHtcclxuICBUT1BfTUVTU0FHRV9CT1hfT0JTRVJWRVIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoXHJcbiAgICBhc3luYyAoZW50cmllcywgb2JzZXJ2ZXIpID0+IHtcclxuICAgICAgZW50cmllcy5mb3JFYWNoKGFzeW5jIGVudHJ5ID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcImVudHJ5LnRhcmdldFwiLCBlbnRyeS50YXJnZXQpXHJcbiAgICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nID09PSB0cnVlKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImNhbGxlZCB0b3BNZXNzYWdlQm94T2JzZXJ2ZXJcIilcclxuICAgICAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZShlbnRyeS50YXJnZXQpXHJcbiAgICAgICAgICBsZXQgY2hhdElkID0gYWN0aXZlQ2hhdFNlY3Rpb24uZGF0YXNldC5jaGF0SWRcclxuICAgICAgICAgIC8vIGFjdGl2ZUNoYXRNZXNzYWdlQ29udGFpbmVyLnNjcm9sbFRvcCArPSAxMDBcclxuICAgICAgICAgIGF3YWl0IGZldGNoTWVzc2FnZUFuZENyZWF0ZVVzZXJNZXNzYWdlQm94KGNoYXRJZClcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9LFxyXG4gICAgeyB0aHJlc2hvbGQ6IDAuNSwgcm9vdDogYWN0aXZlQ2hhdE1lc3NhZ2VDb250YWluZXIsIHJvb3RNYXJnaW46IFwiMHB4XCIgfVxyXG4gIClcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hNZXNzYWdlQW5kQ3JlYXRlVXNlck1lc3NhZ2VCb3goY2hhdElkKSB7XHJcbiAgY29uc3QgeyBjaGVja1RpbWVBbmRDcmVhdGVPbGRNZXNzYWdlIH0gPSBhd2FpdCBpbXBvcnQoXCIuL21lc3NhZ2UuZGV2XCIpXHJcblxyXG4gIGZldGNoKFxyXG4gICAgYC9tZXNzYWdlL2ZldGNoLW1lc3NhZ2VzLyR7Y2hhdElkfT90b3RhbFJlY2VpdmVkTWVzc2FnZXNDb3VudD0ke3RvdGFsUmVjZWl2ZWRNZXNzYWdlc0NvdW50fWBcclxuICApXHJcbiAgICAudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgIGlmIChyZXNwb25zZS5vaykge1xyXG4gICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKClcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVzcG9uc2UpXHJcbiAgICB9KVxyXG4gICAgLnRoZW4oYXN5bmMgZGF0YSA9PiB7XHJcbiAgICAgIGlmIChkYXRhLmlzU3VjY2Vzcykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGEpXHJcblxyXG4gICAgICAgIGlmIChkYXRhLmFsbE1lc3NhZ2VzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIHRvdGFsUmVjZWl2ZWRNZXNzYWdlc0NvdW50ICs9IGRhdGEuYWxsTWVzc2FnZXMubGVuZ3RoXHJcbiAgICAgICAgICBjaGVja1RpbWVBbmRDcmVhdGVPbGRNZXNzYWdlKFxyXG4gICAgICAgICAgICBkYXRhLmFsbE1lc3NhZ2VzLFxyXG4gICAgICAgICAgICBhY3RpdmVDaGF0TWVzc2FnZUNvbnRhaW5lcixcclxuICAgICAgICAgICAgZmFsc2VcclxuICAgICAgICAgIClcclxuICAgICAgICAgIGFjdGl2ZUNoYXRNZXNzYWdlQ29udGFpbmVyLnNjcm9sbFRvcCA9XHJcbiAgICAgICAgICAgIGFjdGl2ZUNoYXRNZXNzYWdlQ29udGFpbmVyLnNjcm9sbEhlaWdodFxyXG4gICAgICAgICAgVE9QX01FU1NBR0VfQk9YX09CU0VSVkVSLm9ic2VydmUoXHJcbiAgICAgICAgICAgIGFjdGl2ZUNoYXRNZXNzYWdlQ29udGFpbmVyLmZpcnN0RWxlbWVudENoaWxkXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBpZiAodG90YWxVbnNlZW5NZXNzYWdlc0NvdW50IDwgdG90YWxSZWNlaXZlZE1lc3NhZ2VzQ291bnQpIHtcclxuICAgICAgICAvLyAgIGxldCB1bnNlZW5NZXNzYWdlc0xpbmUgPVxyXG4gICAgICAgIC8vICAgICB0b3RhbFJlY2VpdmVkTWVzc2FnZXNDb3VudCAtIHRvdGFsVW5zZWVuTWVzc2FnZXNDb3VudFxyXG4gICAgICAgIC8vICAgYXdhaXQgY2hlY2tUaW1lQW5kQ3JlYXRlT2xkTWVzc2FnZShcclxuICAgICAgICAvLyAgICAgZGF0YS5hbGxNZXNzYWdlcy5zbGljZSgwLCB1bnNlZW5NZXNzYWdlc0xpbmUpLFxyXG4gICAgICAgIC8vICAgICBhY3RpdmVDaGF0TWVzc2FnZUNvbnRhaW5lcixcclxuICAgICAgICAvLyAgICAgZmFsc2VcclxuICAgICAgICAvLyAgIClcclxuICAgICAgICAvLyAgIGNvbnN0IHsgY3JlYXRlVW5zZWVuTWVzc2FnZVRhZ0JveCB9ID0gYXdhaXQgaW1wb3J0KFwiLi9tZXNzYWdlLmRldlwiKVxyXG4gICAgICAgIC8vICAgY3JlYXRlVW5zZWVuTWVzc2FnZVRhZ0JveChcclxuICAgICAgICAvLyAgICAgdG90YWxVbnNlZW5NZXNzYWdlc0NvdW50LFxyXG4gICAgICAgIC8vICAgICBhY3RpdmVDaGF0TWVzc2FnZUNvbnRhaW5lcixcclxuICAgICAgICAvLyAgICAgXCJhZnRlcmJlZ2luXCIsXHJcbiAgICAgICAgLy8gICAgIGZhbHNlXHJcbiAgICAgICAgLy8gICApXHJcbiAgICAgICAgLy8gICBhd2FpdCBjaGVja1RpbWVBbmRDcmVhdGVPbGRNZXNzYWdlKFxyXG4gICAgICAgIC8vICAgICBkYXRhLmFsbE1lc3NhZ2VzLnNsaWNlKHVuc2Vlbk1lc3NhZ2VzTGluZSksXHJcbiAgICAgICAgLy8gICAgIGFjdGl2ZUNoYXRNZXNzYWdlQ29udGFpbmVyLFxyXG4gICAgICAgIC8vICAgICBmYWxzZVxyXG4gICAgICAgIC8vICAgKVxyXG4gICAgICAgIC8vIH0gZWxzZSB7XHJcblxyXG4gICAgICAgIC8vIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsZXQgeyBjcmVhdGVNYWluTm90aWZpY2F0aW9uIH0gPSBhd2FpdCBpbXBvcnQoXHJcbiAgICAgICAgICBcIi4uLy4uL2NvbW1vbi9tYWluTm90aWZpY2F0aW9uLmRldlwiXHJcbiAgICAgICAgKVxyXG4gICAgICAgIGNyZWF0ZU1haW5Ob3RpZmljYXRpb24oZGF0YS5lcnJvciwgXCJlcnJvclwiKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKGFzeW5jIGVyciA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGVycilcclxuICAgICAgbGV0IHsgY3JlYXRlTWFpbk5vdGlmaWNhdGlvbiB9ID0gYXdhaXQgaW1wb3J0KFxyXG4gICAgICAgIFwiLi4vLi4vY29tbW9uL21haW5Ob3RpZmljYXRpb24uZGV2XCJcclxuICAgICAgKVxyXG4gICAgICBjcmVhdGVNYWluTm90aWZpY2F0aW9uKFxyXG4gICAgICAgIFwiU2VydmVyIEVycm9yIEluIEFjY2Vzc2luZyBNZXNzYWdlcywgUGxlYXNlIFJlZnJlc2ggWW91ciBQYWdlXCIsXHJcbiAgICAgICAgXCJlcnJvclwiXHJcbiAgICAgIClcclxuICAgIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbmNyZWFzZVRvdGFsUmVjZWl2ZWRNZXNzYWdlc0NvdW50KCkge1xyXG4gIHRvdGFsVW5zZWVuTWVzc2FnZXNDb3VudCA9IC0xXHJcbiAgdG90YWxSZWNlaXZlZE1lc3NhZ2VzQ291bnQrK1xyXG59XHJcbiJdLCJuYW1lcyI6WyJhbGxDaGF0U2VjdGlvbiIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJhY3RpdmVDaGF0U2VjdGlvbiIsImFjdGl2ZUNoYXRNZXNzYWdlQ29udGFpbmVyIiwidG90YWxSZWNlaXZlZE1lc3NhZ2VzQ291bnQiLCJ0b3RhbFVuc2Vlbk1lc3NhZ2VzQ291bnQiLCJzaG93QWN0aXZlQ2hhdFNlY3Rpb24iLCJjaGF0IiwiYWN0aXZlQ2hhdElucHV0VGV4dENvbnRlbnQiLCJ2YWx1ZSIsImlubmVySFRNTCIsIm9wZW5BY3RpdmVDaGF0SW5wdXRCb3giLCJ1cGRhdGVBY3RpdmVDaGF0U2VjdGlvbiIsIlVTRVJfTUVTU0FHRV9CT1hfT0JTRVJWRVIiLCJ1bmRlZmluZWQiLCJkaXNjb25uZWN0IiwiaW5pdGlhbGl6ZVVzZXJNZXNzYWdlQm94T2JzZXJ2ZXIiLCJUT1BfTUVTU0FHRV9CT1hfT0JTRVJWRVIiLCJpbml0aWFsaXplVG9wTWVzc2FnZUJveE9ic2VydmVyIiwiY2hlY2tUaW1lQW5kQ3JlYXRlT2xkTWVzc2FnZSIsImZldGNoIiwiX2lkIiwidGhlbiIsInJlc3BvbnNlIiwib2siLCJqc29uIiwiUHJvbWlzZSIsInJlamVjdCIsImRhdGEiLCJpc1N1Y2Nlc3MiLCJjb25zb2xlIiwibG9nIiwiYWxsTWVzc2FnZXMiLCJsZW5ndGgiLCJvYnNlcnZlIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJhZGp1c3RNZXNzYWdlQ29udGFpbmVyQm90dG9tUGFkZGluZyIsImNyZWF0ZU1haW5Ob3RpZmljYXRpb24iLCJlcnJvciIsImNhdGNoIiwiZXJyIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwiY2xvc2VSZXBseU1lc3NhZ2VCb3giLCJkYXRhc2V0IiwiY2hhdElkIiwiYWN0aXZlQ2hhdEhlYWRlciIsImFjdGl2ZUNoYXRIZWFkZXJQaWMiLCJhY3RpdmVDaGF0SW1nIiwiYWN0aXZlQ2hhdEhlYWRlck5hbWUiLCJhY3RpdmVDaGF0SGVhZGVyU3RhdHVzIiwiYWN0aXZlQ2hhdElucHV0Q29udGFpbmVyIiwiaGFzT3duUHJvcGVydHkiLCJjaGF0UGljIiwic3JjIiwidGV4dENvbnRlbnQiLCJjaGF0TmFtZSIsImlzR3JvdXBDaGF0IiwiaXNVc2VyQWN0aXZlIiwidGltZURpZmZlcmVuY2VGcm9tTm93IiwidXNlckxhc3RBY3RpdmUiLCJvbk9mZkFjdGl2ZUNoYXRJbnB1dENvbnRhaW5lciIsImNsZWFyQWN0aXZlQ2hhdE1lc3NhZ2VDb250YWluZXIiLCJjYW5TZW5kTWVzc2FnZVRvVGhpc0NoYXQiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImVudHJpZXMiLCJvYnNlcnZlciIsImZvckVhY2giLCJlbnRyeSIsImlzSW50ZXJzZWN0aW5nIiwibWVzc2FnZUlkIiwidGFyZ2V0Iiwic29ja2V0IiwiZW1pdCIsInVub2JzZXJ2ZSIsInRocmVzaG9sZCIsInJvb3QiLCJmZXRjaE1lc3NhZ2VBbmRDcmVhdGVVc2VyTWVzc2FnZUJveCIsInJvb3RNYXJnaW4iLCJzY3JvbGxUb3AiLCJzY3JvbGxIZWlnaHQiLCJpbmNyZWFzZVRvdGFsUmVjZWl2ZWRNZXNzYWdlc0NvdW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./dev-javascripts/chat/js/showActiveChatSection.dev.js\n");

/***/ })

}]);