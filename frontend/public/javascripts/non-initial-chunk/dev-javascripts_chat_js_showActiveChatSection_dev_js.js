"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkfrontend"] = self["webpackChunkfrontend"] || []).push([["dev-javascripts_chat_js_showActiveChatSection_dev_js"],{

/***/ "./dev-javascripts/chat/js/showActiveChatSection.dev.js":
/*!**************************************************************!*\
  !*** ./dev-javascripts/chat/js/showActiveChatSection.dev.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"clearActiveChatMessageContainer\": () => (/* binding */ clearActiveChatMessageContainer),\n/* harmony export */   \"closeActiveChatCallRoomBox\": () => (/* binding */ closeActiveChatCallRoomBox),\n/* harmony export */   \"increaseTotalReceivedMessagesCount\": () => (/* binding */ increaseTotalReceivedMessagesCount),\n/* harmony export */   \"onOffActiveChatInputContainer\": () => (/* binding */ onOffActiveChatInputContainer),\n/* harmony export */   \"openActiveChatCallRoomBox\": () => (/* binding */ openActiveChatCallRoomBox),\n/* harmony export */   \"showActiveChatSection\": () => (/* binding */ showActiveChatSection),\n/* harmony export */   \"updateActiveChatSection\": () => (/* binding */ updateActiveChatSection)\n/* harmony export */ });\nlet allChatSection = document.getElementById(\"allChatSection\");\nlet activeChatSection = document.getElementById(\"activeChatSection\");\nconst activeChatMessageContainer = document.getElementById(\"activeChatMessageContainer\");\nlet totalReceivedMessagesCount;\nlet totalUnseenMessagesCount;\nasync function showActiveChatSection(chat) {\n  let activeChatInputTextContent = document.getElementById(\"activeChatInputTextContent\");\n  activeChatInputTextContent.value = \"\";\n  activeChatMessageContainer.innerHTML = \"\";\n  updateActiveChatSection(chat);\n  totalReceivedMessagesCount = 0;\n  let unseenMessagesCountResponse = await fetch(`/message/data/unseen-messages-count/${chat._id}`);\n  let unseenMessagesCountData = await unseenMessagesCountResponse.json();\n  totalUnseenMessagesCount = unseenMessagesCountData.unseenMessagesCount;\n  console.log(\"totalUnseenMessagesCount: \" + totalUnseenMessagesCount);\n  let {\n    openActiveChatInputBox\n  } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_chat_chat_dev_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../chat.dev.js */ \"./dev-javascripts/chat/chat.dev.js\"));\n  openActiveChatInputBox();\n\n  if (USER_MESSAGE_BOX_OBSERVER !== undefined) {\n    USER_MESSAGE_BOX_OBSERVER.disconnect();\n  }\n\n  initializeUserMessageBoxObserver();\n\n  if (TOP_MESSAGE_BOX_OBSERVER !== undefined) {\n    TOP_MESSAGE_BOX_OBSERVER.disconnect();\n  }\n\n  initializeTopMessageBoxObserver();\n\n  if (BOTTOM_MESSAGE_BOX_OBSERVER !== undefined) {\n    BOTTOM_MESSAGE_BOX_OBSERVER.disconnect();\n  }\n\n  initializeBottomMessageBoxObserver(); ///////////////////\n\n  const {\n    checkTimeAndCreateOldMessages\n  } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_plyr_dist_plyr_min_js\"), __webpack_require__.e(\"dev-javascripts_chat_js_message_dev_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./message.dev */ \"./dev-javascripts/chat/js/message.dev.js\"));\n  fetch(`/message/fetch-messages/${chat._id}?totalReceivedMessagesCount=0`).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    return Promise.reject(response);\n  }).then(async data => {\n    if (data.isSuccess) {\n      activeChatMessageContainer.innerHTML = \"\";\n      console.log(data);\n\n      if (data.allMessages.length > 0) {\n        totalReceivedMessagesCount += data.allMessages.length;\n\n        if (totalUnseenMessagesCount !== 0 && totalUnseenMessagesCount <= totalReceivedMessagesCount) {\n          let {\n            createUnseenMessageTagBox\n          } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_plyr_dist_plyr_min_js\"), __webpack_require__.e(\"dev-javascripts_chat_js_message_dev_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./message.dev */ \"./dev-javascripts/chat/js/message.dev.js\"));\n          let positionForUnseeenMessageTag = data.allMessages.length - (totalReceivedMessagesCount - totalUnseenMessagesCount);\n          checkTimeAndCreateOldMessages(data.allMessages.slice(0, positionForUnseeenMessageTag), activeChatMessageContainer, false, true);\n          createUnseenMessageTagBox(totalUnseenMessagesCount, activeChatMessageContainer, \"afterbegin\");\n          checkTimeAndCreateOldMessages(data.allMessages.slice(positionForUnseeenMessageTag), activeChatMessageContainer, false, true);\n          totalUnseenMessagesCount = 0;\n        } else {\n          checkTimeAndCreateOldMessages(data.allMessages, activeChatMessageContainer, false, true);\n        }\n\n        setTimeout(() => {\n          if (activeChatMessageContainer.firstElementChild) TOP_MESSAGE_BOX_OBSERVER.observe(activeChatMessageContainer.firstElementChild);\n        }, 2500);\n        setTimeout(() => {\n          if (activeChatMessageContainer.lastElementChild) BOTTOM_MESSAGE_BOX_OBSERVER.observe(activeChatMessageContainer.lastElementChild);\n        }, 2000);\n      }\n\n      let {\n        adjustMessageContainerBottomPadding\n      } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_chat_chat_dev_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../chat.dev */ \"./dev-javascripts/chat/chat.dev.js\"));\n      adjustMessageContainerBottomPadding();\n    } else {\n      let {\n        createMainNotification\n      } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_common_mainNotification_dev_js-_81c90\").then(__webpack_require__.bind(__webpack_require__, /*! ../../common/mainNotification.dev */ \"./dev-javascripts/common/mainNotification.dev.js\"));\n      createMainNotification(data.error, \"error\");\n    }\n  }).catch(async err => {\n    console.log(err);\n    let {\n      createMainNotification\n    } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_common_mainNotification_dev_js-_81c90\").then(__webpack_require__.bind(__webpack_require__, /*! ../../common/mainNotification.dev */ \"./dev-javascripts/common/mainNotification.dev.js\"));\n    createMainNotification(\"Server Error In Accessing Messages, Please Refresh Your Page\", \"error\");\n  });\n  allChatSection.classList.add(\"all-chat-section--hide\");\n  activeChatSection.classList.remove(\"active-chat-section--hide\");\n}\n\nfunction initializeUserMessageBoxObserver() {\n  USER_MESSAGE_BOX_OBSERVER = new IntersectionObserver(async (entries, observer) => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting === true) {\n        let messageId = entry.target.dataset.messageId;\n        socket.emit(\"chat:update-message-seen-status\", {\n          messageId: messageId\n        });\n        observer.unobserve(entry.target);\n      }\n    });\n  }, {\n    threshold: 0.5,\n    root: activeChatMessageContainer\n  });\n}\n\nfunction initializeTopMessageBoxObserver() {\n  TOP_MESSAGE_BOX_OBSERVER = new IntersectionObserver(async (entries, observer) => {\n    entries.forEach(async entry => {\n      if (entry.isIntersecting === true) {\n        observer.unobserve(entry.target);\n        let chatId = activeChatSection.dataset.chatId;\n        const {\n          createLoadingMessagesAnimation\n        } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_plyr_dist_plyr_min_js\"), __webpack_require__.e(\"dev-javascripts_chat_js_message_dev_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./message.dev */ \"./dev-javascripts/chat/js/message.dev.js\"));\n        let loadingMessageAnimationBox = createLoadingMessagesAnimation();\n        activeChatMessageContainer.insertAdjacentElement(\"afterbegin\", loadingMessageAnimationBox);\n        activeChatMessageContainer.scrollTop += 150;\n        await fetchMessageAndCreateUserMessageBox(chatId);\n      }\n    });\n  }, {\n    threshold: 0.5,\n    root: activeChatMessageContainer,\n    rootMargin: \"100px\"\n  });\n}\n\nfunction initializeBottomMessageBoxObserver() {\n  BOTTOM_MESSAGE_BOX_OBSERVER = new IntersectionObserver(async (entries, observer) => {\n    entries.forEach(async entry => {\n      if (entry.isIntersecting === true) {\n        observer.unobserve(entry.target);\n        let chatId = activeChatSection.dataset.chatId;\n        socket.emit(\"chat:update-chat-unseen-messages\", {\n          chatId: chatId\n        });\n      }\n    });\n  }, {\n    threshold: 0.5,\n    root: activeChatMessageContainer\n  });\n}\n\nasync function fetchMessageAndCreateUserMessageBox(chatId) {\n  const {\n    checkTimeAndCreateOldMessages\n  } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_plyr_dist_plyr_min_js\"), __webpack_require__.e(\"dev-javascripts_chat_js_message_dev_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./message.dev */ \"./dev-javascripts/chat/js/message.dev.js\"));\n  fetch(`/message/fetch-messages/${chatId}?totalReceivedMessagesCount=${totalReceivedMessagesCount}`).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    return Promise.reject(response);\n  }).then(async data => {\n    if (data.isSuccess) {\n      console.log(data);\n\n      if (data.allMessages.length > 0) {\n        totalReceivedMessagesCount += data.allMessages.length;\n\n        if (totalUnseenMessagesCount !== 0 && totalUnseenMessagesCount <= totalReceivedMessagesCount) {\n          let {\n            createUnseenMessageTagBox\n          } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_plyr_dist_plyr_min_js\"), __webpack_require__.e(\"dev-javascripts_chat_js_message_dev_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./message.dev */ \"./dev-javascripts/chat/js/message.dev.js\"));\n          let positionForUnseeenMessageTag = data.allMessages.length - (totalReceivedMessagesCount - totalUnseenMessagesCount);\n          checkTimeAndCreateOldMessages(data.allMessages.slice(0, positionForUnseeenMessageTag), activeChatMessageContainer, false, false);\n          createUnseenMessageTagBox(totalUnseenMessagesCount, activeChatMessageContainer, \"afterbegin\");\n          checkTimeAndCreateOldMessages(data.allMessages.slice(positionForUnseeenMessageTag), activeChatMessageContainer, false, false);\n          totalUnseenMessagesCount = 0;\n        } else {\n          checkTimeAndCreateOldMessages(data.allMessages, activeChatMessageContainer, false, false);\n        }\n\n        setTimeout(() => {\n          if (activeChatMessageContainer.firstElementChild) TOP_MESSAGE_BOX_OBSERVER.observe(activeChatMessageContainer.firstElementChild);\n        }, 4000);\n      } else {\n        let loadingMessageAnimationBox = [...activeChatMessageContainer.getElementsByClassName(\"loading-message-animation-box\")];\n        loadingMessageAnimationBox.forEach(box => {\n          box.parentNode.removeChild(box);\n        });\n      }\n    } else {\n      let {\n        createMainNotification\n      } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_common_mainNotification_dev_js-_81c90\").then(__webpack_require__.bind(__webpack_require__, /*! ../../common/mainNotification.dev */ \"./dev-javascripts/common/mainNotification.dev.js\"));\n      createMainNotification(data.error, \"error\");\n    }\n  }).catch(async err => {\n    console.log(err);\n    let {\n      createMainNotification\n    } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_common_mainNotification_dev_js-_81c90\").then(__webpack_require__.bind(__webpack_require__, /*! ../../common/mainNotification.dev */ \"./dev-javascripts/common/mainNotification.dev.js\"));\n    createMainNotification(\"Server Error In Accessing Messages, Please Refresh Your Page\", \"error\");\n  });\n} //////////////////////////\n\n\nfunction increaseTotalReceivedMessagesCount() {\n  totalUnseenMessagesCount = 0;\n  totalReceivedMessagesCount++;\n} /////////////////\n\nasync function updateActiveChatSection(chat) {\n  let {\n    closeReplyMessageBox\n  } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_chat_js_replyMessageBox_dev_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./replyMessageBox.dev.js */ \"./dev-javascripts/chat/js/replyMessageBox.dev.js\"));\n  closeReplyMessageBox();\n  activeChatSection.dataset.chatId = chat._id;\n  const activeChatHeader = document.getElementById(\"activeChatHeader\");\n  const activeChatHeaderPic = document.getElementById(\"activeChatHeaderPic\");\n  const activeChatImg = document.getElementById(\"activeChatImg\");\n  const activeChatHeaderName = document.getElementById(\"activeChatHeaderName\");\n  const activeChatHeaderStatus = document.getElementById(\"activeChatHeaderStatus\");\n  const activeChatInputContainer = document.getElementById(\"activeChatInputContainer\");\n  activeChatHeader.dataset.chatId = chat._id;\n\n  if (chat.hasOwnProperty(\"chatPic\") && chat.chatPic !== \"\") {\n    activeChatImg.src = chat.chatPic;\n    activeChatHeaderPic.classList.add(\"active-chat-header__pic--hide-svg\");\n    activeChatHeaderPic.classList.remove(\"active-chat-header__pic--hide-img\");\n  } else {\n    activeChatHeaderPic.classList.add(\"active-chat-header__pic--hide-img\");\n    activeChatHeaderPic.classList.remove(\"active-chat-header__pic--hide-svg\");\n  }\n\n  activeChatHeaderName.textContent = chat.chatName;\n\n  if (!chat.isGroupChat) {\n    if (chat.isUserActive) {\n      activeChatHeaderStatus.classList.remove(\"active-chat-header__chat-status--hide\");\n      activeChatHeaderStatus.textContent = \"Active\";\n    } else {\n      let {\n        timeDifferenceFromNow\n      } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_common_calculateTimeDifference_dev_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../../common/calculateTimeDifference.dev */ \"./dev-javascripts/common/calculateTimeDifference.dev.js\"));\n      activeChatHeaderStatus.classList.remove(\"active-chat-header__chat-status--hide\");\n\n      if (chat.hasOwnProperty(\"userLastActive\")) {\n        activeChatHeaderStatus.textContent = `last active ${timeDifferenceFromNow(chat.userLastActive)} ago`;\n      } else {\n        activeChatHeaderStatus.textContent = \"\";\n      }\n    }\n  } else {\n    activeChatHeaderStatus.classList.remove(\"active-chat-header__chat-status--hide\");\n    activeChatHeaderStatus.textContent = \"\";\n  }\n\n  if (chat.hasOwnProperty(\"isOnCall\") && chat.isOnCall === true) {\n    openActiveChatCallRoomBox(chat.callRoomId);\n  } else {\n    closeActiveChatCallRoomBox();\n  }\n\n  onOffActiveChatInputContainer(chat);\n}\nfunction openActiveChatCallRoomBox(callRoomId) {\n  let activeChatCallBtn = document.getElementById(\"activeChatAudioCallBtn\");\n  let activeChatCallRoomBox = document.getElementById(\"activeChatCallRoomBox\");\n\n  while (activeChatCallRoomBox.classList.contains(\"chat-call-room-box--hide\")) chatCallRoomBox.classList.remove(\"chat-call-room-box--hide\");\n\n  activeChatCallBtn.classList.add(\"active-chat-header__btn---hide\");\n  activeChatCallRoomBox.dataset.callRoomId = callRoomId;\n}\nfunction closeActiveChatCallRoomBox() {\n  let activeChatCallBtn = document.getElementById(\"activeChatAudioCallBtn\");\n  let activeChatCallRoomBox = document.getElementById(\"activeChatCallRoomBox\");\n\n  while (activeChatCallBtn.classList.contains(\"active-chat-header__btn---hide\")) activeChatCallBtn.classList.remove(\"active-chat-header__btn---hide\");\n\n  chatCallRoomBox.classList.add(\"chat-call-room-box--hide\");\n  activeChatCallRoomBox.dataset.callRoomId = \"\";\n}\nasync function clearActiveChatMessageContainer() {\n  let activeChatMessageContainer = document.getElementById(\"activeChatMessageContainer\");\n  activeChatMessageContainer.innerHTML = \"\";\n}\nasync function onOffActiveChatInputContainer(chat) {\n  const activeChatInputContainer = document.getElementById(\"activeChatInputContainer\");\n\n  if (chat.hasOwnProperty(\"canSendMessageToThisChat\") && chat.canSendMessageToThisChat === false) {\n    activeChatInputContainer.classList.add(\"active-chat-input-container--disable\");\n    activeChatInputContainer.classList.remove(\"active-chat-input-container--enable\");\n  } else {\n    activeChatInputContainer.classList.add(\"active-chat-input-container--enable\");\n    activeChatInputContainer.classList.remove(\"active-chat-input-container--disable\");\n  }\n} ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9kZXYtamF2YXNjcmlwdHMvY2hhdC9qcy9zaG93QWN0aXZlQ2hhdFNlY3Rpb24uZGV2LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxjQUFjLEdBQUdDLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixnQkFBeEIsQ0FBckI7QUFDQSxJQUFJQyxpQkFBaUIsR0FBR0YsUUFBUSxDQUFDQyxjQUFULENBQXdCLG1CQUF4QixDQUF4QjtBQUNBLE1BQU1FLDBCQUEwQixHQUFHSCxRQUFRLENBQUNDLGNBQVQsQ0FDakMsNEJBRGlDLENBQW5DO0FBSUEsSUFBSUcsMEJBQUo7QUFDQSxJQUFJQyx3QkFBSjtBQUNPLGVBQWVDLHFCQUFmLENBQXFDQyxJQUFyQyxFQUEyQztFQUNoRCxJQUFJQywwQkFBMEIsR0FBR1IsUUFBUSxDQUFDQyxjQUFULENBQy9CLDRCQUQrQixDQUFqQztFQUdBTywwQkFBMEIsQ0FBQ0MsS0FBM0IsR0FBbUMsRUFBbkM7RUFDQU4sMEJBQTBCLENBQUNPLFNBQTNCLEdBQXVDLEVBQXZDO0VBQ0FDLHVCQUF1QixDQUFDSixJQUFELENBQXZCO0VBRUFILDBCQUEwQixHQUFHLENBQTdCO0VBQ0EsSUFBSVEsMkJBQTJCLEdBQUcsTUFBTUMsS0FBSyxDQUMxQyx1Q0FBc0NOLElBQUksQ0FBQ08sR0FBSSxFQURMLENBQTdDO0VBR0EsSUFBSUMsdUJBQXVCLEdBQUcsTUFBTUgsMkJBQTJCLENBQUNJLElBQTVCLEVBQXBDO0VBQ0FYLHdCQUF3QixHQUFHVSx1QkFBdUIsQ0FBQ0UsbUJBQW5EO0VBQ0FDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLCtCQUErQmQsd0JBQTNDO0VBQ0EsSUFBSTtJQUFFZTtFQUFGLElBQTZCLE1BQU0seUxBQXZDO0VBQ0FBLHNCQUFzQjs7RUFFdEIsSUFBSUMseUJBQXlCLEtBQUtDLFNBQWxDLEVBQTZDO0lBQzNDRCx5QkFBeUIsQ0FBQ0UsVUFBMUI7RUFDRDs7RUFDREMsZ0NBQWdDOztFQUNoQyxJQUFJQyx3QkFBd0IsS0FBS0gsU0FBakMsRUFBNEM7SUFDMUNHLHdCQUF3QixDQUFDRixVQUF6QjtFQUNEOztFQUNERywrQkFBK0I7O0VBQy9CLElBQUlDLDJCQUEyQixLQUFLTCxTQUFwQyxFQUErQztJQUM3Q0ssMkJBQTJCLENBQUNKLFVBQTVCO0VBQ0Q7O0VBQ0RLLGtDQUFrQyxHQTdCYyxDQStCaEQ7O0VBQ0EsTUFBTTtJQUFFQztFQUFGLElBQW9DLE1BQU0sdVJBQWhEO0VBRUFoQixLQUFLLENBQUUsMkJBQTBCTixJQUFJLENBQUNPLEdBQUksK0JBQXJDLENBQUwsQ0FDR2dCLElBREgsQ0FDUUMsUUFBUSxJQUFJO0lBQ2hCLElBQUlBLFFBQVEsQ0FBQ0MsRUFBYixFQUFpQjtNQUNmLE9BQU9ELFFBQVEsQ0FBQ2YsSUFBVCxFQUFQO0lBQ0Q7O0lBQ0QsT0FBT2lCLE9BQU8sQ0FBQ0MsTUFBUixDQUFlSCxRQUFmLENBQVA7RUFDRCxDQU5ILEVBT0dELElBUEgsQ0FPUSxNQUFNSyxJQUFOLElBQWM7SUFDbEIsSUFBSUEsSUFBSSxDQUFDQyxTQUFULEVBQW9CO01BQ2xCakMsMEJBQTBCLENBQUNPLFNBQTNCLEdBQXVDLEVBQXZDO01BQ0FRLE9BQU8sQ0FBQ0MsR0FBUixDQUFZZ0IsSUFBWjs7TUFFQSxJQUFJQSxJQUFJLENBQUNFLFdBQUwsQ0FBaUJDLE1BQWpCLEdBQTBCLENBQTlCLEVBQWlDO1FBQy9CbEMsMEJBQTBCLElBQUkrQixJQUFJLENBQUNFLFdBQUwsQ0FBaUJDLE1BQS9DOztRQUNBLElBQ0VqQyx3QkFBd0IsS0FBSyxDQUE3QixJQUNBQSx3QkFBd0IsSUFBSUQsMEJBRjlCLEVBR0U7VUFDQSxJQUFJO1lBQUVtQztVQUFGLElBQWdDLE1BQU0sdVJBQTFDO1VBRUEsSUFBSUMsNEJBQTRCLEdBQzlCTCxJQUFJLENBQUNFLFdBQUwsQ0FBaUJDLE1BQWpCLElBQ0NsQywwQkFBMEIsR0FBR0Msd0JBRDlCLENBREY7VUFHQXdCLDZCQUE2QixDQUMzQk0sSUFBSSxDQUFDRSxXQUFMLENBQWlCSSxLQUFqQixDQUF1QixDQUF2QixFQUEwQkQsNEJBQTFCLENBRDJCLEVBRTNCckMsMEJBRjJCLEVBRzNCLEtBSDJCLEVBSTNCLElBSjJCLENBQTdCO1VBTUFvQyx5QkFBeUIsQ0FDdkJsQyx3QkFEdUIsRUFFdkJGLDBCQUZ1QixFQUd2QixZQUh1QixDQUF6QjtVQUtBMEIsNkJBQTZCLENBQzNCTSxJQUFJLENBQUNFLFdBQUwsQ0FBaUJJLEtBQWpCLENBQXVCRCw0QkFBdkIsQ0FEMkIsRUFFM0JyQywwQkFGMkIsRUFHM0IsS0FIMkIsRUFJM0IsSUFKMkIsQ0FBN0I7VUFNQUUsd0JBQXdCLEdBQUcsQ0FBM0I7UUFDRCxDQTNCRCxNQTJCTztVQUNMd0IsNkJBQTZCLENBQzNCTSxJQUFJLENBQUNFLFdBRHNCLEVBRTNCbEMsMEJBRjJCLEVBRzNCLEtBSDJCLEVBSTNCLElBSjJCLENBQTdCO1FBTUQ7O1FBRUR1QyxVQUFVLENBQUMsTUFBTTtVQUNmLElBQUl2QywwQkFBMEIsQ0FBQ3dDLGlCQUEvQixFQUNFbEIsd0JBQXdCLENBQUNtQixPQUF6QixDQUNFekMsMEJBQTBCLENBQUN3QyxpQkFEN0I7UUFHSCxDQUxTLEVBS1AsSUFMTyxDQUFWO1FBTUFELFVBQVUsQ0FBQyxNQUFNO1VBQ2YsSUFBSXZDLDBCQUEwQixDQUFDMEMsZ0JBQS9CLEVBQ0VsQiwyQkFBMkIsQ0FBQ2lCLE9BQTVCLENBQ0V6QywwQkFBMEIsQ0FBQzBDLGdCQUQ3QjtRQUdILENBTFMsRUFLUCxJQUxPLENBQVY7TUFNRDs7TUFFRCxJQUFJO1FBQUVDO01BQUYsSUFBMEMsTUFBTSxzTEFBcEQ7TUFHQUEsbUNBQW1DO0lBQ3BDLENBNURELE1BNERPO01BQ0wsSUFBSTtRQUFFQztNQUFGLElBQTZCLE1BQU0sK09BQXZDO01BR0FBLHNCQUFzQixDQUFDWixJQUFJLENBQUNhLEtBQU4sRUFBYSxPQUFiLENBQXRCO0lBQ0Q7RUFDRixDQTFFSCxFQTJFR0MsS0EzRUgsQ0EyRVMsTUFBTUMsR0FBTixJQUFhO0lBQ2xCaEMsT0FBTyxDQUFDQyxHQUFSLENBQVkrQixHQUFaO0lBQ0EsSUFBSTtNQUFFSDtJQUFGLElBQTZCLE1BQU0sK09BQXZDO0lBR0FBLHNCQUFzQixDQUNwQiw4REFEb0IsRUFFcEIsT0FGb0IsQ0FBdEI7RUFJRCxDQXBGSDtFQXNGQWhELGNBQWMsQ0FBQ29ELFNBQWYsQ0FBeUJDLEdBQXpCLENBQTZCLHdCQUE3QjtFQUNBbEQsaUJBQWlCLENBQUNpRCxTQUFsQixDQUE0QkUsTUFBNUIsQ0FBbUMsMkJBQW5DO0FBQ0Q7O0FBRUQsU0FBUzdCLGdDQUFULEdBQTRDO0VBQzFDSCx5QkFBeUIsR0FBRyxJQUFJaUMsb0JBQUosQ0FDMUIsT0FBT0MsT0FBUCxFQUFnQkMsUUFBaEIsS0FBNkI7SUFDM0JELE9BQU8sQ0FBQ0UsT0FBUixDQUFnQkMsS0FBSyxJQUFJO01BQ3ZCLElBQUlBLEtBQUssQ0FBQ0MsY0FBTixLQUF5QixJQUE3QixFQUFtQztRQUNqQyxJQUFJQyxTQUFTLEdBQUdGLEtBQUssQ0FBQ0csTUFBTixDQUFhQyxPQUFiLENBQXFCRixTQUFyQztRQUNBRyxNQUFNLENBQUNDLElBQVAsQ0FBWSxpQ0FBWixFQUErQztVQUM3Q0osU0FBUyxFQUFFQTtRQURrQyxDQUEvQztRQUdBSixRQUFRLENBQUNTLFNBQVQsQ0FBbUJQLEtBQUssQ0FBQ0csTUFBekI7TUFDRDtJQUNGLENBUkQ7RUFTRCxDQVh5QixFQVkxQjtJQUFFSyxTQUFTLEVBQUUsR0FBYjtJQUFrQkMsSUFBSSxFQUFFaEU7RUFBeEIsQ0FaMEIsQ0FBNUI7QUFjRDs7QUFDRCxTQUFTdUIsK0JBQVQsR0FBMkM7RUFDekNELHdCQUF3QixHQUFHLElBQUk2QixvQkFBSixDQUN6QixPQUFPQyxPQUFQLEVBQWdCQyxRQUFoQixLQUE2QjtJQUMzQkQsT0FBTyxDQUFDRSxPQUFSLENBQWdCLE1BQU1DLEtBQU4sSUFBZTtNQUM3QixJQUFJQSxLQUFLLENBQUNDLGNBQU4sS0FBeUIsSUFBN0IsRUFBbUM7UUFDakNILFFBQVEsQ0FBQ1MsU0FBVCxDQUFtQlAsS0FBSyxDQUFDRyxNQUF6QjtRQUNBLElBQUlPLE1BQU0sR0FBR2xFLGlCQUFpQixDQUFDNEQsT0FBbEIsQ0FBMEJNLE1BQXZDO1FBRUEsTUFBTTtVQUFFQztRQUFGLElBQXFDLE1BQU0sdVJBQWpEO1FBR0EsSUFBSUMsMEJBQTBCLEdBQUdELDhCQUE4QixFQUEvRDtRQUNBbEUsMEJBQTBCLENBQUNvRSxxQkFBM0IsQ0FDRSxZQURGLEVBRUVELDBCQUZGO1FBSUFuRSwwQkFBMEIsQ0FBQ3FFLFNBQTNCLElBQXdDLEdBQXhDO1FBQ0EsTUFBTUMsbUNBQW1DLENBQUNMLE1BQUQsQ0FBekM7TUFDRDtJQUNGLENBaEJEO0VBaUJELENBbkJ3QixFQW9CekI7SUFBRUYsU0FBUyxFQUFFLEdBQWI7SUFBa0JDLElBQUksRUFBRWhFLDBCQUF4QjtJQUFvRHVFLFVBQVUsRUFBRTtFQUFoRSxDQXBCeUIsQ0FBM0I7QUFzQkQ7O0FBQ0QsU0FBUzlDLGtDQUFULEdBQThDO0VBQzVDRCwyQkFBMkIsR0FBRyxJQUFJMkIsb0JBQUosQ0FDNUIsT0FBT0MsT0FBUCxFQUFnQkMsUUFBaEIsS0FBNkI7SUFDM0JELE9BQU8sQ0FBQ0UsT0FBUixDQUFnQixNQUFNQyxLQUFOLElBQWU7TUFDN0IsSUFBSUEsS0FBSyxDQUFDQyxjQUFOLEtBQXlCLElBQTdCLEVBQW1DO1FBQ2pDSCxRQUFRLENBQUNTLFNBQVQsQ0FBbUJQLEtBQUssQ0FBQ0csTUFBekI7UUFDQSxJQUFJTyxNQUFNLEdBQUdsRSxpQkFBaUIsQ0FBQzRELE9BQWxCLENBQTBCTSxNQUF2QztRQUNBTCxNQUFNLENBQUNDLElBQVAsQ0FBWSxrQ0FBWixFQUFnRDtVQUM5Q0ksTUFBTSxFQUFFQTtRQURzQyxDQUFoRDtNQUdEO0lBQ0YsQ0FSRDtFQVNELENBWDJCLEVBWTVCO0lBQUVGLFNBQVMsRUFBRSxHQUFiO0lBQWtCQyxJQUFJLEVBQUVoRTtFQUF4QixDQVo0QixDQUE5QjtBQWNEOztBQUVELGVBQWVzRSxtQ0FBZixDQUFtREwsTUFBbkQsRUFBMkQ7RUFDekQsTUFBTTtJQUFFdkM7RUFBRixJQUFvQyxNQUFNLHVSQUFoRDtFQUVBaEIsS0FBSyxDQUNGLDJCQUEwQnVELE1BQU8sK0JBQThCaEUsMEJBQTJCLEVBRHhGLENBQUwsQ0FHRzBCLElBSEgsQ0FHUUMsUUFBUSxJQUFJO0lBQ2hCLElBQUlBLFFBQVEsQ0FBQ0MsRUFBYixFQUFpQjtNQUNmLE9BQU9ELFFBQVEsQ0FBQ2YsSUFBVCxFQUFQO0lBQ0Q7O0lBQ0QsT0FBT2lCLE9BQU8sQ0FBQ0MsTUFBUixDQUFlSCxRQUFmLENBQVA7RUFDRCxDQVJILEVBU0dELElBVEgsQ0FTUSxNQUFNSyxJQUFOLElBQWM7SUFDbEIsSUFBSUEsSUFBSSxDQUFDQyxTQUFULEVBQW9CO01BQ2xCbEIsT0FBTyxDQUFDQyxHQUFSLENBQVlnQixJQUFaOztNQUVBLElBQUlBLElBQUksQ0FBQ0UsV0FBTCxDQUFpQkMsTUFBakIsR0FBMEIsQ0FBOUIsRUFBaUM7UUFDL0JsQywwQkFBMEIsSUFBSStCLElBQUksQ0FBQ0UsV0FBTCxDQUFpQkMsTUFBL0M7O1FBQ0EsSUFDRWpDLHdCQUF3QixLQUFLLENBQTdCLElBQ0FBLHdCQUF3QixJQUFJRCwwQkFGOUIsRUFHRTtVQUNBLElBQUk7WUFBRW1DO1VBQUYsSUFBZ0MsTUFBTSx1UkFBMUM7VUFFQSxJQUFJQyw0QkFBNEIsR0FDOUJMLElBQUksQ0FBQ0UsV0FBTCxDQUFpQkMsTUFBakIsSUFDQ2xDLDBCQUEwQixHQUFHQyx3QkFEOUIsQ0FERjtVQUdBd0IsNkJBQTZCLENBQzNCTSxJQUFJLENBQUNFLFdBQUwsQ0FBaUJJLEtBQWpCLENBQXVCLENBQXZCLEVBQTBCRCw0QkFBMUIsQ0FEMkIsRUFFM0JyQywwQkFGMkIsRUFHM0IsS0FIMkIsRUFJM0IsS0FKMkIsQ0FBN0I7VUFNQW9DLHlCQUF5QixDQUN2QmxDLHdCQUR1QixFQUV2QkYsMEJBRnVCLEVBR3ZCLFlBSHVCLENBQXpCO1VBS0EwQiw2QkFBNkIsQ0FDM0JNLElBQUksQ0FBQ0UsV0FBTCxDQUFpQkksS0FBakIsQ0FBdUJELDRCQUF2QixDQUQyQixFQUUzQnJDLDBCQUYyQixFQUczQixLQUgyQixFQUkzQixLQUoyQixDQUE3QjtVQU1BRSx3QkFBd0IsR0FBRyxDQUEzQjtRQUNELENBM0JELE1BMkJPO1VBQ0x3Qiw2QkFBNkIsQ0FDM0JNLElBQUksQ0FBQ0UsV0FEc0IsRUFFM0JsQywwQkFGMkIsRUFHM0IsS0FIMkIsRUFJM0IsS0FKMkIsQ0FBN0I7UUFNRDs7UUFFRHVDLFVBQVUsQ0FBQyxNQUFNO1VBQ2YsSUFBSXZDLDBCQUEwQixDQUFDd0MsaUJBQS9CLEVBQ0VsQix3QkFBd0IsQ0FBQ21CLE9BQXpCLENBQ0V6QywwQkFBMEIsQ0FBQ3dDLGlCQUQ3QjtRQUdILENBTFMsRUFLUCxJQUxPLENBQVY7TUFNRCxDQTVDRCxNQTRDTztRQUNMLElBQUkyQiwwQkFBMEIsR0FBRyxDQUMvQixHQUFHbkUsMEJBQTBCLENBQUN3RSxzQkFBM0IsQ0FDRCwrQkFEQyxDQUQ0QixDQUFqQztRQUtBTCwwQkFBMEIsQ0FBQ2IsT0FBM0IsQ0FBbUNtQixHQUFHLElBQUk7VUFDeENBLEdBQUcsQ0FBQ0MsVUFBSixDQUFlQyxXQUFmLENBQTJCRixHQUEzQjtRQUNELENBRkQ7TUFHRDtJQUNGLENBekRELE1BeURPO01BQ0wsSUFBSTtRQUFFN0I7TUFBRixJQUE2QixNQUFNLCtPQUF2QztNQUdBQSxzQkFBc0IsQ0FBQ1osSUFBSSxDQUFDYSxLQUFOLEVBQWEsT0FBYixDQUF0QjtJQUNEO0VBQ0YsQ0F6RUgsRUEwRUdDLEtBMUVILENBMEVTLE1BQU1DLEdBQU4sSUFBYTtJQUNsQmhDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZK0IsR0FBWjtJQUNBLElBQUk7TUFBRUg7SUFBRixJQUE2QixNQUFNLCtPQUF2QztJQUdBQSxzQkFBc0IsQ0FDcEIsOERBRG9CLEVBRXBCLE9BRm9CLENBQXRCO0VBSUQsQ0FuRkg7QUFvRkQsRUFFRDs7O0FBRU8sU0FBU2dDLGtDQUFULEdBQThDO0VBQ25EMUUsd0JBQXdCLEdBQUcsQ0FBM0I7RUFDQUQsMEJBQTBCO0FBQzNCLEVBRUQ7O0FBQ08sZUFBZU8sdUJBQWYsQ0FBdUNKLElBQXZDLEVBQTZDO0VBQ2xELElBQUk7SUFBRXlFO0VBQUYsSUFBMkIsTUFBTSwrTkFBckM7RUFDQUEsb0JBQW9CO0VBQ3BCOUUsaUJBQWlCLENBQUM0RCxPQUFsQixDQUEwQk0sTUFBMUIsR0FBbUM3RCxJQUFJLENBQUNPLEdBQXhDO0VBQ0EsTUFBTW1FLGdCQUFnQixHQUFHakYsUUFBUSxDQUFDQyxjQUFULENBQXdCLGtCQUF4QixDQUF6QjtFQUNBLE1BQU1pRixtQkFBbUIsR0FBR2xGLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixxQkFBeEIsQ0FBNUI7RUFDQSxNQUFNa0YsYUFBYSxHQUFHbkYsUUFBUSxDQUFDQyxjQUFULENBQXdCLGVBQXhCLENBQXRCO0VBQ0EsTUFBTW1GLG9CQUFvQixHQUFHcEYsUUFBUSxDQUFDQyxjQUFULENBQXdCLHNCQUF4QixDQUE3QjtFQUNBLE1BQU1vRixzQkFBc0IsR0FBR3JGLFFBQVEsQ0FBQ0MsY0FBVCxDQUM3Qix3QkFENkIsQ0FBL0I7RUFHQSxNQUFNcUYsd0JBQXdCLEdBQUd0RixRQUFRLENBQUNDLGNBQVQsQ0FDL0IsMEJBRCtCLENBQWpDO0VBSUFnRixnQkFBZ0IsQ0FBQ25CLE9BQWpCLENBQXlCTSxNQUF6QixHQUFrQzdELElBQUksQ0FBQ08sR0FBdkM7O0VBRUEsSUFBSVAsSUFBSSxDQUFDZ0YsY0FBTCxDQUFvQixTQUFwQixLQUFrQ2hGLElBQUksQ0FBQ2lGLE9BQUwsS0FBaUIsRUFBdkQsRUFBMkQ7SUFDekRMLGFBQWEsQ0FBQ00sR0FBZCxHQUFvQmxGLElBQUksQ0FBQ2lGLE9BQXpCO0lBRUFOLG1CQUFtQixDQUFDL0IsU0FBcEIsQ0FBOEJDLEdBQTlCLENBQWtDLG1DQUFsQztJQUNBOEIsbUJBQW1CLENBQUMvQixTQUFwQixDQUE4QkUsTUFBOUIsQ0FBcUMsbUNBQXJDO0VBQ0QsQ0FMRCxNQUtPO0lBQ0w2QixtQkFBbUIsQ0FBQy9CLFNBQXBCLENBQThCQyxHQUE5QixDQUFrQyxtQ0FBbEM7SUFDQThCLG1CQUFtQixDQUFDL0IsU0FBcEIsQ0FBOEJFLE1BQTlCLENBQXFDLG1DQUFyQztFQUNEOztFQUVEK0Isb0JBQW9CLENBQUNNLFdBQXJCLEdBQW1DbkYsSUFBSSxDQUFDb0YsUUFBeEM7O0VBQ0EsSUFBSSxDQUFDcEYsSUFBSSxDQUFDcUYsV0FBVixFQUF1QjtJQUNyQixJQUFJckYsSUFBSSxDQUFDc0YsWUFBVCxFQUF1QjtNQUNyQlIsc0JBQXNCLENBQUNsQyxTQUF2QixDQUFpQ0UsTUFBakMsQ0FDRSx1Q0FERjtNQUdBZ0Msc0JBQXNCLENBQUNLLFdBQXZCLEdBQXFDLFFBQXJDO0lBQ0QsQ0FMRCxNQUtPO01BQ0wsSUFBSTtRQUFFSTtNQUFGLElBQTRCLE1BQU0sNlBBQXRDO01BR0FULHNCQUFzQixDQUFDbEMsU0FBdkIsQ0FBaUNFLE1BQWpDLENBQ0UsdUNBREY7O01BR0EsSUFBSTlDLElBQUksQ0FBQ2dGLGNBQUwsQ0FBb0IsZ0JBQXBCLENBQUosRUFBMkM7UUFDekNGLHNCQUFzQixDQUFDSyxXQUF2QixHQUFzQyxlQUFjSSxxQkFBcUIsQ0FDdkV2RixJQUFJLENBQUN3RixjQURrRSxDQUV2RSxNQUZGO01BR0QsQ0FKRCxNQUlPO1FBQ0xWLHNCQUFzQixDQUFDSyxXQUF2QixHQUFxQyxFQUFyQztNQUNEO0lBQ0Y7RUFDRixDQXJCRCxNQXFCTztJQUNMTCxzQkFBc0IsQ0FBQ2xDLFNBQXZCLENBQWlDRSxNQUFqQyxDQUNFLHVDQURGO0lBR0FnQyxzQkFBc0IsQ0FBQ0ssV0FBdkIsR0FBcUMsRUFBckM7RUFDRDs7RUFFRCxJQUFJbkYsSUFBSSxDQUFDZ0YsY0FBTCxDQUFvQixVQUFwQixLQUFtQ2hGLElBQUksQ0FBQ3lGLFFBQUwsS0FBa0IsSUFBekQsRUFBK0Q7SUFDN0RDLHlCQUF5QixDQUFDMUYsSUFBSSxDQUFDMkYsVUFBTixDQUF6QjtFQUNELENBRkQsTUFFTztJQUNMQywwQkFBMEI7RUFDM0I7O0VBRURDLDZCQUE2QixDQUFDN0YsSUFBRCxDQUE3QjtBQUNEO0FBRU0sU0FBUzBGLHlCQUFULENBQW1DQyxVQUFuQyxFQUErQztFQUNwRCxJQUFJRyxpQkFBaUIsR0FBR3JHLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3Qix3QkFBeEIsQ0FBeEI7RUFDQSxJQUFJcUcscUJBQXFCLEdBQUd0RyxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsdUJBQXhCLENBQTVCOztFQUVBLE9BQU9xRyxxQkFBcUIsQ0FBQ25ELFNBQXRCLENBQWdDb0QsUUFBaEMsQ0FBeUMsMEJBQXpDLENBQVAsRUFDRUMsZUFBZSxDQUFDckQsU0FBaEIsQ0FBMEJFLE1BQTFCLENBQWlDLDBCQUFqQzs7RUFDRmdELGlCQUFpQixDQUFDbEQsU0FBbEIsQ0FBNEJDLEdBQTVCLENBQWdDLGdDQUFoQztFQUVBa0QscUJBQXFCLENBQUN4QyxPQUF0QixDQUE4Qm9DLFVBQTlCLEdBQTJDQSxVQUEzQztBQUNEO0FBRU0sU0FBU0MsMEJBQVQsR0FBc0M7RUFDM0MsSUFBSUUsaUJBQWlCLEdBQUdyRyxRQUFRLENBQUNDLGNBQVQsQ0FBd0Isd0JBQXhCLENBQXhCO0VBQ0EsSUFBSXFHLHFCQUFxQixHQUFHdEcsUUFBUSxDQUFDQyxjQUFULENBQXdCLHVCQUF4QixDQUE1Qjs7RUFFQSxPQUFPb0csaUJBQWlCLENBQUNsRCxTQUFsQixDQUE0Qm9ELFFBQTVCLENBQXFDLGdDQUFyQyxDQUFQLEVBQ0VGLGlCQUFpQixDQUFDbEQsU0FBbEIsQ0FBNEJFLE1BQTVCLENBQW1DLGdDQUFuQzs7RUFDRm1ELGVBQWUsQ0FBQ3JELFNBQWhCLENBQTBCQyxHQUExQixDQUE4QiwwQkFBOUI7RUFFQWtELHFCQUFxQixDQUFDeEMsT0FBdEIsQ0FBOEJvQyxVQUE5QixHQUEyQyxFQUEzQztBQUNEO0FBRU0sZUFBZU8sK0JBQWYsR0FBaUQ7RUFDdEQsSUFBSXRHLDBCQUEwQixHQUFHSCxRQUFRLENBQUNDLGNBQVQsQ0FDL0IsNEJBRCtCLENBQWpDO0VBR0FFLDBCQUEwQixDQUFDTyxTQUEzQixHQUF1QyxFQUF2QztBQUNEO0FBRU0sZUFBZTBGLDZCQUFmLENBQTZDN0YsSUFBN0MsRUFBbUQ7RUFDeEQsTUFBTStFLHdCQUF3QixHQUFHdEYsUUFBUSxDQUFDQyxjQUFULENBQy9CLDBCQUQrQixDQUFqQzs7RUFHQSxJQUNFTSxJQUFJLENBQUNnRixjQUFMLENBQW9CLDBCQUFwQixLQUNBaEYsSUFBSSxDQUFDbUcsd0JBQUwsS0FBa0MsS0FGcEMsRUFHRTtJQUNBcEIsd0JBQXdCLENBQUNuQyxTQUF6QixDQUFtQ0MsR0FBbkMsQ0FDRSxzQ0FERjtJQUdBa0Msd0JBQXdCLENBQUNuQyxTQUF6QixDQUFtQ0UsTUFBbkMsQ0FDRSxxQ0FERjtFQUdELENBVkQsTUFVTztJQUNMaUMsd0JBQXdCLENBQUNuQyxTQUF6QixDQUFtQ0MsR0FBbkMsQ0FDRSxxQ0FERjtJQUdBa0Msd0JBQXdCLENBQUNuQyxTQUF6QixDQUFtQ0UsTUFBbkMsQ0FDRSxzQ0FERjtFQUdEO0FBQ0YsRUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vZGV2LWphdmFzY3JpcHRzL2NoYXQvanMvc2hvd0FjdGl2ZUNoYXRTZWN0aW9uLmRldi5qcz9iYjcxIl0sInNvdXJjZXNDb250ZW50IjpbImxldCBhbGxDaGF0U2VjdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWxsQ2hhdFNlY3Rpb25cIilcclxubGV0IGFjdGl2ZUNoYXRTZWN0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhY3RpdmVDaGF0U2VjdGlvblwiKVxyXG5jb25zdCBhY3RpdmVDaGF0TWVzc2FnZUNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gIFwiYWN0aXZlQ2hhdE1lc3NhZ2VDb250YWluZXJcIlxyXG4pXHJcblxyXG5sZXQgdG90YWxSZWNlaXZlZE1lc3NhZ2VzQ291bnRcclxubGV0IHRvdGFsVW5zZWVuTWVzc2FnZXNDb3VudFxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2hvd0FjdGl2ZUNoYXRTZWN0aW9uKGNoYXQpIHtcclxuICBsZXQgYWN0aXZlQ2hhdElucHV0VGV4dENvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcclxuICAgIFwiYWN0aXZlQ2hhdElucHV0VGV4dENvbnRlbnRcIlxyXG4gIClcclxuICBhY3RpdmVDaGF0SW5wdXRUZXh0Q29udGVudC52YWx1ZSA9IFwiXCJcclxuICBhY3RpdmVDaGF0TWVzc2FnZUNvbnRhaW5lci5pbm5lckhUTUwgPSBcIlwiXHJcbiAgdXBkYXRlQWN0aXZlQ2hhdFNlY3Rpb24oY2hhdClcclxuXHJcbiAgdG90YWxSZWNlaXZlZE1lc3NhZ2VzQ291bnQgPSAwXHJcbiAgbGV0IHVuc2Vlbk1lc3NhZ2VzQ291bnRSZXNwb25zZSA9IGF3YWl0IGZldGNoKFxyXG4gICAgYC9tZXNzYWdlL2RhdGEvdW5zZWVuLW1lc3NhZ2VzLWNvdW50LyR7Y2hhdC5faWR9YFxyXG4gIClcclxuICBsZXQgdW5zZWVuTWVzc2FnZXNDb3VudERhdGEgPSBhd2FpdCB1bnNlZW5NZXNzYWdlc0NvdW50UmVzcG9uc2UuanNvbigpXHJcbiAgdG90YWxVbnNlZW5NZXNzYWdlc0NvdW50ID0gdW5zZWVuTWVzc2FnZXNDb3VudERhdGEudW5zZWVuTWVzc2FnZXNDb3VudFxyXG4gIGNvbnNvbGUubG9nKFwidG90YWxVbnNlZW5NZXNzYWdlc0NvdW50OiBcIiArIHRvdGFsVW5zZWVuTWVzc2FnZXNDb3VudClcclxuICBsZXQgeyBvcGVuQWN0aXZlQ2hhdElucHV0Qm94IH0gPSBhd2FpdCBpbXBvcnQoXCIuLi9jaGF0LmRldi5qc1wiKVxyXG4gIG9wZW5BY3RpdmVDaGF0SW5wdXRCb3goKVxyXG5cclxuICBpZiAoVVNFUl9NRVNTQUdFX0JPWF9PQlNFUlZFUiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICBVU0VSX01FU1NBR0VfQk9YX09CU0VSVkVSLmRpc2Nvbm5lY3QoKVxyXG4gIH1cclxuICBpbml0aWFsaXplVXNlck1lc3NhZ2VCb3hPYnNlcnZlcigpXHJcbiAgaWYgKFRPUF9NRVNTQUdFX0JPWF9PQlNFUlZFUiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICBUT1BfTUVTU0FHRV9CT1hfT0JTRVJWRVIuZGlzY29ubmVjdCgpXHJcbiAgfVxyXG4gIGluaXRpYWxpemVUb3BNZXNzYWdlQm94T2JzZXJ2ZXIoKVxyXG4gIGlmIChCT1RUT01fTUVTU0FHRV9CT1hfT0JTRVJWRVIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgQk9UVE9NX01FU1NBR0VfQk9YX09CU0VSVkVSLmRpc2Nvbm5lY3QoKVxyXG4gIH1cclxuICBpbml0aWFsaXplQm90dG9tTWVzc2FnZUJveE9ic2VydmVyKClcclxuXHJcbiAgLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gIGNvbnN0IHsgY2hlY2tUaW1lQW5kQ3JlYXRlT2xkTWVzc2FnZXMgfSA9IGF3YWl0IGltcG9ydChcIi4vbWVzc2FnZS5kZXZcIilcclxuXHJcbiAgZmV0Y2goYC9tZXNzYWdlL2ZldGNoLW1lc3NhZ2VzLyR7Y2hhdC5faWR9P3RvdGFsUmVjZWl2ZWRNZXNzYWdlc0NvdW50PTBgKVxyXG4gICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICBpZiAocmVzcG9uc2Uub2spIHtcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpXHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlc3BvbnNlKVxyXG4gICAgfSlcclxuICAgIC50aGVuKGFzeW5jIGRhdGEgPT4ge1xyXG4gICAgICBpZiAoZGF0YS5pc1N1Y2Nlc3MpIHtcclxuICAgICAgICBhY3RpdmVDaGF0TWVzc2FnZUNvbnRhaW5lci5pbm5lckhUTUwgPSBcIlwiXHJcbiAgICAgICAgY29uc29sZS5sb2coZGF0YSlcclxuXHJcbiAgICAgICAgaWYgKGRhdGEuYWxsTWVzc2FnZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgdG90YWxSZWNlaXZlZE1lc3NhZ2VzQ291bnQgKz0gZGF0YS5hbGxNZXNzYWdlcy5sZW5ndGhcclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgdG90YWxVbnNlZW5NZXNzYWdlc0NvdW50ICE9PSAwICYmXHJcbiAgICAgICAgICAgIHRvdGFsVW5zZWVuTWVzc2FnZXNDb3VudCA8PSB0b3RhbFJlY2VpdmVkTWVzc2FnZXNDb3VudFxyXG4gICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGxldCB7IGNyZWF0ZVVuc2Vlbk1lc3NhZ2VUYWdCb3ggfSA9IGF3YWl0IGltcG9ydChcIi4vbWVzc2FnZS5kZXZcIilcclxuXHJcbiAgICAgICAgICAgIGxldCBwb3NpdGlvbkZvclVuc2VlZW5NZXNzYWdlVGFnID1cclxuICAgICAgICAgICAgICBkYXRhLmFsbE1lc3NhZ2VzLmxlbmd0aCAtXHJcbiAgICAgICAgICAgICAgKHRvdGFsUmVjZWl2ZWRNZXNzYWdlc0NvdW50IC0gdG90YWxVbnNlZW5NZXNzYWdlc0NvdW50KVxyXG4gICAgICAgICAgICBjaGVja1RpbWVBbmRDcmVhdGVPbGRNZXNzYWdlcyhcclxuICAgICAgICAgICAgICBkYXRhLmFsbE1lc3NhZ2VzLnNsaWNlKDAsIHBvc2l0aW9uRm9yVW5zZWVlbk1lc3NhZ2VUYWcpLFxyXG4gICAgICAgICAgICAgIGFjdGl2ZUNoYXRNZXNzYWdlQ29udGFpbmVyLFxyXG4gICAgICAgICAgICAgIGZhbHNlLFxyXG4gICAgICAgICAgICAgIHRydWVcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICBjcmVhdGVVbnNlZW5NZXNzYWdlVGFnQm94KFxyXG4gICAgICAgICAgICAgIHRvdGFsVW5zZWVuTWVzc2FnZXNDb3VudCxcclxuICAgICAgICAgICAgICBhY3RpdmVDaGF0TWVzc2FnZUNvbnRhaW5lcixcclxuICAgICAgICAgICAgICBcImFmdGVyYmVnaW5cIlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIGNoZWNrVGltZUFuZENyZWF0ZU9sZE1lc3NhZ2VzKFxyXG4gICAgICAgICAgICAgIGRhdGEuYWxsTWVzc2FnZXMuc2xpY2UocG9zaXRpb25Gb3JVbnNlZWVuTWVzc2FnZVRhZyksXHJcbiAgICAgICAgICAgICAgYWN0aXZlQ2hhdE1lc3NhZ2VDb250YWluZXIsXHJcbiAgICAgICAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIHRvdGFsVW5zZWVuTWVzc2FnZXNDb3VudCA9IDBcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNoZWNrVGltZUFuZENyZWF0ZU9sZE1lc3NhZ2VzKFxyXG4gICAgICAgICAgICAgIGRhdGEuYWxsTWVzc2FnZXMsXHJcbiAgICAgICAgICAgICAgYWN0aXZlQ2hhdE1lc3NhZ2VDb250YWluZXIsXHJcbiAgICAgICAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChhY3RpdmVDaGF0TWVzc2FnZUNvbnRhaW5lci5maXJzdEVsZW1lbnRDaGlsZClcclxuICAgICAgICAgICAgICBUT1BfTUVTU0FHRV9CT1hfT0JTRVJWRVIub2JzZXJ2ZShcclxuICAgICAgICAgICAgICAgIGFjdGl2ZUNoYXRNZXNzYWdlQ29udGFpbmVyLmZpcnN0RWxlbWVudENoaWxkXHJcbiAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgfSwgMjUwMClcclxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYWN0aXZlQ2hhdE1lc3NhZ2VDb250YWluZXIubGFzdEVsZW1lbnRDaGlsZClcclxuICAgICAgICAgICAgICBCT1RUT01fTUVTU0FHRV9CT1hfT0JTRVJWRVIub2JzZXJ2ZShcclxuICAgICAgICAgICAgICAgIGFjdGl2ZUNoYXRNZXNzYWdlQ29udGFpbmVyLmxhc3RFbGVtZW50Q2hpbGRcclxuICAgICAgICAgICAgICApXHJcbiAgICAgICAgICB9LCAyMDAwKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHsgYWRqdXN0TWVzc2FnZUNvbnRhaW5lckJvdHRvbVBhZGRpbmcgfSA9IGF3YWl0IGltcG9ydChcclxuICAgICAgICAgIFwiLi4vY2hhdC5kZXZcIlxyXG4gICAgICAgIClcclxuICAgICAgICBhZGp1c3RNZXNzYWdlQ29udGFpbmVyQm90dG9tUGFkZGluZygpXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGV0IHsgY3JlYXRlTWFpbk5vdGlmaWNhdGlvbiB9ID0gYXdhaXQgaW1wb3J0KFxyXG4gICAgICAgICAgXCIuLi8uLi9jb21tb24vbWFpbk5vdGlmaWNhdGlvbi5kZXZcIlxyXG4gICAgICAgIClcclxuICAgICAgICBjcmVhdGVNYWluTm90aWZpY2F0aW9uKGRhdGEuZXJyb3IsIFwiZXJyb3JcIilcclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgIC5jYXRjaChhc3luYyBlcnIgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhlcnIpXHJcbiAgICAgIGxldCB7IGNyZWF0ZU1haW5Ob3RpZmljYXRpb24gfSA9IGF3YWl0IGltcG9ydChcclxuICAgICAgICBcIi4uLy4uL2NvbW1vbi9tYWluTm90aWZpY2F0aW9uLmRldlwiXHJcbiAgICAgIClcclxuICAgICAgY3JlYXRlTWFpbk5vdGlmaWNhdGlvbihcclxuICAgICAgICBcIlNlcnZlciBFcnJvciBJbiBBY2Nlc3NpbmcgTWVzc2FnZXMsIFBsZWFzZSBSZWZyZXNoIFlvdXIgUGFnZVwiLFxyXG4gICAgICAgIFwiZXJyb3JcIlxyXG4gICAgICApXHJcbiAgICB9KVxyXG5cclxuICBhbGxDaGF0U2VjdGlvbi5jbGFzc0xpc3QuYWRkKFwiYWxsLWNoYXQtc2VjdGlvbi0taGlkZVwiKVxyXG4gIGFjdGl2ZUNoYXRTZWN0aW9uLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmUtY2hhdC1zZWN0aW9uLS1oaWRlXCIpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRpYWxpemVVc2VyTWVzc2FnZUJveE9ic2VydmVyKCkge1xyXG4gIFVTRVJfTUVTU0FHRV9CT1hfT0JTRVJWRVIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoXHJcbiAgICBhc3luYyAoZW50cmllcywgb2JzZXJ2ZXIpID0+IHtcclxuICAgICAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHtcclxuICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcgPT09IHRydWUpIHtcclxuICAgICAgICAgIGxldCBtZXNzYWdlSWQgPSBlbnRyeS50YXJnZXQuZGF0YXNldC5tZXNzYWdlSWRcclxuICAgICAgICAgIHNvY2tldC5lbWl0KFwiY2hhdDp1cGRhdGUtbWVzc2FnZS1zZWVuLXN0YXR1c1wiLCB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2VJZDogbWVzc2FnZUlkXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKGVudHJ5LnRhcmdldClcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9LFxyXG4gICAgeyB0aHJlc2hvbGQ6IDAuNSwgcm9vdDogYWN0aXZlQ2hhdE1lc3NhZ2VDb250YWluZXIgfVxyXG4gIClcclxufVxyXG5mdW5jdGlvbiBpbml0aWFsaXplVG9wTWVzc2FnZUJveE9ic2VydmVyKCkge1xyXG4gIFRPUF9NRVNTQUdFX0JPWF9PQlNFUlZFUiA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihcclxuICAgIGFzeW5jIChlbnRyaWVzLCBvYnNlcnZlcikgPT4ge1xyXG4gICAgICBlbnRyaWVzLmZvckVhY2goYXN5bmMgZW50cnkgPT4ge1xyXG4gICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKGVudHJ5LnRhcmdldClcclxuICAgICAgICAgIGxldCBjaGF0SWQgPSBhY3RpdmVDaGF0U2VjdGlvbi5kYXRhc2V0LmNoYXRJZFxyXG5cclxuICAgICAgICAgIGNvbnN0IHsgY3JlYXRlTG9hZGluZ01lc3NhZ2VzQW5pbWF0aW9uIH0gPSBhd2FpdCBpbXBvcnQoXHJcbiAgICAgICAgICAgIFwiLi9tZXNzYWdlLmRldlwiXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgICBsZXQgbG9hZGluZ01lc3NhZ2VBbmltYXRpb25Cb3ggPSBjcmVhdGVMb2FkaW5nTWVzc2FnZXNBbmltYXRpb24oKVxyXG4gICAgICAgICAgYWN0aXZlQ2hhdE1lc3NhZ2VDb250YWluZXIuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFxyXG4gICAgICAgICAgICBcImFmdGVyYmVnaW5cIixcclxuICAgICAgICAgICAgbG9hZGluZ01lc3NhZ2VBbmltYXRpb25Cb3hcclxuICAgICAgICAgIClcclxuICAgICAgICAgIGFjdGl2ZUNoYXRNZXNzYWdlQ29udGFpbmVyLnNjcm9sbFRvcCArPSAxNTBcclxuICAgICAgICAgIGF3YWl0IGZldGNoTWVzc2FnZUFuZENyZWF0ZVVzZXJNZXNzYWdlQm94KGNoYXRJZClcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9LFxyXG4gICAgeyB0aHJlc2hvbGQ6IDAuNSwgcm9vdDogYWN0aXZlQ2hhdE1lc3NhZ2VDb250YWluZXIsIHJvb3RNYXJnaW46IFwiMTAwcHhcIiB9XHJcbiAgKVxyXG59XHJcbmZ1bmN0aW9uIGluaXRpYWxpemVCb3R0b21NZXNzYWdlQm94T2JzZXJ2ZXIoKSB7XHJcbiAgQk9UVE9NX01FU1NBR0VfQk9YX09CU0VSVkVSID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKFxyXG4gICAgYXN5bmMgKGVudHJpZXMsIG9ic2VydmVyKSA9PiB7XHJcbiAgICAgIGVudHJpZXMuZm9yRWFjaChhc3luYyBlbnRyeSA9PiB7XHJcbiAgICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nID09PSB0cnVlKSB7XHJcbiAgICAgICAgICBvYnNlcnZlci51bm9ic2VydmUoZW50cnkudGFyZ2V0KVxyXG4gICAgICAgICAgbGV0IGNoYXRJZCA9IGFjdGl2ZUNoYXRTZWN0aW9uLmRhdGFzZXQuY2hhdElkXHJcbiAgICAgICAgICBzb2NrZXQuZW1pdChcImNoYXQ6dXBkYXRlLWNoYXQtdW5zZWVuLW1lc3NhZ2VzXCIsIHtcclxuICAgICAgICAgICAgY2hhdElkOiBjaGF0SWRcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfSxcclxuICAgIHsgdGhyZXNob2xkOiAwLjUsIHJvb3Q6IGFjdGl2ZUNoYXRNZXNzYWdlQ29udGFpbmVyIH1cclxuICApXHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGZldGNoTWVzc2FnZUFuZENyZWF0ZVVzZXJNZXNzYWdlQm94KGNoYXRJZCkge1xyXG4gIGNvbnN0IHsgY2hlY2tUaW1lQW5kQ3JlYXRlT2xkTWVzc2FnZXMgfSA9IGF3YWl0IGltcG9ydChcIi4vbWVzc2FnZS5kZXZcIilcclxuXHJcbiAgZmV0Y2goXHJcbiAgICBgL21lc3NhZ2UvZmV0Y2gtbWVzc2FnZXMvJHtjaGF0SWR9P3RvdGFsUmVjZWl2ZWRNZXNzYWdlc0NvdW50PSR7dG90YWxSZWNlaXZlZE1lc3NhZ2VzQ291bnR9YFxyXG4gIClcclxuICAgIC50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZXNwb25zZSlcclxuICAgIH0pXHJcbiAgICAudGhlbihhc3luYyBkYXRhID0+IHtcclxuICAgICAgaWYgKGRhdGEuaXNTdWNjZXNzKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZGF0YSlcclxuXHJcbiAgICAgICAgaWYgKGRhdGEuYWxsTWVzc2FnZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgdG90YWxSZWNlaXZlZE1lc3NhZ2VzQ291bnQgKz0gZGF0YS5hbGxNZXNzYWdlcy5sZW5ndGhcclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgdG90YWxVbnNlZW5NZXNzYWdlc0NvdW50ICE9PSAwICYmXHJcbiAgICAgICAgICAgIHRvdGFsVW5zZWVuTWVzc2FnZXNDb3VudCA8PSB0b3RhbFJlY2VpdmVkTWVzc2FnZXNDb3VudFxyXG4gICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGxldCB7IGNyZWF0ZVVuc2Vlbk1lc3NhZ2VUYWdCb3ggfSA9IGF3YWl0IGltcG9ydChcIi4vbWVzc2FnZS5kZXZcIilcclxuXHJcbiAgICAgICAgICAgIGxldCBwb3NpdGlvbkZvclVuc2VlZW5NZXNzYWdlVGFnID1cclxuICAgICAgICAgICAgICBkYXRhLmFsbE1lc3NhZ2VzLmxlbmd0aCAtXHJcbiAgICAgICAgICAgICAgKHRvdGFsUmVjZWl2ZWRNZXNzYWdlc0NvdW50IC0gdG90YWxVbnNlZW5NZXNzYWdlc0NvdW50KVxyXG4gICAgICAgICAgICBjaGVja1RpbWVBbmRDcmVhdGVPbGRNZXNzYWdlcyhcclxuICAgICAgICAgICAgICBkYXRhLmFsbE1lc3NhZ2VzLnNsaWNlKDAsIHBvc2l0aW9uRm9yVW5zZWVlbk1lc3NhZ2VUYWcpLFxyXG4gICAgICAgICAgICAgIGFjdGl2ZUNoYXRNZXNzYWdlQ29udGFpbmVyLFxyXG4gICAgICAgICAgICAgIGZhbHNlLFxyXG4gICAgICAgICAgICAgIGZhbHNlXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgY3JlYXRlVW5zZWVuTWVzc2FnZVRhZ0JveChcclxuICAgICAgICAgICAgICB0b3RhbFVuc2Vlbk1lc3NhZ2VzQ291bnQsXHJcbiAgICAgICAgICAgICAgYWN0aXZlQ2hhdE1lc3NhZ2VDb250YWluZXIsXHJcbiAgICAgICAgICAgICAgXCJhZnRlcmJlZ2luXCJcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICBjaGVja1RpbWVBbmRDcmVhdGVPbGRNZXNzYWdlcyhcclxuICAgICAgICAgICAgICBkYXRhLmFsbE1lc3NhZ2VzLnNsaWNlKHBvc2l0aW9uRm9yVW5zZWVlbk1lc3NhZ2VUYWcpLFxyXG4gICAgICAgICAgICAgIGFjdGl2ZUNoYXRNZXNzYWdlQ29udGFpbmVyLFxyXG4gICAgICAgICAgICAgIGZhbHNlLFxyXG4gICAgICAgICAgICAgIGZhbHNlXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgdG90YWxVbnNlZW5NZXNzYWdlc0NvdW50ID0gMFxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY2hlY2tUaW1lQW5kQ3JlYXRlT2xkTWVzc2FnZXMoXHJcbiAgICAgICAgICAgICAgZGF0YS5hbGxNZXNzYWdlcyxcclxuICAgICAgICAgICAgICBhY3RpdmVDaGF0TWVzc2FnZUNvbnRhaW5lcixcclxuICAgICAgICAgICAgICBmYWxzZSxcclxuICAgICAgICAgICAgICBmYWxzZVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChhY3RpdmVDaGF0TWVzc2FnZUNvbnRhaW5lci5maXJzdEVsZW1lbnRDaGlsZClcclxuICAgICAgICAgICAgICBUT1BfTUVTU0FHRV9CT1hfT0JTRVJWRVIub2JzZXJ2ZShcclxuICAgICAgICAgICAgICAgIGFjdGl2ZUNoYXRNZXNzYWdlQ29udGFpbmVyLmZpcnN0RWxlbWVudENoaWxkXHJcbiAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgfSwgNDAwMClcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgbGV0IGxvYWRpbmdNZXNzYWdlQW5pbWF0aW9uQm94ID0gW1xyXG4gICAgICAgICAgICAuLi5hY3RpdmVDaGF0TWVzc2FnZUNvbnRhaW5lci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFxyXG4gICAgICAgICAgICAgIFwibG9hZGluZy1tZXNzYWdlLWFuaW1hdGlvbi1ib3hcIlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgICBsb2FkaW5nTWVzc2FnZUFuaW1hdGlvbkJveC5mb3JFYWNoKGJveCA9PiB7XHJcbiAgICAgICAgICAgIGJveC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGJveClcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxldCB7IGNyZWF0ZU1haW5Ob3RpZmljYXRpb24gfSA9IGF3YWl0IGltcG9ydChcclxuICAgICAgICAgIFwiLi4vLi4vY29tbW9uL21haW5Ob3RpZmljYXRpb24uZGV2XCJcclxuICAgICAgICApXHJcbiAgICAgICAgY3JlYXRlTWFpbk5vdGlmaWNhdGlvbihkYXRhLmVycm9yLCBcImVycm9yXCIpXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgICAuY2F0Y2goYXN5bmMgZXJyID0+IHtcclxuICAgICAgY29uc29sZS5sb2coZXJyKVxyXG4gICAgICBsZXQgeyBjcmVhdGVNYWluTm90aWZpY2F0aW9uIH0gPSBhd2FpdCBpbXBvcnQoXHJcbiAgICAgICAgXCIuLi8uLi9jb21tb24vbWFpbk5vdGlmaWNhdGlvbi5kZXZcIlxyXG4gICAgICApXHJcbiAgICAgIGNyZWF0ZU1haW5Ob3RpZmljYXRpb24oXHJcbiAgICAgICAgXCJTZXJ2ZXIgRXJyb3IgSW4gQWNjZXNzaW5nIE1lc3NhZ2VzLCBQbGVhc2UgUmVmcmVzaCBZb3VyIFBhZ2VcIixcclxuICAgICAgICBcImVycm9yXCJcclxuICAgICAgKVxyXG4gICAgfSlcclxufVxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbmNyZWFzZVRvdGFsUmVjZWl2ZWRNZXNzYWdlc0NvdW50KCkge1xyXG4gIHRvdGFsVW5zZWVuTWVzc2FnZXNDb3VudCA9IDBcclxuICB0b3RhbFJlY2VpdmVkTWVzc2FnZXNDb3VudCsrXHJcbn1cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVBY3RpdmVDaGF0U2VjdGlvbihjaGF0KSB7XHJcbiAgbGV0IHsgY2xvc2VSZXBseU1lc3NhZ2VCb3ggfSA9IGF3YWl0IGltcG9ydChcIi4vcmVwbHlNZXNzYWdlQm94LmRldi5qc1wiKVxyXG4gIGNsb3NlUmVwbHlNZXNzYWdlQm94KClcclxuICBhY3RpdmVDaGF0U2VjdGlvbi5kYXRhc2V0LmNoYXRJZCA9IGNoYXQuX2lkXHJcbiAgY29uc3QgYWN0aXZlQ2hhdEhlYWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWN0aXZlQ2hhdEhlYWRlclwiKVxyXG4gIGNvbnN0IGFjdGl2ZUNoYXRIZWFkZXJQaWMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFjdGl2ZUNoYXRIZWFkZXJQaWNcIilcclxuICBjb25zdCBhY3RpdmVDaGF0SW1nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhY3RpdmVDaGF0SW1nXCIpXHJcbiAgY29uc3QgYWN0aXZlQ2hhdEhlYWRlck5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFjdGl2ZUNoYXRIZWFkZXJOYW1lXCIpXHJcbiAgY29uc3QgYWN0aXZlQ2hhdEhlYWRlclN0YXR1cyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgXCJhY3RpdmVDaGF0SGVhZGVyU3RhdHVzXCJcclxuICApXHJcbiAgY29uc3QgYWN0aXZlQ2hhdElucHV0Q29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICBcImFjdGl2ZUNoYXRJbnB1dENvbnRhaW5lclwiXHJcbiAgKVxyXG5cclxuICBhY3RpdmVDaGF0SGVhZGVyLmRhdGFzZXQuY2hhdElkID0gY2hhdC5faWRcclxuXHJcbiAgaWYgKGNoYXQuaGFzT3duUHJvcGVydHkoXCJjaGF0UGljXCIpICYmIGNoYXQuY2hhdFBpYyAhPT0gXCJcIikge1xyXG4gICAgYWN0aXZlQ2hhdEltZy5zcmMgPSBjaGF0LmNoYXRQaWNcclxuXHJcbiAgICBhY3RpdmVDaGF0SGVhZGVyUGljLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmUtY2hhdC1oZWFkZXJfX3BpYy0taGlkZS1zdmdcIilcclxuICAgIGFjdGl2ZUNoYXRIZWFkZXJQaWMuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZS1jaGF0LWhlYWRlcl9fcGljLS1oaWRlLWltZ1wiKVxyXG4gIH0gZWxzZSB7XHJcbiAgICBhY3RpdmVDaGF0SGVhZGVyUGljLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmUtY2hhdC1oZWFkZXJfX3BpYy0taGlkZS1pbWdcIilcclxuICAgIGFjdGl2ZUNoYXRIZWFkZXJQaWMuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZS1jaGF0LWhlYWRlcl9fcGljLS1oaWRlLXN2Z1wiKVxyXG4gIH1cclxuXHJcbiAgYWN0aXZlQ2hhdEhlYWRlck5hbWUudGV4dENvbnRlbnQgPSBjaGF0LmNoYXROYW1lXHJcbiAgaWYgKCFjaGF0LmlzR3JvdXBDaGF0KSB7XHJcbiAgICBpZiAoY2hhdC5pc1VzZXJBY3RpdmUpIHtcclxuICAgICAgYWN0aXZlQ2hhdEhlYWRlclN0YXR1cy5jbGFzc0xpc3QucmVtb3ZlKFxyXG4gICAgICAgIFwiYWN0aXZlLWNoYXQtaGVhZGVyX19jaGF0LXN0YXR1cy0taGlkZVwiXHJcbiAgICAgIClcclxuICAgICAgYWN0aXZlQ2hhdEhlYWRlclN0YXR1cy50ZXh0Q29udGVudCA9IFwiQWN0aXZlXCJcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxldCB7IHRpbWVEaWZmZXJlbmNlRnJvbU5vdyB9ID0gYXdhaXQgaW1wb3J0KFxyXG4gICAgICAgIFwiLi4vLi4vY29tbW9uL2NhbGN1bGF0ZVRpbWVEaWZmZXJlbmNlLmRldlwiXHJcbiAgICAgIClcclxuICAgICAgYWN0aXZlQ2hhdEhlYWRlclN0YXR1cy5jbGFzc0xpc3QucmVtb3ZlKFxyXG4gICAgICAgIFwiYWN0aXZlLWNoYXQtaGVhZGVyX19jaGF0LXN0YXR1cy0taGlkZVwiXHJcbiAgICAgIClcclxuICAgICAgaWYgKGNoYXQuaGFzT3duUHJvcGVydHkoXCJ1c2VyTGFzdEFjdGl2ZVwiKSkge1xyXG4gICAgICAgIGFjdGl2ZUNoYXRIZWFkZXJTdGF0dXMudGV4dENvbnRlbnQgPSBgbGFzdCBhY3RpdmUgJHt0aW1lRGlmZmVyZW5jZUZyb21Ob3coXHJcbiAgICAgICAgICBjaGF0LnVzZXJMYXN0QWN0aXZlXHJcbiAgICAgICAgKX0gYWdvYFxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGFjdGl2ZUNoYXRIZWFkZXJTdGF0dXMudGV4dENvbnRlbnQgPSBcIlwiXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgYWN0aXZlQ2hhdEhlYWRlclN0YXR1cy5jbGFzc0xpc3QucmVtb3ZlKFxyXG4gICAgICBcImFjdGl2ZS1jaGF0LWhlYWRlcl9fY2hhdC1zdGF0dXMtLWhpZGVcIlxyXG4gICAgKVxyXG4gICAgYWN0aXZlQ2hhdEhlYWRlclN0YXR1cy50ZXh0Q29udGVudCA9IFwiXCJcclxuICB9XHJcblxyXG4gIGlmIChjaGF0Lmhhc093blByb3BlcnR5KFwiaXNPbkNhbGxcIikgJiYgY2hhdC5pc09uQ2FsbCA9PT0gdHJ1ZSkge1xyXG4gICAgb3BlbkFjdGl2ZUNoYXRDYWxsUm9vbUJveChjaGF0LmNhbGxSb29tSWQpXHJcbiAgfSBlbHNlIHtcclxuICAgIGNsb3NlQWN0aXZlQ2hhdENhbGxSb29tQm94KClcclxuICB9XHJcblxyXG4gIG9uT2ZmQWN0aXZlQ2hhdElucHV0Q29udGFpbmVyKGNoYXQpXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBvcGVuQWN0aXZlQ2hhdENhbGxSb29tQm94KGNhbGxSb29tSWQpIHtcclxuICBsZXQgYWN0aXZlQ2hhdENhbGxCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFjdGl2ZUNoYXRBdWRpb0NhbGxCdG5cIilcclxuICBsZXQgYWN0aXZlQ2hhdENhbGxSb29tQm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhY3RpdmVDaGF0Q2FsbFJvb21Cb3hcIilcclxuXHJcbiAgd2hpbGUgKGFjdGl2ZUNoYXRDYWxsUm9vbUJveC5jbGFzc0xpc3QuY29udGFpbnMoXCJjaGF0LWNhbGwtcm9vbS1ib3gtLWhpZGVcIikpXHJcbiAgICBjaGF0Q2FsbFJvb21Cb3guY2xhc3NMaXN0LnJlbW92ZShcImNoYXQtY2FsbC1yb29tLWJveC0taGlkZVwiKVxyXG4gIGFjdGl2ZUNoYXRDYWxsQnRuLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmUtY2hhdC1oZWFkZXJfX2J0bi0tLWhpZGVcIilcclxuXHJcbiAgYWN0aXZlQ2hhdENhbGxSb29tQm94LmRhdGFzZXQuY2FsbFJvb21JZCA9IGNhbGxSb29tSWRcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsb3NlQWN0aXZlQ2hhdENhbGxSb29tQm94KCkge1xyXG4gIGxldCBhY3RpdmVDaGF0Q2FsbEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWN0aXZlQ2hhdEF1ZGlvQ2FsbEJ0blwiKVxyXG4gIGxldCBhY3RpdmVDaGF0Q2FsbFJvb21Cb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFjdGl2ZUNoYXRDYWxsUm9vbUJveFwiKVxyXG5cclxuICB3aGlsZSAoYWN0aXZlQ2hhdENhbGxCdG4uY2xhc3NMaXN0LmNvbnRhaW5zKFwiYWN0aXZlLWNoYXQtaGVhZGVyX19idG4tLS1oaWRlXCIpKVxyXG4gICAgYWN0aXZlQ2hhdENhbGxCdG4uY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZS1jaGF0LWhlYWRlcl9fYnRuLS0taGlkZVwiKVxyXG4gIGNoYXRDYWxsUm9vbUJveC5jbGFzc0xpc3QuYWRkKFwiY2hhdC1jYWxsLXJvb20tYm94LS1oaWRlXCIpXHJcblxyXG4gIGFjdGl2ZUNoYXRDYWxsUm9vbUJveC5kYXRhc2V0LmNhbGxSb29tSWQgPSBcIlwiXHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjbGVhckFjdGl2ZUNoYXRNZXNzYWdlQ29udGFpbmVyKCkge1xyXG4gIGxldCBhY3RpdmVDaGF0TWVzc2FnZUNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgXCJhY3RpdmVDaGF0TWVzc2FnZUNvbnRhaW5lclwiXHJcbiAgKVxyXG4gIGFjdGl2ZUNoYXRNZXNzYWdlQ29udGFpbmVyLmlubmVySFRNTCA9IFwiXCJcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG9uT2ZmQWN0aXZlQ2hhdElucHV0Q29udGFpbmVyKGNoYXQpIHtcclxuICBjb25zdCBhY3RpdmVDaGF0SW5wdXRDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcclxuICAgIFwiYWN0aXZlQ2hhdElucHV0Q29udGFpbmVyXCJcclxuICApXHJcbiAgaWYgKFxyXG4gICAgY2hhdC5oYXNPd25Qcm9wZXJ0eShcImNhblNlbmRNZXNzYWdlVG9UaGlzQ2hhdFwiKSAmJlxyXG4gICAgY2hhdC5jYW5TZW5kTWVzc2FnZVRvVGhpc0NoYXQgPT09IGZhbHNlXHJcbiAgKSB7XHJcbiAgICBhY3RpdmVDaGF0SW5wdXRDb250YWluZXIuY2xhc3NMaXN0LmFkZChcclxuICAgICAgXCJhY3RpdmUtY2hhdC1pbnB1dC1jb250YWluZXItLWRpc2FibGVcIlxyXG4gICAgKVxyXG4gICAgYWN0aXZlQ2hhdElucHV0Q29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoXHJcbiAgICAgIFwiYWN0aXZlLWNoYXQtaW5wdXQtY29udGFpbmVyLS1lbmFibGVcIlxyXG4gICAgKVxyXG4gIH0gZWxzZSB7XHJcbiAgICBhY3RpdmVDaGF0SW5wdXRDb250YWluZXIuY2xhc3NMaXN0LmFkZChcclxuICAgICAgXCJhY3RpdmUtY2hhdC1pbnB1dC1jb250YWluZXItLWVuYWJsZVwiXHJcbiAgICApXHJcbiAgICBhY3RpdmVDaGF0SW5wdXRDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShcclxuICAgICAgXCJhY3RpdmUtY2hhdC1pbnB1dC1jb250YWluZXItLWRpc2FibGVcIlxyXG4gICAgKVxyXG4gIH1cclxufVxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4iXSwibmFtZXMiOlsiYWxsQ2hhdFNlY3Rpb24iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiYWN0aXZlQ2hhdFNlY3Rpb24iLCJhY3RpdmVDaGF0TWVzc2FnZUNvbnRhaW5lciIsInRvdGFsUmVjZWl2ZWRNZXNzYWdlc0NvdW50IiwidG90YWxVbnNlZW5NZXNzYWdlc0NvdW50Iiwic2hvd0FjdGl2ZUNoYXRTZWN0aW9uIiwiY2hhdCIsImFjdGl2ZUNoYXRJbnB1dFRleHRDb250ZW50IiwidmFsdWUiLCJpbm5lckhUTUwiLCJ1cGRhdGVBY3RpdmVDaGF0U2VjdGlvbiIsInVuc2Vlbk1lc3NhZ2VzQ291bnRSZXNwb25zZSIsImZldGNoIiwiX2lkIiwidW5zZWVuTWVzc2FnZXNDb3VudERhdGEiLCJqc29uIiwidW5zZWVuTWVzc2FnZXNDb3VudCIsImNvbnNvbGUiLCJsb2ciLCJvcGVuQWN0aXZlQ2hhdElucHV0Qm94IiwiVVNFUl9NRVNTQUdFX0JPWF9PQlNFUlZFUiIsInVuZGVmaW5lZCIsImRpc2Nvbm5lY3QiLCJpbml0aWFsaXplVXNlck1lc3NhZ2VCb3hPYnNlcnZlciIsIlRPUF9NRVNTQUdFX0JPWF9PQlNFUlZFUiIsImluaXRpYWxpemVUb3BNZXNzYWdlQm94T2JzZXJ2ZXIiLCJCT1RUT01fTUVTU0FHRV9CT1hfT0JTRVJWRVIiLCJpbml0aWFsaXplQm90dG9tTWVzc2FnZUJveE9ic2VydmVyIiwiY2hlY2tUaW1lQW5kQ3JlYXRlT2xkTWVzc2FnZXMiLCJ0aGVuIiwicmVzcG9uc2UiLCJvayIsIlByb21pc2UiLCJyZWplY3QiLCJkYXRhIiwiaXNTdWNjZXNzIiwiYWxsTWVzc2FnZXMiLCJsZW5ndGgiLCJjcmVhdGVVbnNlZW5NZXNzYWdlVGFnQm94IiwicG9zaXRpb25Gb3JVbnNlZWVuTWVzc2FnZVRhZyIsInNsaWNlIiwic2V0VGltZW91dCIsImZpcnN0RWxlbWVudENoaWxkIiwib2JzZXJ2ZSIsImxhc3RFbGVtZW50Q2hpbGQiLCJhZGp1c3RNZXNzYWdlQ29udGFpbmVyQm90dG9tUGFkZGluZyIsImNyZWF0ZU1haW5Ob3RpZmljYXRpb24iLCJlcnJvciIsImNhdGNoIiwiZXJyIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJlbnRyaWVzIiwib2JzZXJ2ZXIiLCJmb3JFYWNoIiwiZW50cnkiLCJpc0ludGVyc2VjdGluZyIsIm1lc3NhZ2VJZCIsInRhcmdldCIsImRhdGFzZXQiLCJzb2NrZXQiLCJlbWl0IiwidW5vYnNlcnZlIiwidGhyZXNob2xkIiwicm9vdCIsImNoYXRJZCIsImNyZWF0ZUxvYWRpbmdNZXNzYWdlc0FuaW1hdGlvbiIsImxvYWRpbmdNZXNzYWdlQW5pbWF0aW9uQm94IiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50Iiwic2Nyb2xsVG9wIiwiZmV0Y2hNZXNzYWdlQW5kQ3JlYXRlVXNlck1lc3NhZ2VCb3giLCJyb290TWFyZ2luIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImJveCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImluY3JlYXNlVG90YWxSZWNlaXZlZE1lc3NhZ2VzQ291bnQiLCJjbG9zZVJlcGx5TWVzc2FnZUJveCIsImFjdGl2ZUNoYXRIZWFkZXIiLCJhY3RpdmVDaGF0SGVhZGVyUGljIiwiYWN0aXZlQ2hhdEltZyIsImFjdGl2ZUNoYXRIZWFkZXJOYW1lIiwiYWN0aXZlQ2hhdEhlYWRlclN0YXR1cyIsImFjdGl2ZUNoYXRJbnB1dENvbnRhaW5lciIsImhhc093blByb3BlcnR5IiwiY2hhdFBpYyIsInNyYyIsInRleHRDb250ZW50IiwiY2hhdE5hbWUiLCJpc0dyb3VwQ2hhdCIsImlzVXNlckFjdGl2ZSIsInRpbWVEaWZmZXJlbmNlRnJvbU5vdyIsInVzZXJMYXN0QWN0aXZlIiwiaXNPbkNhbGwiLCJvcGVuQWN0aXZlQ2hhdENhbGxSb29tQm94IiwiY2FsbFJvb21JZCIsImNsb3NlQWN0aXZlQ2hhdENhbGxSb29tQm94Iiwib25PZmZBY3RpdmVDaGF0SW5wdXRDb250YWluZXIiLCJhY3RpdmVDaGF0Q2FsbEJ0biIsImFjdGl2ZUNoYXRDYWxsUm9vbUJveCIsImNvbnRhaW5zIiwiY2hhdENhbGxSb29tQm94IiwiY2xlYXJBY3RpdmVDaGF0TWVzc2FnZUNvbnRhaW5lciIsImNhblNlbmRNZXNzYWdlVG9UaGlzQ2hhdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./dev-javascripts/chat/js/showActiveChatSection.dev.js\n");

/***/ })

}]);