"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkfrontend"] = self["webpackChunkfrontend"] || []).push([["dev-javascripts_chat_js_showActiveChatSection_dev_js"],{

/***/ "./dev-javascripts/chat/js/showActiveChatSection.dev.js":
/*!**************************************************************!*\
  !*** ./dev-javascripts/chat/js/showActiveChatSection.dev.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"clearActiveChatMessageContainer\": () => (/* binding */ clearActiveChatMessageContainer),\n/* harmony export */   \"increaseTotalReceivedMessagesCount\": () => (/* binding */ increaseTotalReceivedMessagesCount),\n/* harmony export */   \"onOffActiveChatInputContainer\": () => (/* binding */ onOffActiveChatInputContainer),\n/* harmony export */   \"showActiveChatSection\": () => (/* binding */ showActiveChatSection),\n/* harmony export */   \"updateActiveChatSection\": () => (/* binding */ updateActiveChatSection)\n/* harmony export */ });\n// let allChatSection = document.getElementById(\"allChatSection\")\n// let activeChatSection = document.getElementById(\"activeChatSection\")\n// const activeChatMessageContainer = document.getElementById(\n//   \"activeChatMessageContainer\"\n// )\n// let totalReceivedMessagesCount\n// let totalUnseenMessagesCount\n// export async function showActiveChatSection(chat) {\n//   let activeChatInputTextContent = document.getElementById(\n//     \"activeChatInputTextContent\"\n//   )\n//   activeChatInputTextContent.value = \"\"\n//   activeChatMessageContainer.innerHTML = \"\"\n//   updateActiveChatSection(chat)\n//   totalReceivedMessagesCount = 0\n//   let unseenMessagesCountResponse = await fetch(\n//     `/message/data/unseen-messages-count/${chat._id}`\n//   )\n//   let unseenMessagesCountData = await unseenMessagesCountResponse.json()\n//   totalUnseenMessagesCount = unseenMessagesCountData.unseenMessagesCount\n//   console.log(\"totalUnseenMessagesCount: \" + totalUnseenMessagesCount)\n//   let { openActiveChatInputBox } = await import(\"../chat.dev.js\")\n//   openActiveChatInputBox()\n//   if (USER_MESSAGE_BOX_OBSERVER !== undefined) {\n//     USER_MESSAGE_BOX_OBSERVER.disconnect()\n//   }\n//   initializeUserMessageBoxObserver()\n//   if (TOP_MESSAGE_BOX_OBSERVER !== undefined) {\n//     TOP_MESSAGE_BOX_OBSERVER.disconnect()\n//   }\n//   initializeTopMessageBoxObserver()\n//   if (BOTTOM_MESSAGE_BOX_OBSERVER !== undefined) {\n//     BOTTOM_MESSAGE_BOX_OBSERVER.disconnect()\n//   }\n//   initializeBottomMessageBoxObserver()\n//   ///////////////////\n//   const { checkTimeAndCreateOldMessages } = await import(\"./message.dev\")\n//   fetch(`/message/fetch-messages/${chat._id}?totalReceivedMessagesCount=0`)\n//     .then(response => {\n//       if (response.ok) {\n//         return response.json()\n//       }\n//       return Promise.reject(response)\n//     })\n//     .then(async data => {\n//       if (data.isSuccess) {\n//         activeChatMessageContainer.innerHTML = \"\"\n//         console.log(data)\n//         if (data.allMessages.length > 0) {\n//           totalReceivedMessagesCount += data.allMessages.length\n//           if (\n//             totalUnseenMessagesCount !== 0 &&\n//             totalUnseenMessagesCount <= totalReceivedMessagesCount\n//           ) {\n//             let { createUnseenMessageTagBox } = await import(\"./message.dev\")\n//             let positionForUnseeenMessageTag =\n//               data.allMessages.length -\n//               (totalReceivedMessagesCount - totalUnseenMessagesCount)\n//             checkTimeAndCreateOldMessages(\n//               data.allMessages.slice(0, positionForUnseeenMessageTag),\n//               activeChatMessageContainer,\n//               false,\n//               true\n//             )\n//             createUnseenMessageTagBox(\n//               totalUnseenMessagesCount,\n//               activeChatMessageContainer,\n//               \"afterbegin\"\n//             )\n//             checkTimeAndCreateOldMessages(\n//               data.allMessages.slice(positionForUnseeenMessageTag),\n//               activeChatMessageContainer,\n//               false,\n//               true\n//             )\n//             totalUnseenMessagesCount = 0\n//           } else {\n//             checkTimeAndCreateOldMessages(\n//               data.allMessages,\n//               activeChatMessageContainer,\n//               false,\n//               true\n//             )\n//           }\n//           setTimeout(() => {\n//             if (activeChatMessageContainer.firstElementChild)\n//               TOP_MESSAGE_BOX_OBSERVER.observe(\n//                 activeChatMessageContainer.firstElementChild\n//               )\n//           }, 2500)\n//           setTimeout(() => {\n//             if (activeChatMessageContainer.lastElementChild)\n//               BOTTOM_MESSAGE_BOX_OBSERVER.observe(\n//                 activeChatMessageContainer.lastElementChild\n//               )\n//           }, 2000)\n//         }\n//         let { adjustMessageContainerBottomPadding } = await import(\n//           \"../chat.dev\"\n//         )\n//         adjustMessageContainerBottomPadding()\n//       } else {\n//         let { createMainNotification } = await import(\n//           \"../../common/mainNotification.dev\"\n//         )\n//         createMainNotification(data.error, \"error\")\n//       }\n//     })\n//     .catch(async err => {\n//       console.log(err)\n//       let { createMainNotification } = await import(\n//         \"../../common/mainNotification.dev\"\n//       )\n//       createMainNotification(\n//         \"Server Error In Accessing Messages, Please Refresh Your Page\",\n//         \"error\"\n//       )\n//     })\n//   allChatSection.classList.add(\"all-chat-section--hide\")\n//   activeChatSection.classList.remove(\"active-chat-section--hide\")\n// }\n// function initializeUserMessageBoxObserver() {\n//   USER_MESSAGE_BOX_OBSERVER = new IntersectionObserver(\n//     async (entries, observer) => {\n//       entries.forEach(entry => {\n//         if (entry.isIntersecting === true) {\n//           let messageId = entry.target.dataset.messageId\n//           socket.emit(\"chat:update-message-seen-status\", {\n//             messageId: messageId\n//           })\n//           observer.unobserve(entry.target)\n//         }\n//       })\n//     },\n//     { threshold: 0.5, root: activeChatMessageContainer }\n//   )\n// }\n// function initializeTopMessageBoxObserver() {\n//   TOP_MESSAGE_BOX_OBSERVER = new IntersectionObserver(\n//     async (entries, observer) => {\n//       entries.forEach(async entry => {\n//         if (entry.isIntersecting === true) {\n//           observer.unobserve(entry.target)\n//           let chatId = activeChatSection.dataset.chatId\n//           const { createLoadingMessagesAnimation } = await import(\n//             \"./message.dev\"\n//           )\n//           let loadingMessageAnimationBox = createLoadingMessagesAnimation()\n//           activeChatMessageContainer.insertAdjacentElement(\n//             \"afterbegin\",\n//             loadingMessageAnimationBox\n//           )\n//           activeChatMessageContainer.scrollTop += 150\n//           await fetchMessageAndCreateUserMessageBox(chatId)\n//         }\n//       })\n//     },\n//     { threshold: 0.5, root: activeChatMessageContainer, rootMargin: \"100px\" }\n//   )\n// }\n// function initializeBottomMessageBoxObserver() {\n//   BOTTOM_MESSAGE_BOX_OBSERVER = new IntersectionObserver(\n//     async (entries, observer) => {\n//       entries.forEach(async entry => {\n//         if (entry.isIntersecting === true) {\n//           observer.unobserve(entry.target)\n//           let chatId = activeChatSection.dataset.chatId\n//           socket.emit(\"chat:update-chat-unseen-messages\", {\n//             chatId: chatId\n//           })\n//         }\n//       })\n//     },\n//     { threshold: 0.5, root: activeChatMessageContainer }\n//   )\n// }\n// async function fetchMessageAndCreateUserMessageBox(chatId) {\n//   const { checkTimeAndCreateOldMessages } = await import(\"./message.dev\")\n//   fetch(\n//     `/message/fetch-messages/${chatId}?totalReceivedMessagesCount=${totalReceivedMessagesCount}`\n//   )\n//     .then(response => {\n//       if (response.ok) {\n//         return response.json()\n//       }\n//       return Promise.reject(response)\n//     })\n//     .then(async data => {\n//       if (data.isSuccess) {\n//         console.log(data)\n//         if (data.allMessages.length > 0) {\n//           totalReceivedMessagesCount += data.allMessages.length\n//           if (\n//             totalUnseenMessagesCount !== 0 &&\n//             totalUnseenMessagesCount <= totalReceivedMessagesCount\n//           ) {\n//             let { createUnseenMessageTagBox } = await import(\"./message.dev\")\n//             let positionForUnseeenMessageTag =\n//               data.allMessages.length -\n//               (totalReceivedMessagesCount - totalUnseenMessagesCount)\n//             checkTimeAndCreateOldMessages(\n//               data.allMessages.slice(0, positionForUnseeenMessageTag),\n//               activeChatMessageContainer,\n//               false,\n//               false\n//             )\n//             createUnseenMessageTagBox(\n//               totalUnseenMessagesCount,\n//               activeChatMessageContainer,\n//               \"afterbegin\"\n//             )\n//             checkTimeAndCreateOldMessages(\n//               data.allMessages.slice(positionForUnseeenMessageTag),\n//               activeChatMessageContainer,\n//               false,\n//               false\n//             )\n//             totalUnseenMessagesCount = 0\n//           } else {\n//             checkTimeAndCreateOldMessages(\n//               data.allMessages,\n//               activeChatMessageContainer,\n//               false,\n//               false\n//             )\n//           }\n//           setTimeout(() => {\n//             if (activeChatMessageContainer.firstElementChild)\n//               TOP_MESSAGE_BOX_OBSERVER.observe(\n//                 activeChatMessageContainer.firstElementChild\n//               )\n//           }, 4000)\n//         } else {\n//           let loadingMessageAnimationBox = [\n//             ...activeChatMessageContainer.getElementsByClassName(\n//               \"loading-message-animation-box\"\n//             )\n//           ]\n//           loadingMessageAnimationBox.forEach(box => {\n//             box.parentNode.removeChild(box)\n//           })\n//         }\n//       } else {\n//         let { createMainNotification } = await import(\n//           \"../../common/mainNotification.dev\"\n//         )\n//         createMainNotification(data.error, \"error\")\n//       }\n//     })\n//     .catch(async err => {\n//       console.log(err)\n//       let { createMainNotification } = await import(\n//         \"../../common/mainNotification.dev\"\n//       )\n//       createMainNotification(\n//         \"Server Error In Accessing Messages, Please Refresh Your Page\",\n//         \"error\"\n//       )\n//     })\n// }\n// //////////////////////////\n// export function increaseTotalReceivedMessagesCount() {\n//   totalUnseenMessagesCount = 0\n//   totalReceivedMessagesCount++\n// }\n// /////////////////\n// export async function updateActiveChatSection(chat) {\n//   let { closeReplyMessageBox } = await import(\"./replyMessageBox.dev.js\")\n//   closeReplyMessageBox()\n//   activeChatSection.dataset.chatId = chat._id\n//   const activeChatHeader = document.getElementById(\"activeChatHeader\")\n//   const activeChatHeaderPic = document.getElementById(\"activeChatHeaderPic\")\n//   const activeChatImg = document.getElementById(\"activeChatImg\")\n//   const activeChatHeaderName = document.getElementById(\"activeChatHeaderName\")\n//   const activeChatHeaderStatus = document.getElementById(\n//     \"activeChatHeaderStatus\"\n//   )\n//   const activeChatInputContainer = document.getElementById(\n//     \"activeChatInputContainer\"\n//   )\n//   activeChatHeader.dataset.chatId = chat._id\n//   if (chat.hasOwnProperty(\"chatPic\") && chat.chatPic !== \"\") {\n//     activeChatImg.src = chat.chatPic\n//     activeChatHeaderPic.classList.add(\"active-chat-header__pic--hide-svg\")\n//     activeChatHeaderPic.classList.remove(\"active-chat-header__pic--hide-img\")\n//   } else {\n//     activeChatHeaderPic.classList.add(\"active-chat-header__pic--hide-img\")\n//     activeChatHeaderPic.classList.remove(\"active-chat-header__pic--hide-svg\")\n//   }\n//   activeChatHeaderName.textContent = chat.chatName\n//   if (!chat.isGroupChat) {\n//     if (chat.isUserActive) {\n//       activeChatHeaderStatus.classList.remove(\n//         \"active-chat-header__chat-status--hide\"\n//       )\n//       activeChatHeaderStatus.textContent = \"Active\"\n//     } else {\n//       let { timeDifferenceFromNow } = await import(\n//         \"../../common/calculateTimeDifference.dev\"\n//       )\n//       activeChatHeaderStatus.classList.remove(\n//         \"active-chat-header__chat-status--hide\"\n//       )\n//       if (chat.hasOwnProperty(\"userLastActive\")) {\n//         activeChatHeaderStatus.textContent = `last active ${timeDifferenceFromNow(\n//           chat.userLastActive\n//         )} ago`\n//       } else {\n//         activeChatHeaderStatus.textContent = \"\"\n//       }\n//     }\n//   } else {\n//     activeChatHeaderStatus.classList.remove(\n//       \"active-chat-header__chat-status--hide\"\n//     )\n//     activeChatHeaderStatus.textContent = \"\"\n//   }\n//   if (chat.hasOwnProperty(\"isOnCall\") && chat.isOnCall === true) {\n//     openActiveChatCallRoomBox(chat.callRoomId)\n//   } else {\n//     closeActiveChatCallRoomBox()\n//   }\n//   onOffActiveChatInputContainer(chat)\n// }\n// export function openActiveChatCallRoomBox(callRoomId) {\n//   let activeChatCallBtn = document.getElementById(\"activeChatAudioCallBtn\")\n//   let activeChatCallRoomBox = document.getElementById(\"activeChatCallRoomBox\")\n//   while (activeChatCallRoomBox.classList.contains(\"chat-call-room-box--hide\"))\n//     chatCallRoomBox.classList.remove(\"chat-call-room-box--hide\")\n//   activeChatCallBtn.classList.add(\"active-chat-header__btn---hide\")\n//   activeChatCallRoomBox.dataset.callRoomId = callRoomId\n// }\n// export function closeActiveChatCallRoomBox() {\n//   let activeChatCallBtn = document.getElementById(\"activeChatAudioCallBtn\")\n//   let activeChatCallRoomBox = document.getElementById(\"activeChatCallRoomBox\")\n//   while (activeChatCallBtn.classList.contains(\"active-chat-header__btn---hide\"))\n//     activeChatCallBtn.classList.remove(\"active-chat-header__btn---hide\")\n//   chatCallRoomBox.classList.add(\"chat-call-room-box--hide\")\n//   activeChatCallRoomBox.dataset.callRoomId = \"\"\n// }\n// export async function clearActiveChatMessageContainer() {\n//   let activeChatMessageContainer = document.getElementById(\n//     \"activeChatMessageContainer\"\n//   )\n//   activeChatMessageContainer.innerHTML = \"\"\n// }\n// export async function onOffActiveChatInputContainer(chat) {\n//   const activeChatInputContainer = document.getElementById(\n//     \"activeChatInputContainer\"\n//   )\n//   if (\n//     chat.hasOwnProperty(\"canSendMessageToThisChat\") &&\n//     chat.canSendMessageToThisChat === false\n//   ) {\n//     activeChatInputContainer.classList.add(\n//       \"active-chat-input-container--disable\"\n//     )\n//     activeChatInputContainer.classList.remove(\n//       \"active-chat-input-container--enable\"\n//     )\n//   } else {\n//     activeChatInputContainer.classList.add(\n//       \"active-chat-input-container--enable\"\n//     )\n//     activeChatInputContainer.classList.remove(\n//       \"active-chat-input-container--disable\"\n//     )\n//   }\n// }\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\nlet allChatSection = document.getElementById(\"allChatSection\");\nlet activeChatSection = document.getElementById(\"activeChatSection\");\nconst activeChatMessageContainer = document.getElementById(\"activeChatMessageContainer\");\nlet totalReceivedMessagesCount;\nlet totalUnseenMessagesCount;\nasync function showActiveChatSection(chat) {\n  let activeChatInputTextContent = document.getElementById(\"activeChatInputTextContent\");\n  activeChatInputTextContent.value = \"\";\n  activeChatMessageContainer.innerHTML = \"\";\n  updateActiveChatSection(chat);\n  totalReceivedMessagesCount = 0;\n  let unseenMessagesCountResponse = await fetch(`/message/data/unseen-messages-count/${chat._id}`);\n  let unseenMessagesCountData = await unseenMessagesCountResponse.json();\n  totalUnseenMessagesCount = unseenMessagesCountData.unseenMessagesCount;\n  console.log(\"totalUnseenMessagesCount: \" + totalUnseenMessagesCount);\n  let {\n    openActiveChatInputBox\n  } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_chat_chat_dev_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../chat.dev.js */ \"./dev-javascripts/chat/chat.dev.js\"));\n  openActiveChatInputBox();\n\n  if (USER_MESSAGE_BOX_OBSERVER !== undefined) {\n    USER_MESSAGE_BOX_OBSERVER.disconnect();\n  }\n\n  initializeUserMessageBoxObserver();\n\n  if (TOP_MESSAGE_BOX_OBSERVER !== undefined) {\n    TOP_MESSAGE_BOX_OBSERVER.disconnect();\n  }\n\n  initializeTopMessageBoxObserver();\n\n  if (BOTTOM_MESSAGE_BOX_OBSERVER !== undefined) {\n    BOTTOM_MESSAGE_BOX_OBSERVER.disconnect();\n  }\n\n  initializeBottomMessageBoxObserver(); ///////////////////\n\n  const {\n    checkTimeAndCreateOldMessages\n  } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_plyr_dist_plyr_min_js\"), __webpack_require__.e(\"dev-javascripts_chat_js_message_dev_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./message.dev */ \"./dev-javascripts/chat/js/message.dev.js\"));\n  fetch(`/message/fetch-messages/${chat._id}?totalReceivedMessagesCount=0`).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    return Promise.reject(response);\n  }).then(async data => {\n    if (data.isSuccess) {\n      activeChatMessageContainer.innerHTML = \"\";\n      console.log(data);\n\n      if (data.allMessages.length > 0) {\n        totalReceivedMessagesCount += data.allMessages.length;\n\n        if (totalUnseenMessagesCount !== 0 && totalUnseenMessagesCount <= totalReceivedMessagesCount) {\n          let {\n            createUnseenMessageTagBox\n          } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_plyr_dist_plyr_min_js\"), __webpack_require__.e(\"dev-javascripts_chat_js_message_dev_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./message.dev */ \"./dev-javascripts/chat/js/message.dev.js\"));\n          let positionForUnseeenMessageTag = data.allMessages.length - (totalReceivedMessagesCount - totalUnseenMessagesCount);\n          checkTimeAndCreateOldMessages(data.allMessages.slice(0, positionForUnseeenMessageTag), activeChatMessageContainer, false, true);\n          createUnseenMessageTagBox(totalUnseenMessagesCount, activeChatMessageContainer, \"afterbegin\");\n          checkTimeAndCreateOldMessages(data.allMessages.slice(positionForUnseeenMessageTag), activeChatMessageContainer, false, true);\n          totalUnseenMessagesCount = 0;\n        } else {\n          checkTimeAndCreateOldMessages(data.allMessages, activeChatMessageContainer, false, true);\n        }\n\n        setTimeout(() => {\n          if (activeChatMessageContainer.firstElementChild) TOP_MESSAGE_BOX_OBSERVER.observe(activeChatMessageContainer.firstElementChild);\n        }, 2500);\n        setTimeout(() => {\n          if (activeChatMessageContainer.lastElementChild) BOTTOM_MESSAGE_BOX_OBSERVER.observe(activeChatMessageContainer.lastElementChild);\n        }, 2000);\n      }\n\n      let {\n        adjustMessageContainerBottomPadding\n      } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_chat_chat_dev_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../chat.dev */ \"./dev-javascripts/chat/chat.dev.js\"));\n      adjustMessageContainerBottomPadding();\n    } else {\n      let {\n        createMainNotification\n      } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_common_mainNotification_dev_js-_81c90\").then(__webpack_require__.bind(__webpack_require__, /*! ../../common/mainNotification.dev */ \"./dev-javascripts/common/mainNotification.dev.js\"));\n      createMainNotification(data.error, \"error\");\n    }\n  }).catch(async err => {\n    console.log(err);\n    let {\n      createMainNotification\n    } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_common_mainNotification_dev_js-_81c90\").then(__webpack_require__.bind(__webpack_require__, /*! ../../common/mainNotification.dev */ \"./dev-javascripts/common/mainNotification.dev.js\"));\n    createMainNotification(\"Server Error In Accessing Messages, Please Refresh Your Page\", \"error\");\n  });\n  allChatSection.classList.add(\"all-chat-section--hide\");\n  activeChatSection.classList.remove(\"active-chat-section--hide\");\n}\n\nfunction initializeUserMessageBoxObserver() {\n  USER_MESSAGE_BOX_OBSERVER = new IntersectionObserver(async (entries, observer) => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting === true) {\n        let messageId = entry.target.dataset.messageId;\n        socket.emit(\"chat:update-message-seen-status\", {\n          messageId: messageId\n        });\n        observer.unobserve(entry.target);\n      }\n    });\n  }, {\n    threshold: 0.5,\n    root: activeChatMessageContainer\n  });\n}\n\nfunction initializeTopMessageBoxObserver() {\n  TOP_MESSAGE_BOX_OBSERVER = new IntersectionObserver(async (entries, observer) => {\n    entries.forEach(async entry => {\n      if (entry.isIntersecting === true) {\n        observer.unobserve(entry.target);\n        let chatId = activeChatSection.dataset.chatId;\n        const {\n          createLoadingMessagesAnimation\n        } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_plyr_dist_plyr_min_js\"), __webpack_require__.e(\"dev-javascripts_chat_js_message_dev_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./message.dev */ \"./dev-javascripts/chat/js/message.dev.js\"));\n        let loadingMessageAnimationBox = createLoadingMessagesAnimation();\n        activeChatMessageContainer.insertAdjacentElement(\"afterbegin\", loadingMessageAnimationBox);\n        activeChatMessageContainer.scrollTop += 150;\n        await fetchMessageAndCreateUserMessageBox(chatId);\n      }\n    });\n  }, {\n    threshold: 0.5,\n    root: activeChatMessageContainer,\n    rootMargin: \"100px\"\n  });\n}\n\nfunction initializeBottomMessageBoxObserver() {\n  BOTTOM_MESSAGE_BOX_OBSERVER = new IntersectionObserver(async (entries, observer) => {\n    entries.forEach(async entry => {\n      if (entry.isIntersecting === true) {\n        observer.unobserve(entry.target);\n        let chatId = activeChatSection.dataset.chatId;\n        socket.emit(\"chat:update-chat-unseen-messages\", {\n          chatId: chatId\n        });\n      }\n    });\n  }, {\n    threshold: 0.5,\n    root: activeChatMessageContainer\n  });\n}\n\nasync function fetchMessageAndCreateUserMessageBox(chatId) {\n  const {\n    checkTimeAndCreateOldMessages\n  } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_plyr_dist_plyr_min_js\"), __webpack_require__.e(\"dev-javascripts_chat_js_message_dev_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./message.dev */ \"./dev-javascripts/chat/js/message.dev.js\"));\n  fetch(`/message/fetch-messages/${chatId}?totalReceivedMessagesCount=${totalReceivedMessagesCount}`).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    return Promise.reject(response);\n  }).then(async data => {\n    if (data.isSuccess) {\n      console.log(data);\n\n      if (data.allMessages.length > 0) {\n        totalReceivedMessagesCount += data.allMessages.length;\n\n        if (totalUnseenMessagesCount !== 0 && totalUnseenMessagesCount <= totalReceivedMessagesCount) {\n          let {\n            createUnseenMessageTagBox\n          } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_plyr_dist_plyr_min_js\"), __webpack_require__.e(\"dev-javascripts_chat_js_message_dev_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./message.dev */ \"./dev-javascripts/chat/js/message.dev.js\"));\n          let positionForUnseeenMessageTag = data.allMessages.length - (totalReceivedMessagesCount - totalUnseenMessagesCount);\n          checkTimeAndCreateOldMessages(data.allMessages.slice(0, positionForUnseeenMessageTag), activeChatMessageContainer, false, false);\n          createUnseenMessageTagBox(totalUnseenMessagesCount, activeChatMessageContainer, \"afterbegin\");\n          checkTimeAndCreateOldMessages(data.allMessages.slice(positionForUnseeenMessageTag), activeChatMessageContainer, false, false);\n          totalUnseenMessagesCount = 0;\n        } else {\n          checkTimeAndCreateOldMessages(data.allMessages, activeChatMessageContainer, false, false);\n        }\n\n        setTimeout(() => {\n          if (activeChatMessageContainer.firstElementChild) TOP_MESSAGE_BOX_OBSERVER.observe(activeChatMessageContainer.firstElementChild);\n        }, 4000);\n      } else {\n        let loadingMessageAnimationBox = [...activeChatMessageContainer.getElementsByClassName(\"loading-message-animation-box\")];\n        loadingMessageAnimationBox.forEach(box => {\n          box.parentNode.removeChild(box);\n        });\n      }\n    } else {\n      let {\n        createMainNotification\n      } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_common_mainNotification_dev_js-_81c90\").then(__webpack_require__.bind(__webpack_require__, /*! ../../common/mainNotification.dev */ \"./dev-javascripts/common/mainNotification.dev.js\"));\n      createMainNotification(data.error, \"error\");\n    }\n  }).catch(async err => {\n    console.log(err);\n    let {\n      createMainNotification\n    } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_common_mainNotification_dev_js-_81c90\").then(__webpack_require__.bind(__webpack_require__, /*! ../../common/mainNotification.dev */ \"./dev-javascripts/common/mainNotification.dev.js\"));\n    createMainNotification(\"Server Error In Accessing Messages, Please Refresh Your Page\", \"error\");\n  });\n} //////////////////////////\n\n\nfunction increaseTotalReceivedMessagesCount() {\n  totalUnseenMessagesCount = 0;\n  totalReceivedMessagesCount++;\n} /////////////////\n\nasync function updateActiveChatSection(chat) {\n  let {\n    closeReplyMessageBox\n  } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_chat_js_replyMessageBox_dev_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./replyMessageBox.dev.js */ \"./dev-javascripts/chat/js/replyMessageBox.dev.js\"));\n  closeReplyMessageBox();\n  activeChatSection.dataset.chatId = chat._id;\n  const activeChatHeader = document.getElementById(\"activeChatHeader\");\n  const activeChatHeaderPic = document.getElementById(\"activeChatHeaderPic\");\n  const activeChatImg = document.getElementById(\"activeChatImg\");\n  const activeChatHeaderName = document.getElementById(\"activeChatHeaderName\");\n  const activeChatHeaderStatus = document.getElementById(\"activeChatHeaderStatus\");\n  const activeChatInputContainer = document.getElementById(\"activeChatInputContainer\");\n  activeChatHeader.dataset.chatId = chat._id;\n\n  if (chat.hasOwnProperty(\"chatPic\") && chat.chatPic !== \"\") {\n    activeChatImg.src = chat.chatPic;\n    activeChatHeaderPic.classList.add(\"active-chat-header__pic--hide-svg\");\n    activeChatHeaderPic.classList.remove(\"active-chat-header__pic--hide-img\");\n  } else {\n    activeChatHeaderPic.classList.add(\"active-chat-header__pic--hide-img\");\n    activeChatHeaderPic.classList.remove(\"active-chat-header__pic--hide-svg\");\n  }\n\n  activeChatHeaderName.textContent = chat.chatName;\n\n  if (!chat.isGroupChat) {\n    if (chat.isUserActive) {\n      activeChatHeaderStatus.classList.remove(\"active-chat-header__chat-status--hide\");\n      activeChatHeaderStatus.textContent = \"Active\";\n    } else {\n      let {\n        timeDifferenceFromNow\n      } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_common_calculateTimeDifference_dev_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../../common/calculateTimeDifference.dev */ \"./dev-javascripts/common/calculateTimeDifference.dev.js\"));\n      activeChatHeaderStatus.classList.remove(\"active-chat-header__chat-status--hide\");\n\n      if (chat.hasOwnProperty(\"userLastActive\")) {\n        activeChatHeaderStatus.textContent = `last active ${timeDifferenceFromNow(chat.userLastActive)} ago`;\n      } else {\n        activeChatHeaderStatus.textContent = \"\";\n      }\n    }\n  } else {\n    activeChatHeaderStatus.classList.remove(\"active-chat-header__chat-status--hide\");\n    activeChatHeaderStatus.textContent = \"\";\n  }\n\n  onOffActiveChatInputContainer(chat);\n}\nasync function clearActiveChatMessageContainer() {\n  let activeChatMessageContainer = document.getElementById(\"activeChatMessageContainer\");\n  activeChatMessageContainer.innerHTML = \"\";\n}\nasync function onOffActiveChatInputContainer(chat) {\n  const activeChatInputContainer = document.getElementById(\"activeChatInputContainer\");\n\n  if (chat.hasOwnProperty(\"canSendMessageToThisChat\") && chat.canSendMessageToThisChat === false) {\n    activeChatInputContainer.classList.add(\"active-chat-input-container--disable\");\n    activeChatInputContainer.classList.remove(\"active-chat-input-container--enable\");\n  } else {\n    activeChatInputContainer.classList.add(\"active-chat-input-container--enable\");\n    activeChatInputContainer.classList.remove(\"active-chat-input-container--disable\");\n  }\n} ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./dev-javascripts/chat/js/showActiveChatSection.dev.js\n");

/***/ })

}]);