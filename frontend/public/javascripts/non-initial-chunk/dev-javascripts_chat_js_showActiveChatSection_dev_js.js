"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkfrontend"] = self["webpackChunkfrontend"] || []).push([["dev-javascripts_chat_js_showActiveChatSection_dev_js"],{

/***/ "./dev-javascripts/chat/js/showActiveChatSection.dev.js":
/*!**************************************************************!*\
  !*** ./dev-javascripts/chat/js/showActiveChatSection.dev.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"clearActiveChatMessageContainer\": () => (/* binding */ clearActiveChatMessageContainer),\n/* harmony export */   \"onOffActiveChatInputContainer\": () => (/* binding */ onOffActiveChatInputContainer),\n/* harmony export */   \"showActiveChatSection\": () => (/* binding */ showActiveChatSection),\n/* harmony export */   \"updateActiveChatSection\": () => (/* binding */ updateActiveChatSection)\n/* harmony export */ });\nlet allChatSection = document.getElementById(\"allChatSection\");\nlet activeChatSection = document.getElementById(\"activeChatSection\");\nconst activeChatMessageContainer = document.getElementById(\"activeChatMessageContainer\");\nasync function showActiveChatSection(chat) {\n  let activeChatInputTextContent = document.getElementById(\"activeChatInputTextContent\");\n  activeChatInputTextContent.value = \"\";\n  activeChatMessageContainer.innerHTML = \"\";\n  let {\n    openActiveChatInputBox\n  } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_chat_chat_dev_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../chat.dev.js */ \"./dev-javascripts/chat/chat.dev.js\"));\n  openActiveChatInputBox();\n  updateActiveChatSection(chat);\n\n  if (USER_MESSAGE_BOX_OBSERVER !== undefined) {\n    USER_MESSAGE_BOX_OBSERVER.disconnect();\n  }\n\n  initializeUserMessageBoxObserver(); /////////////////////\n\n  const {\n    checkTimeAndCreateOldMessage\n  } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_plyr_dist_plyr_min_js\"), __webpack_require__.e(\"dev-javascripts_chat_js_message_dev_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./message.dev */ \"./dev-javascripts/chat/js/message.dev.js\"));\n  fetch(`/message/fetch-messages/${chat._id}`).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    return Promise.reject(response);\n  }).then(async data => {\n    if (data.isSuccess) {\n      activeChatMessageContainer.innerHTML = \"\";\n      console.log(data);\n      let unseenMessages = data.allMessages.slice(0, data.unseenMessagesCount);\n      let seenMessages = data.allMessages.slice(data.unseenMessagesCount);\n      console.log(\"unseenMessages:\", unseenMessages, \"seenMessages:\", seenMessages);\n      await checkTimeAndCreateOldMessage(seenMessages, activeChatMessageContainer, true);\n\n      if (unseenMessages.length > 0) {\n        const {\n          checkTimeAndCreateNewMessage\n        } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_plyr_dist_plyr_min_js\"), __webpack_require__.e(\"dev-javascripts_chat_js_message_dev_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./message.dev */ \"./dev-javascripts/chat/js/message.dev.js\"));\n        const {\n          createUnseenMessageTagBox\n        } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_plyr_dist_plyr_min_js\"), __webpack_require__.e(\"dev-javascripts_chat_js_message_dev_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./message.dev */ \"./dev-javascripts/chat/js/message.dev.js\"));\n        createUnseenMessageTagBox(unseenMessages.length, activeChatMessageContainer, \"beforeend\", false);\n\n        for (let i = unseenMessages.length - 1; i >= 0; i--) {\n          await checkTimeAndCreateNewMessage(unseenMessages[i], activeChatMessageContainer, false);\n        }\n\n        let unseenMessageTagBox = activeChatMessageContainer.getElementsByClassName(\"active-chat-unseen-message-tag-box\")[0];\n\n        if (unseenMessageTagBox) {\n          activeChatMessageContainer.scrollTop = unseenMessageTagBox.offsetTop; // unseenMessageTagBox.scrollIntoView({\n          //   behavior: \"smooth\",\n          //   block: \"end\",\n          //   inline: \"nearest\"\n          // })\n        }\n      }\n\n      let {\n        adjustMessageContainerBottomPadding\n      } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_chat_chat_dev_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../chat.dev */ \"./dev-javascripts/chat/chat.dev.js\"));\n      adjustMessageContainerBottomPadding();\n    } else {\n      let {\n        createMainNotification\n      } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_common_mainNotification_dev_js-_81c90\").then(__webpack_require__.bind(__webpack_require__, /*! ../../common/mainNotification.dev */ \"./dev-javascripts/common/mainNotification.dev.js\"));\n      createMainNotification(data.error, \"error\");\n    }\n  }).catch(async err => {\n    console.log(err);\n    let {\n      createMainNotification\n    } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_common_mainNotification_dev_js-_81c90\").then(__webpack_require__.bind(__webpack_require__, /*! ../../common/mainNotification.dev */ \"./dev-javascripts/common/mainNotification.dev.js\"));\n    createMainNotification(\"Server Error In Accessing Messages, Please Refresh Your Page\", \"error\");\n  });\n  allChatSection.classList.add(\"all-chat-section--hide\");\n  activeChatSection.classList.remove(\"active-chat-section--hide\");\n}\nasync function updateActiveChatSection(chat) {\n  let {\n    closeReplyMessageBox\n  } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_chat_js_replyMessageBox_dev_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./replyMessageBox.dev.js */ \"./dev-javascripts/chat/js/replyMessageBox.dev.js\"));\n  closeReplyMessageBox();\n  activeChatSection.dataset.chatId = chat._id;\n  const activeChatHeader = document.getElementById(\"activeChatHeader\");\n  const activeChatHeaderPic = document.getElementById(\"activeChatHeaderPic\");\n  const activeChatImg = document.getElementById(\"activeChatImg\");\n  const activeChatHeaderName = document.getElementById(\"activeChatHeaderName\");\n  const activeChatHeaderStatus = document.getElementById(\"activeChatHeaderStatus\");\n  const activeChatInputContainer = document.getElementById(\"activeChatInputContainer\");\n  activeChatHeader.dataset.chatId = chat._id;\n\n  if (chat.hasOwnProperty(\"chatPic\") && chat.chatPic !== \"\") {\n    activeChatImg.src = chat.chatPic;\n    activeChatHeaderPic.classList.add(\"active-chat-header__pic--hide-svg\");\n    activeChatHeaderPic.classList.remove(\"active-chat-header__pic--hide-img\");\n  } else {\n    activeChatHeaderPic.classList.add(\"active-chat-header__pic--hide-img\");\n    activeChatHeaderPic.classList.remove(\"active-chat-header__pic--hide-svg\");\n  }\n\n  activeChatHeaderName.textContent = chat.chatName;\n\n  if (!chat.isGroupChat) {\n    if (chat.isUserActive) {\n      activeChatHeaderStatus.classList.remove(\"active-chat-header__chat-status--hide\");\n      activeChatHeaderStatus.textContent = \"Active\";\n    } else {\n      let {\n        timeDifferenceFromNow\n      } = await __webpack_require__.e(/*! import() */ \"dev-javascripts_common_calculateTimeDifference_dev_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../../common/calculateTimeDifference.dev */ \"./dev-javascripts/common/calculateTimeDifference.dev.js\"));\n      activeChatHeaderStatus.classList.remove(\"active-chat-header__chat-status--hide\");\n\n      if (chat.hasOwnProperty(\"userLastActive\")) {\n        activeChatHeaderStatus.textContent = `last active ${timeDifferenceFromNow(chat.userLastActive)} ago`;\n      } else {\n        activeChatHeaderStatus.textContent = \"\";\n      }\n    }\n  } else {\n    activeChatHeaderStatus.classList.remove(\"active-chat-header__chat-status--hide\");\n    activeChatHeaderStatus.textContent = \"\";\n  }\n\n  onOffActiveChatInputContainer(chat);\n}\nasync function clearActiveChatMessageContainer() {\n  let activeChatMessageContainer = document.getElementById(\"activeChatMessageContainer\");\n  activeChatMessageContainer.innerHTML = \"\";\n}\nasync function onOffActiveChatInputContainer(chat) {\n  const activeChatInputContainer = document.getElementById(\"activeChatInputContainer\");\n\n  if (chat.hasOwnProperty(\"canSendMessageToThisChat\") && chat.canSendMessageToThisChat === false) {\n    activeChatInputContainer.classList.add(\"active-chat-input-container--disable\");\n    activeChatInputContainer.classList.remove(\"active-chat-input-container--enable\");\n  } else {\n    activeChatInputContainer.classList.add(\"active-chat-input-container--enable\");\n    activeChatInputContainer.classList.remove(\"active-chat-input-container--disable\");\n  }\n}\n\nfunction initializeUserMessageBoxObserver() {\n  USER_MESSAGE_BOX_OBSERVER = new IntersectionObserver(async (entries, observer) => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting === true) {\n        let messageId = entry.target.dataset.messageId;\n        socket.emit(\"chat:update-message-seen-status\", {\n          messageId: messageId\n        });\n        observer.unobserve(entry.target);\n      }\n    });\n  }, {\n    threshold: 0.5,\n    root: activeChatMessageContainer\n  });\n} // function initializeTopUserMessageBoxObserver() {\n//   TOP_USER_MESSAGE_BOX_OBSERVER = new IntersectionObserver(\n//     async (entries, observer) => {\n//       entries.forEach(entry => {\n//         if (entry.isIntersecting === true) {\n//           fetch(`/message/fetch-messages/${chat._id}?skipMessagesCount=${}`)\n//     .then(response => {\n//       if (response.ok) {\n//         return response.json()\n//       }\n//       return Promise.reject(response)\n//     })\n//     .then(async data => {\n//       if (data.isSuccess) {\n//         activeChatMessageContainer.innerHTML = \"\"\n//         console.log(data)\n//         skipskipMessagesCount = data.allMessages.length\n//         let unseenMessages = data.allMessages.slice(0, data.unseenMessagesCount)\n//         let seenMessages = data.allMessages.slice(data.unseenMessagesCount)\n//         console.log(\n//           \"unseenMessages:\",\n//           unseenMessages,\n//           \"seenMessages:\",\n//           seenMessages\n//         )\n//         await checkTimeAndCreateOldMessage(\n//           seenMessages,\n//           activeChatMessageContainer,\n//           true\n//         )\n//         if (unseenMessages.length > 0) {\n//           const { checkTimeAndCreateNewMessage } = await import(\"./message.dev\")\n//           const { createUnseenMessageTagBox } = await import(\"./message.dev\")\n//           createUnseenMessageTagBox(\n//             unseenMessages.length,\n//             activeChatMessageContainer,\n//             \"beforeend\",\n//             false\n//           )\n//           for (let i = unseenMessages.length - 1; i >= 0; i--) {\n//             await checkTimeAndCreateNewMessage(\n//               unseenMessages[i],\n//               activeChatMessageContainer,\n//               false\n//             )\n//           }\n//           let unseenMessageTagBox =\n//             activeChatMessageContainer.getElementsByClassName(\n//               \"active-chat-unseen-message-tag-box\"\n//             )[0]\n//           if (unseenMessageTagBox) {\n//             activeChatMessageContainer.scrollTop = unseenMessageTagBox.offsetTop\n//             // unseenMessageTagBox.scrollIntoView({\n//             //   behavior: \"smooth\",\n//             //   block: \"end\",\n//             //   inline: \"nearest\"\n//             // })\n//           }\n//         }\n//         let { adjustMessageContainerBottomPadding } = await import(\n//           \"../chat.dev\"\n//         )\n//         adjustMessageContainerBottomPadding()\n//       } else {\n//         let { createMainNotification } = await import(\n//           \"../../common/mainNotification.dev\"\n//         )\n//         createMainNotification(data.error, \"error\")\n//       }\n//     })\n//     .catch(async err => {\n//       console.log(err)\n//       let { createMainNotification } = await import(\n//         \"../../common/mainNotification.dev\"\n//       )\n//       createMainNotification(\n//         \"Server Error In Accessing Messages, Please Refresh Your Page\",\n//         \"error\"\n//       )\n//     })\n//           observer.unobserve(entry.target)\n//         }\n//       })\n//     },\n//     { threshold: 0.5, root: activeChatMessageContainer }\n//   )\n// }\n// async function fetchMessageAndCreateUserMessageBox(chatId){\n//   fetch(`/message/fetch-messages/${chatId}?skipMessagesCount=${SKIP_MESSAGES_COUNT}`)\n//     .then(response => {\n//       if (response.ok) {\n//         return response.json()\n//       }\n//       return Promise.reject(response)\n//     })\n//     .then(async data => {\n//       if (data.isSuccess) {\n//         SKIP_MESSAGES_COUNT = data.allMessages.length\n//         let unseenMessages = data.allMessages.slice(0, data.unseenMessagesCount)\n//         let seenMessages = data.allMessages.slice(data.unseenMessagesCount)\n//         console.log(\n//           \"unseenMessages:\",\n//           unseenMessages,\n//           \"seenMessages:\",\n//           seenMessages\n//         )\n//         await checkTimeAndCreateOldMessage(\n//           seenMessages,\n//           activeChatMessageContainer,\n//           true\n//         )\n//         if (unseenMessages.length > 0) {\n//           const { checkTimeAndCreateNewMessage } = await import(\"./message.dev\")\n//           const { createUnseenMessageTagBox } = await import(\"./message.dev\")\n//           createUnseenMessageTagBox(\n//             unseenMessages.length,\n//             activeChatMessageContainer,\n//             \"beforeend\",\n//             false\n//           )\n//           for (let i = unseenMessages.length - 1; i >= 0; i--) {\n//             await checkTimeAndCreateNewMessage(\n//               unseenMessages[i],\n//               activeChatMessageContainer,\n//               false\n//             )\n//           }\n//           let unseenMessageTagBox =\n//             activeChatMessageContainer.getElementsByClassName(\n//               \"active-chat-unseen-message-tag-box\"\n//             )[0]\n//           if (unseenMessageTagBox) {\n//             activeChatMessageContainer.scrollTop = unseenMessageTagBox.offsetTop\n//             // unseenMessageTagBox.scrollIntoView({\n//             //   behavior: \"smooth\",\n//             //   block: \"end\",\n//             //   inline: \"nearest\"\n//             // })\n//           }\n//         }\n//         let { adjustMessageContainerBottomPadding } = await import(\n//           \"../chat.dev\"\n//         )\n//         adjustMessageContainerBottomPadding()\n//       } else {\n//         let { createMainNotification } = await import(\n//           \"../../common/mainNotification.dev\"\n//         )\n//         createMainNotification(data.error, \"error\")\n//       }\n//     })\n//     .catch(async err => {\n//       console.log(err)\n//       let { createMainNotification } = await import(\n//         \"../../common/mainNotification.dev\"\n//       )\n//       createMainNotification(\n//         \"Server Error In Accessing Messages, Please Refresh Your Page\",\n//         \"error\"\n//       )\n//     })\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./dev-javascripts/chat/js/showActiveChatSection.dev.js\n");

/***/ })

}]);