"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkfrontend"] = self["webpackChunkfrontend"] || []).push([["dev-javascripts_call_js_calltypeInfoContainer_dev_js"],{

/***/ "./dev-javascripts/call/js/calltypeInfoContainer.dev.js":
/*!**************************************************************!*\
  !*** ./dev-javascripts/call/js/calltypeInfoContainer.dev.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createCalltypeInfoContainer\": () => (/* binding */ createCalltypeInfoContainer),\n/* harmony export */   \"showCalltypeMessage\": () => (/* binding */ showCalltypeMessage)\n/* harmony export */ });\nlet svg_callPermissionLockIcon = `\n<svg width=\"80\" height=\"100\" viewBox=\"0 0 80 100\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M73.1429 38.8889H62.8571V25.5556C62.8571 9.46111 55.2286 0 40 0C24.7657 0 17.1429 9.46111 17.1429 25.5556V38.8889H5.71429C2.55429 38.8889 0 42.4778 0 45.55V88.8889C0 91.9389 2.44571 95.2167 5.43429 96.15L12.2743 98.3C15.9023 99.3282 19.651 99.8995 23.4286 100H56.5714C60.3476 99.9003 64.0948 99.3271 67.72 98.2944L74.5543 96.1444C77.5486 95.2167 80 91.9389 80 88.8889V45.55C80 42.4778 76.2971 38.8889 73.1429 38.8889ZM51.4286 38.8889H28.5714V23.3278C28.5714 15.3 33.1257 11.1111 40 11.1111C46.8743 11.1111 51.4286 15.3 51.4286 23.3278V38.8889Z\" />\n</svg>\n`;\nlet calltypeInfoContainer = document.getElementById(\"calltypeInfoContainer\");\nlet calltypeInfo = document.getElementById(\"calltypeInfo\");\nlet calltypeInfoPreview = document.getElementById(\"calltypeInfoPreview\");\nlet calltypeInfoBtnContainer = document.getElementById(\"calltypeInfoBtnContainer\");\nlet calltypeMessage = document.getElementById(\"calltypeMessage\");\nlet calltypeMessageReloadBtn = document.getElementById(\"calltypeMessageReloadBtn\");\nlet myMediaStream;\nlet myStreamTypeData;\nfunction createCalltypeInfoContainer(stream, streamTypeData) {\n  myMediaStream = stream;\n  myStreamTypeData = streamTypeData;\n  let video = document.createElement(\"video\");\n  video.muted = true;\n  video.srcObject = myMediaStream;\n  video.addEventListener(\"loadedmetadata\", () => {\n    video.play();\n  });\n  calltypeInfoPreview.insertAdjacentElement(\"beforeend\", video);\n  initialiseEventForCalltypeInfoContainer();\n}\n\nfunction initialiseEventForCalltypeInfoContainer() {\n  if (calltypeMessageReloadBtn) {\n    calltypeMessageReloadBtn.addEventListener(\"click\", () => {\n      location.reload();\n    });\n  }\n\n  calltypeInfoBtnContainer.addEventListener(\"click\", async e => {\n    let calltypeInfoBtn = e.target.closest(`.calltype-info-btn`);\n\n    if (calltypeInfoBtn && calltypeInfoBtnContainer.contains(calltypeInfoBtn)) {\n      if (calltypeInfoBtn.dataset.btnType === \"video\") {\n        if (myStreamTypeData.isScreenShareOn === false) {\n          if (calltypeInfoBtn.dataset.btnWorkingState === \"video-on\") {\n            let {\n              getCameraVideoTrack\n            } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../call.dev */ \"./dev-javascripts/call/call.dev.js\"));\n            let cameraVideoTrack = await getCameraVideoTrack();\n\n            if (cameraVideoTrack) {\n              let videoTracks = myMediaStream.getVideoTracks();\n              videoTracks.forEach(track => {\n                track.stop();\n                myMediaStream.removeTrack(track);\n              });\n              myMediaStream.addTrack(cameraVideoTrack);\n              calltypeInfoBtn.classList.remove(\"calltype-info-btn--selected\");\n              calltypeInfoBtn.classList.add(\"calltype-info-btn--unselected\");\n              calltypeInfoPreview.classList.remove(\"calltype-info__preview--video-off\");\n              calltypeInfoPreview.classList.add(\"calltype-info__preview--camera\");\n              calltypeInfoBtn.dataset.btnWorkingState = \"video-off\";\n              myStreamTypeData.isCameraOn = true;\n            }\n          } else if (calltypeInfoBtn.dataset.btnWorkingState === \"video-off\") {\n            let videoTracks = myMediaStream.getVideoTracks();\n            videoTracks.forEach(track => {\n              track.stop();\n            });\n            calltypeInfoBtn.classList.add(\"calltype-info-btn--selected\");\n            calltypeInfoBtn.classList.remove(\"calltype-info-btn--unselected\");\n            calltypeInfoPreview.classList.add(\"calltype-info__preview--video-off\");\n            calltypeInfoPreview.classList.remove(\"calltype-info__preview--camera\");\n            calltypeInfoBtn.dataset.btnWorkingState = \"video-on\";\n            myStreamTypeData.isCameraOn = false;\n          }\n        }\n      }\n\n      if (calltypeInfoBtn.dataset.btnType === \"audio\") {\n        if (calltypeInfoBtn.dataset.btnWorkingState === \"audio-on\") {\n          let {\n            getCallAudioTrack\n          } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../call.dev */ \"./dev-javascripts/call/call.dev.js\"));\n          let callAudioTrack = await getCallAudioTrack();\n\n          if (callAudioTrack) {\n            let audioTracks = myMediaStream.getAudioTracks();\n            audioTracks.forEach(track => {\n              track.stop();\n              myMediaStream.removeTrack(track);\n            });\n            myMediaStream.addTrack(callAudioTrack);\n            calltypeInfoBtn.classList.remove(\"calltype-info-btn--selected\");\n            calltypeInfoBtn.classList.add(\"calltype-info-btn--unselected\");\n            calltypeInfoPreview.classList.remove(\"calltype-info__preview--audio-off\");\n            calltypeInfoBtn.dataset.btnWorkingState = \"audio-off\";\n            myStreamTypeData.isAudioOn = true;\n          }\n        } else if (calltypeInfoBtn.dataset.btnWorkingState === \"audio-off\") {\n          let audioTracks = myMediaStream.getAudioTracks();\n          audioTracks.forEach(track => {\n            track.stop();\n          });\n          calltypeInfoBtn.classList.add(\"calltype-info-btn--selected\");\n          calltypeInfoBtn.classList.remove(\"calltype-info-btn--unselected\");\n          calltypeInfoPreview.classList.add(\"calltype-info__preview--audio-off\");\n          calltypeInfoBtn.dataset.btnWorkingState = \"audio-on\";\n          myStreamTypeData.isAudioOn = false;\n        }\n      }\n\n      if (calltypeInfoBtn.dataset.btnType === \"share-screen\") {\n        if (calltypeInfoBtn.dataset.btnWorkingState === \"share-screen-on\") {\n          let {\n            getScreenShareVideoTrack\n          } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../call.dev */ \"./dev-javascripts/call/call.dev.js\"));\n          let screenShareVideoTrack = await getScreenShareVideoTrack();\n\n          if (screenShareVideoTrack) {\n            let videoTracks = myMediaStream.getVideoTracks();\n            videoTracks.forEach(track => {\n              track.stop();\n              myMediaStream.removeTrack(track);\n            });\n            myMediaStream.addTrack(screenShareVideoTrack);\n            calltypeInfoBtn.classList.add(\"calltype-info-btn--selected\");\n            calltypeInfoBtn.classList.remove(\"calltype-info-btn--unselected\");\n            if (calltypeInfoPreview.classList.contains(\"calltype-info__preview--video-off\")) calltypeInfoPreview.classList.remove(\"calltype-info__preview--video-off\");\n            if (calltypeInfoPreview.classList.contains(\"calltype-info__preview--camera\")) calltypeInfoPreview.classList.remove(\"calltype-info__preview--camera\");\n            calltypeInfoBtn.dataset.btnWorkingState = \"share-screen-off\";\n            myStreamTypeData.isScreenShareOn = true;\n\n            screenShareVideoTrack.onended = async () => {\n              let videoTracks = myMediaStream.getVideoTracks();\n              videoTracks.forEach(track => {\n                track.stop();\n                myMediaStream.removeTrack(track);\n              });\n              if (!calltypeInfoPreview.classList.contains(\"calltype-info__preview--camera\")) calltypeInfoPreview.classList.add(\"calltype-info__preview--camera\");\n\n              if (myStreamTypeData.isCameraOn) {\n                let {\n                  getCameraVideoTrack\n                } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../call.dev */ \"./dev-javascripts/call/call.dev.js\"));\n                let cameraVideoTrack = await getCameraVideoTrack();\n\n                if (cameraVideoTrack) {\n                  myMediaStream.addTrack(cameraVideoTrack);\n                }\n              } else {\n                if (!calltypeInfoPreview.classList.contains(\"calltype-info__preview--video-off\")) calltypeInfoPreview.classList.add(\"calltype-info__preview--video-off\");\n              }\n\n              if (calltypeInfoBtn.dataset.btnWorkingState === \"share-screen-off\") {\n                calltypeInfoBtn.classList.remove(\"calltype-info-btn--selected\");\n                calltypeInfoBtn.classList.add(\"calltype-info-btn--unselected\");\n                calltypeInfoBtn.dataset.btnWorkingState = \"share-screen-on\";\n                myStreamTypeData.isScreenShareOn = false;\n              }\n            };\n          }\n        } else if (calltypeInfoBtn.dataset.btnWorkingState === \"share-screen-off\") {\n          let videoTracks = myMediaStream.getVideoTracks();\n          videoTracks.forEach(track => {\n            track.stop();\n            myMediaStream.removeTrack(track);\n          });\n          if (!calltypeInfoPreview.classList.contains(\"calltype-info__preview--camera\")) calltypeInfoPreview.classList.add(\"calltype-info__preview--camera\");\n\n          if (myStreamTypeData.isCameraOn) {\n            let {\n              getCameraVideoTrack\n            } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../call.dev */ \"./dev-javascripts/call/call.dev.js\"));\n            let cameraVideoTrack = await getCameraVideoTrack();\n\n            if (cameraVideoTrack) {\n              myMediaStream.addTrack(cameraVideoTrack);\n            }\n          } else {\n            if (!calltypeInfoPreview.classList.contains(\"calltype-info__preview--video-off\")) calltypeInfoPreview.classList.add(\"calltype-info__preview--video-off\");\n          }\n\n          calltypeInfoBtn.classList.remove(\"calltype-info-btn--selected\");\n          calltypeInfoBtn.classList.add(\"calltype-info-btn--unselected\");\n          calltypeInfoBtn.dataset.btnWorkingState = \"share-screen-on\";\n          myStreamTypeData.isScreenShareOn = false;\n        }\n      }\n    }\n  });\n}\n\nfunction showCalltypeMessage(title, desc) {\n  calltypeInfo.classList.add(\"calltype-info--hide\");\n  calltypeMessage.classList.remove(\"calltype-message--hide\");\n  document.getElementById(\"calltypeMessageTitle\").textContent = title;\n  document.getElementById(\"calltypeMessageDesc\").innerHTML = desc;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9kZXYtamF2YXNjcmlwdHMvY2FsbC9qcy9jYWxsdHlwZUluZm9Db250YWluZXIuZGV2LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBSUEsMEJBQTBCLEdBQUk7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsQ0FKQTtBQUtBLElBQUlDLHFCQUFxQixHQUFHQyxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsdUJBQXhCLENBQTVCO0FBQ0EsSUFBSUMsWUFBWSxHQUFHRixRQUFRLENBQUNDLGNBQVQsQ0FBd0IsY0FBeEIsQ0FBbkI7QUFDQSxJQUFJRSxtQkFBbUIsR0FBR0gsUUFBUSxDQUFDQyxjQUFULENBQXdCLHFCQUF4QixDQUExQjtBQUNBLElBQUlHLHdCQUF3QixHQUFHSixRQUFRLENBQUNDLGNBQVQsQ0FDN0IsMEJBRDZCLENBQS9CO0FBR0EsSUFBSUksZUFBZSxHQUFHTCxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsaUJBQXhCLENBQXRCO0FBRUEsSUFBSUssd0JBQXdCLEdBQUdOLFFBQVEsQ0FBQ0MsY0FBVCxDQUM3QiwwQkFENkIsQ0FBL0I7QUFJQSxJQUFJTSxhQUFKO0FBQ0EsSUFBSUMsZ0JBQUo7QUFFTyxTQUFTQywyQkFBVCxDQUFxQ0MsTUFBckMsRUFBNkNDLGNBQTdDLEVBQTZEO0VBQ2xFSixhQUFhLEdBQUdHLE1BQWhCO0VBQ0FGLGdCQUFnQixHQUFHRyxjQUFuQjtFQUVBLElBQUlDLEtBQUssR0FBR1osUUFBUSxDQUFDYSxhQUFULENBQXVCLE9BQXZCLENBQVo7RUFDQUQsS0FBSyxDQUFDRSxLQUFOLEdBQWMsSUFBZDtFQUVBRixLQUFLLENBQUNHLFNBQU4sR0FBa0JSLGFBQWxCO0VBQ0FLLEtBQUssQ0FBQ0ksZ0JBQU4sQ0FBdUIsZ0JBQXZCLEVBQXlDLE1BQU07SUFDN0NKLEtBQUssQ0FBQ0ssSUFBTjtFQUNELENBRkQ7RUFJQWQsbUJBQW1CLENBQUNlLHFCQUFwQixDQUEwQyxXQUExQyxFQUF1RE4sS0FBdkQ7RUFFQU8sdUNBQXVDO0FBQ3hDOztBQUVELFNBQVNBLHVDQUFULEdBQW1EO0VBQ2pELElBQUliLHdCQUFKLEVBQThCO0lBQzVCQSx3QkFBd0IsQ0FBQ1UsZ0JBQXpCLENBQTBDLE9BQTFDLEVBQW1ELE1BQU07TUFDdkRJLFFBQVEsQ0FBQ0MsTUFBVDtJQUNELENBRkQ7RUFHRDs7RUFFRGpCLHdCQUF3QixDQUFDWSxnQkFBekIsQ0FBMEMsT0FBMUMsRUFBbUQsTUFBTU0sQ0FBTixJQUFXO0lBQzVELElBQUlDLGVBQWUsR0FBR0QsQ0FBQyxDQUFDRSxNQUFGLENBQVNDLE9BQVQsQ0FBa0Isb0JBQWxCLENBQXRCOztJQUNBLElBQUlGLGVBQWUsSUFBSW5CLHdCQUF3QixDQUFDc0IsUUFBekIsQ0FBa0NILGVBQWxDLENBQXZCLEVBQTJFO01BQ3pFLElBQUlBLGVBQWUsQ0FBQ0ksT0FBaEIsQ0FBd0JDLE9BQXhCLEtBQW9DLE9BQXhDLEVBQWlEO1FBQy9DLElBQUlwQixnQkFBZ0IsQ0FBQ3FCLGVBQWpCLEtBQXFDLEtBQXpDLEVBQWdEO1VBQzlDLElBQUlOLGVBQWUsQ0FBQ0ksT0FBaEIsQ0FBd0JHLGVBQXhCLEtBQTRDLFVBQWhELEVBQTREO1lBQzFELElBQUk7Y0FBRUM7WUFBRixJQUEwQixNQUFNLDZJQUFwQztZQUNBLElBQUlDLGdCQUFnQixHQUFHLE1BQU1ELG1CQUFtQixFQUFoRDs7WUFFQSxJQUFJQyxnQkFBSixFQUFzQjtjQUNwQixJQUFJQyxXQUFXLEdBQUcxQixhQUFhLENBQUMyQixjQUFkLEVBQWxCO2NBQ0FELFdBQVcsQ0FBQ0UsT0FBWixDQUFvQkMsS0FBSyxJQUFJO2dCQUMzQkEsS0FBSyxDQUFDQyxJQUFOO2dCQUNBOUIsYUFBYSxDQUFDK0IsV0FBZCxDQUEwQkYsS0FBMUI7Y0FDRCxDQUhEO2NBSUE3QixhQUFhLENBQUNnQyxRQUFkLENBQXVCUCxnQkFBdkI7Y0FFQVQsZUFBZSxDQUFDaUIsU0FBaEIsQ0FBMEJDLE1BQTFCLENBQWlDLDZCQUFqQztjQUNBbEIsZUFBZSxDQUFDaUIsU0FBaEIsQ0FBMEJFLEdBQTFCLENBQThCLCtCQUE5QjtjQUNBdkMsbUJBQW1CLENBQUNxQyxTQUFwQixDQUE4QkMsTUFBOUIsQ0FDRSxtQ0FERjtjQUdBdEMsbUJBQW1CLENBQUNxQyxTQUFwQixDQUE4QkUsR0FBOUIsQ0FDRSxnQ0FERjtjQUlBbkIsZUFBZSxDQUFDSSxPQUFoQixDQUF3QkcsZUFBeEIsR0FBMEMsV0FBMUM7Y0FDQXRCLGdCQUFnQixDQUFDbUMsVUFBakIsR0FBOEIsSUFBOUI7WUFDRDtVQUNGLENBeEJELE1Bd0JPLElBQUlwQixlQUFlLENBQUNJLE9BQWhCLENBQXdCRyxlQUF4QixLQUE0QyxXQUFoRCxFQUE2RDtZQUNsRSxJQUFJRyxXQUFXLEdBQUcxQixhQUFhLENBQUMyQixjQUFkLEVBQWxCO1lBQ0FELFdBQVcsQ0FBQ0UsT0FBWixDQUFvQkMsS0FBSyxJQUFJO2NBQzNCQSxLQUFLLENBQUNDLElBQU47WUFDRCxDQUZEO1lBSUFkLGVBQWUsQ0FBQ2lCLFNBQWhCLENBQTBCRSxHQUExQixDQUE4Qiw2QkFBOUI7WUFDQW5CLGVBQWUsQ0FBQ2lCLFNBQWhCLENBQTBCQyxNQUExQixDQUFpQywrQkFBakM7WUFDQXRDLG1CQUFtQixDQUFDcUMsU0FBcEIsQ0FBOEJFLEdBQTlCLENBQ0UsbUNBREY7WUFHQXZDLG1CQUFtQixDQUFDcUMsU0FBcEIsQ0FBOEJDLE1BQTlCLENBQ0UsZ0NBREY7WUFHQWxCLGVBQWUsQ0FBQ0ksT0FBaEIsQ0FBd0JHLGVBQXhCLEdBQTBDLFVBQTFDO1lBQ0F0QixnQkFBZ0IsQ0FBQ21DLFVBQWpCLEdBQThCLEtBQTlCO1VBQ0Q7UUFDRjtNQUNGOztNQUNELElBQUlwQixlQUFlLENBQUNJLE9BQWhCLENBQXdCQyxPQUF4QixLQUFvQyxPQUF4QyxFQUFpRDtRQUMvQyxJQUFJTCxlQUFlLENBQUNJLE9BQWhCLENBQXdCRyxlQUF4QixLQUE0QyxVQUFoRCxFQUE0RDtVQUMxRCxJQUFJO1lBQUVjO1VBQUYsSUFBd0IsTUFBTSw2SUFBbEM7VUFDQSxJQUFJQyxjQUFjLEdBQUcsTUFBTUQsaUJBQWlCLEVBQTVDOztVQUVBLElBQUlDLGNBQUosRUFBb0I7WUFDbEIsSUFBSUMsV0FBVyxHQUFHdkMsYUFBYSxDQUFDd0MsY0FBZCxFQUFsQjtZQUNBRCxXQUFXLENBQUNYLE9BQVosQ0FBb0JDLEtBQUssSUFBSTtjQUMzQkEsS0FBSyxDQUFDQyxJQUFOO2NBQ0E5QixhQUFhLENBQUMrQixXQUFkLENBQTBCRixLQUExQjtZQUNELENBSEQ7WUFJQTdCLGFBQWEsQ0FBQ2dDLFFBQWQsQ0FBdUJNLGNBQXZCO1lBRUF0QixlQUFlLENBQUNpQixTQUFoQixDQUEwQkMsTUFBMUIsQ0FBaUMsNkJBQWpDO1lBQ0FsQixlQUFlLENBQUNpQixTQUFoQixDQUEwQkUsR0FBMUIsQ0FBOEIsK0JBQTlCO1lBQ0F2QyxtQkFBbUIsQ0FBQ3FDLFNBQXBCLENBQThCQyxNQUE5QixDQUNFLG1DQURGO1lBR0FsQixlQUFlLENBQUNJLE9BQWhCLENBQXdCRyxlQUF4QixHQUEwQyxXQUExQztZQUVBdEIsZ0JBQWdCLENBQUN3QyxTQUFqQixHQUE2QixJQUE3QjtVQUNEO1FBQ0YsQ0FyQkQsTUFxQk8sSUFBSXpCLGVBQWUsQ0FBQ0ksT0FBaEIsQ0FBd0JHLGVBQXhCLEtBQTRDLFdBQWhELEVBQTZEO1VBQ2xFLElBQUlnQixXQUFXLEdBQUd2QyxhQUFhLENBQUN3QyxjQUFkLEVBQWxCO1VBQ0FELFdBQVcsQ0FBQ1gsT0FBWixDQUFvQkMsS0FBSyxJQUFJO1lBQzNCQSxLQUFLLENBQUNDLElBQU47VUFDRCxDQUZEO1VBR0FkLGVBQWUsQ0FBQ2lCLFNBQWhCLENBQTBCRSxHQUExQixDQUE4Qiw2QkFBOUI7VUFDQW5CLGVBQWUsQ0FBQ2lCLFNBQWhCLENBQTBCQyxNQUExQixDQUFpQywrQkFBakM7VUFDQXRDLG1CQUFtQixDQUFDcUMsU0FBcEIsQ0FBOEJFLEdBQTlCLENBQWtDLG1DQUFsQztVQUNBbkIsZUFBZSxDQUFDSSxPQUFoQixDQUF3QkcsZUFBeEIsR0FBMEMsVUFBMUM7VUFDQXRCLGdCQUFnQixDQUFDd0MsU0FBakIsR0FBNkIsS0FBN0I7UUFDRDtNQUNGOztNQUNELElBQUl6QixlQUFlLENBQUNJLE9BQWhCLENBQXdCQyxPQUF4QixLQUFvQyxjQUF4QyxFQUF3RDtRQUN0RCxJQUFJTCxlQUFlLENBQUNJLE9BQWhCLENBQXdCRyxlQUF4QixLQUE0QyxpQkFBaEQsRUFBbUU7VUFDakUsSUFBSTtZQUFFbUI7VUFBRixJQUErQixNQUFNLDZJQUF6QztVQUNBLElBQUlDLHFCQUFxQixHQUFHLE1BQU1ELHdCQUF3QixFQUExRDs7VUFFQSxJQUFJQyxxQkFBSixFQUEyQjtZQUN6QixJQUFJakIsV0FBVyxHQUFHMUIsYUFBYSxDQUFDMkIsY0FBZCxFQUFsQjtZQUNBRCxXQUFXLENBQUNFLE9BQVosQ0FBb0JDLEtBQUssSUFBSTtjQUMzQkEsS0FBSyxDQUFDQyxJQUFOO2NBQ0E5QixhQUFhLENBQUMrQixXQUFkLENBQTBCRixLQUExQjtZQUNELENBSEQ7WUFJQTdCLGFBQWEsQ0FBQ2dDLFFBQWQsQ0FBdUJXLHFCQUF2QjtZQUVBM0IsZUFBZSxDQUFDaUIsU0FBaEIsQ0FBMEJFLEdBQTFCLENBQThCLDZCQUE5QjtZQUNBbkIsZUFBZSxDQUFDaUIsU0FBaEIsQ0FBMEJDLE1BQTFCLENBQWlDLCtCQUFqQztZQUNBLElBQ0V0QyxtQkFBbUIsQ0FBQ3FDLFNBQXBCLENBQThCZCxRQUE5QixDQUNFLG1DQURGLENBREYsRUFLRXZCLG1CQUFtQixDQUFDcUMsU0FBcEIsQ0FBOEJDLE1BQTlCLENBQ0UsbUNBREY7WUFHRixJQUNFdEMsbUJBQW1CLENBQUNxQyxTQUFwQixDQUE4QmQsUUFBOUIsQ0FDRSxnQ0FERixDQURGLEVBS0V2QixtQkFBbUIsQ0FBQ3FDLFNBQXBCLENBQThCQyxNQUE5QixDQUNFLGdDQURGO1lBR0ZsQixlQUFlLENBQUNJLE9BQWhCLENBQXdCRyxlQUF4QixHQUEwQyxrQkFBMUM7WUFFQXRCLGdCQUFnQixDQUFDcUIsZUFBakIsR0FBbUMsSUFBbkM7O1lBRUFxQixxQkFBcUIsQ0FBQ0MsT0FBdEIsR0FBZ0MsWUFBWTtjQUMxQyxJQUFJbEIsV0FBVyxHQUFHMUIsYUFBYSxDQUFDMkIsY0FBZCxFQUFsQjtjQUNBRCxXQUFXLENBQUNFLE9BQVosQ0FBb0JDLEtBQUssSUFBSTtnQkFDM0JBLEtBQUssQ0FBQ0MsSUFBTjtnQkFDQTlCLGFBQWEsQ0FBQytCLFdBQWQsQ0FBMEJGLEtBQTFCO2NBQ0QsQ0FIRDtjQUtBLElBQ0UsQ0FBQ2pDLG1CQUFtQixDQUFDcUMsU0FBcEIsQ0FBOEJkLFFBQTlCLENBQ0MsZ0NBREQsQ0FESCxFQUtFdkIsbUJBQW1CLENBQUNxQyxTQUFwQixDQUE4QkUsR0FBOUIsQ0FDRSxnQ0FERjs7Y0FJRixJQUFJbEMsZ0JBQWdCLENBQUNtQyxVQUFyQixFQUFpQztnQkFDL0IsSUFBSTtrQkFBRVo7Z0JBQUYsSUFBMEIsTUFBTSw2SUFBcEM7Z0JBQ0EsSUFBSUMsZ0JBQWdCLEdBQUcsTUFBTUQsbUJBQW1CLEVBQWhEOztnQkFFQSxJQUFJQyxnQkFBSixFQUFzQjtrQkFDcEJ6QixhQUFhLENBQUNnQyxRQUFkLENBQXVCUCxnQkFBdkI7Z0JBQ0Q7Y0FDRixDQVBELE1BT087Z0JBQ0wsSUFDRSxDQUFDN0IsbUJBQW1CLENBQUNxQyxTQUFwQixDQUE4QmQsUUFBOUIsQ0FDQyxtQ0FERCxDQURILEVBS0V2QixtQkFBbUIsQ0FBQ3FDLFNBQXBCLENBQThCRSxHQUE5QixDQUNFLG1DQURGO2NBR0g7O2NBQ0QsSUFDRW5CLGVBQWUsQ0FBQ0ksT0FBaEIsQ0FBd0JHLGVBQXhCLEtBQTRDLGtCQUQ5QyxFQUVFO2dCQUNBUCxlQUFlLENBQUNpQixTQUFoQixDQUEwQkMsTUFBMUIsQ0FBaUMsNkJBQWpDO2dCQUNBbEIsZUFBZSxDQUFDaUIsU0FBaEIsQ0FBMEJFLEdBQTFCLENBQThCLCtCQUE5QjtnQkFFQW5CLGVBQWUsQ0FBQ0ksT0FBaEIsQ0FBd0JHLGVBQXhCLEdBQTBDLGlCQUExQztnQkFDQXRCLGdCQUFnQixDQUFDcUIsZUFBakIsR0FBbUMsS0FBbkM7Y0FDRDtZQUNGLENBMUNEO1VBMkNEO1FBQ0YsQ0E5RUQsTUE4RU8sSUFDTE4sZUFBZSxDQUFDSSxPQUFoQixDQUF3QkcsZUFBeEIsS0FBNEMsa0JBRHZDLEVBRUw7VUFDQSxJQUFJRyxXQUFXLEdBQUcxQixhQUFhLENBQUMyQixjQUFkLEVBQWxCO1VBQ0FELFdBQVcsQ0FBQ0UsT0FBWixDQUFvQkMsS0FBSyxJQUFJO1lBQzNCQSxLQUFLLENBQUNDLElBQU47WUFDQTlCLGFBQWEsQ0FBQytCLFdBQWQsQ0FBMEJGLEtBQTFCO1VBQ0QsQ0FIRDtVQUlBLElBQ0UsQ0FBQ2pDLG1CQUFtQixDQUFDcUMsU0FBcEIsQ0FBOEJkLFFBQTlCLENBQ0MsZ0NBREQsQ0FESCxFQUtFdkIsbUJBQW1CLENBQUNxQyxTQUFwQixDQUE4QkUsR0FBOUIsQ0FBa0MsZ0NBQWxDOztVQUVGLElBQUlsQyxnQkFBZ0IsQ0FBQ21DLFVBQXJCLEVBQWlDO1lBQy9CLElBQUk7Y0FBRVo7WUFBRixJQUEwQixNQUFNLDZJQUFwQztZQUNBLElBQUlDLGdCQUFnQixHQUFHLE1BQU1ELG1CQUFtQixFQUFoRDs7WUFFQSxJQUFJQyxnQkFBSixFQUFzQjtjQUNwQnpCLGFBQWEsQ0FBQ2dDLFFBQWQsQ0FBdUJQLGdCQUF2QjtZQUNEO1VBQ0YsQ0FQRCxNQU9PO1lBQ0wsSUFDRSxDQUFDN0IsbUJBQW1CLENBQUNxQyxTQUFwQixDQUE4QmQsUUFBOUIsQ0FDQyxtQ0FERCxDQURILEVBS0V2QixtQkFBbUIsQ0FBQ3FDLFNBQXBCLENBQThCRSxHQUE5QixDQUNFLG1DQURGO1VBR0g7O1VBQ0RuQixlQUFlLENBQUNpQixTQUFoQixDQUEwQkMsTUFBMUIsQ0FBaUMsNkJBQWpDO1VBQ0FsQixlQUFlLENBQUNpQixTQUFoQixDQUEwQkUsR0FBMUIsQ0FBOEIsK0JBQTlCO1VBRUFuQixlQUFlLENBQUNJLE9BQWhCLENBQXdCRyxlQUF4QixHQUEwQyxpQkFBMUM7VUFDQXRCLGdCQUFnQixDQUFDcUIsZUFBakIsR0FBbUMsS0FBbkM7UUFDRDtNQUNGO0lBQ0Y7RUFDRixDQXpNRDtBQTBNRDs7QUFFTSxTQUFTdUIsbUJBQVQsQ0FBNkJDLEtBQTdCLEVBQW9DQyxJQUFwQyxFQUEwQztFQUMvQ3BELFlBQVksQ0FBQ3NDLFNBQWIsQ0FBdUJFLEdBQXZCLENBQTJCLHFCQUEzQjtFQUNBckMsZUFBZSxDQUFDbUMsU0FBaEIsQ0FBMEJDLE1BQTFCLENBQWlDLHdCQUFqQztFQUVBekMsUUFBUSxDQUFDQyxjQUFULENBQXdCLHNCQUF4QixFQUFnRHNELFdBQWhELEdBQThERixLQUE5RDtFQUNBckQsUUFBUSxDQUFDQyxjQUFULENBQXdCLHFCQUF4QixFQUErQ3VELFNBQS9DLEdBQTJERixJQUEzRDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9kZXYtamF2YXNjcmlwdHMvY2FsbC9qcy9jYWxsdHlwZUluZm9Db250YWluZXIuZGV2LmpzPzAyMjUiXSwic291cmNlc0NvbnRlbnQiOlsibGV0IHN2Z19jYWxsUGVybWlzc2lvbkxvY2tJY29uID0gYFxyXG48c3ZnIHdpZHRoPVwiODBcIiBoZWlnaHQ9XCIxMDBcIiB2aWV3Qm94PVwiMCAwIDgwIDEwMFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cclxuPHBhdGggZD1cIk03My4xNDI5IDM4Ljg4ODlINjIuODU3MVYyNS41NTU2QzYyLjg1NzEgOS40NjExMSA1NS4yMjg2IDAgNDAgMEMyNC43NjU3IDAgMTcuMTQyOSA5LjQ2MTExIDE3LjE0MjkgMjUuNTU1NlYzOC44ODg5SDUuNzE0MjlDMi41NTQyOSAzOC44ODg5IDAgNDIuNDc3OCAwIDQ1LjU1Vjg4Ljg4ODlDMCA5MS45Mzg5IDIuNDQ1NzEgOTUuMjE2NyA1LjQzNDI5IDk2LjE1TDEyLjI3NDMgOTguM0MxNS45MDIzIDk5LjMyODIgMTkuNjUxIDk5Ljg5OTUgMjMuNDI4NiAxMDBINTYuNTcxNEM2MC4zNDc2IDk5LjkwMDMgNjQuMDk0OCA5OS4zMjcxIDY3LjcyIDk4LjI5NDRMNzQuNTU0MyA5Ni4xNDQ0Qzc3LjU0ODYgOTUuMjE2NyA4MCA5MS45Mzg5IDgwIDg4Ljg4ODlWNDUuNTVDODAgNDIuNDc3OCA3Ni4yOTcxIDM4Ljg4ODkgNzMuMTQyOSAzOC44ODg5Wk01MS40Mjg2IDM4Ljg4ODlIMjguNTcxNFYyMy4zMjc4QzI4LjU3MTQgMTUuMyAzMy4xMjU3IDExLjExMTEgNDAgMTEuMTExMUM0Ni44NzQzIDExLjExMTEgNTEuNDI4NiAxNS4zIDUxLjQyODYgMjMuMzI3OFYzOC44ODg5WlwiIC8+XHJcbjwvc3ZnPlxyXG5gXHJcbmxldCBjYWxsdHlwZUluZm9Db250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbGx0eXBlSW5mb0NvbnRhaW5lclwiKVxyXG5sZXQgY2FsbHR5cGVJbmZvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYWxsdHlwZUluZm9cIilcclxubGV0IGNhbGx0eXBlSW5mb1ByZXZpZXcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbGx0eXBlSW5mb1ByZXZpZXdcIilcclxubGV0IGNhbGx0eXBlSW5mb0J0bkNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gIFwiY2FsbHR5cGVJbmZvQnRuQ29udGFpbmVyXCJcclxuKVxyXG5sZXQgY2FsbHR5cGVNZXNzYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYWxsdHlwZU1lc3NhZ2VcIilcclxuXHJcbmxldCBjYWxsdHlwZU1lc3NhZ2VSZWxvYWRCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcclxuICBcImNhbGx0eXBlTWVzc2FnZVJlbG9hZEJ0blwiXHJcbilcclxuXHJcbmxldCBteU1lZGlhU3RyZWFtXHJcbmxldCBteVN0cmVhbVR5cGVEYXRhXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2FsbHR5cGVJbmZvQ29udGFpbmVyKHN0cmVhbSwgc3RyZWFtVHlwZURhdGEpIHtcclxuICBteU1lZGlhU3RyZWFtID0gc3RyZWFtXHJcbiAgbXlTdHJlYW1UeXBlRGF0YSA9IHN0cmVhbVR5cGVEYXRhXHJcblxyXG4gIGxldCB2aWRlbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ2aWRlb1wiKVxyXG4gIHZpZGVvLm11dGVkID0gdHJ1ZVxyXG5cclxuICB2aWRlby5zcmNPYmplY3QgPSBteU1lZGlhU3RyZWFtXHJcbiAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRlZG1ldGFkYXRhXCIsICgpID0+IHtcclxuICAgIHZpZGVvLnBsYXkoKVxyXG4gIH0pXHJcblxyXG4gIGNhbGx0eXBlSW5mb1ByZXZpZXcuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYmVmb3JlZW5kXCIsIHZpZGVvKVxyXG5cclxuICBpbml0aWFsaXNlRXZlbnRGb3JDYWxsdHlwZUluZm9Db250YWluZXIoKVxyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0aWFsaXNlRXZlbnRGb3JDYWxsdHlwZUluZm9Db250YWluZXIoKSB7XHJcbiAgaWYgKGNhbGx0eXBlTWVzc2FnZVJlbG9hZEJ0bikge1xyXG4gICAgY2FsbHR5cGVNZXNzYWdlUmVsb2FkQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIGxvY2F0aW9uLnJlbG9hZCgpXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgY2FsbHR5cGVJbmZvQnRuQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhc3luYyBlID0+IHtcclxuICAgIGxldCBjYWxsdHlwZUluZm9CdG4gPSBlLnRhcmdldC5jbG9zZXN0KGAuY2FsbHR5cGUtaW5mby1idG5gKVxyXG4gICAgaWYgKGNhbGx0eXBlSW5mb0J0biAmJiBjYWxsdHlwZUluZm9CdG5Db250YWluZXIuY29udGFpbnMoY2FsbHR5cGVJbmZvQnRuKSkge1xyXG4gICAgICBpZiAoY2FsbHR5cGVJbmZvQnRuLmRhdGFzZXQuYnRuVHlwZSA9PT0gXCJ2aWRlb1wiKSB7XHJcbiAgICAgICAgaWYgKG15U3RyZWFtVHlwZURhdGEuaXNTY3JlZW5TaGFyZU9uID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgaWYgKGNhbGx0eXBlSW5mb0J0bi5kYXRhc2V0LmJ0bldvcmtpbmdTdGF0ZSA9PT0gXCJ2aWRlby1vblwiKSB7XHJcbiAgICAgICAgICAgIGxldCB7IGdldENhbWVyYVZpZGVvVHJhY2sgfSA9IGF3YWl0IGltcG9ydChcIi4uL2NhbGwuZGV2XCIpXHJcbiAgICAgICAgICAgIGxldCBjYW1lcmFWaWRlb1RyYWNrID0gYXdhaXQgZ2V0Q2FtZXJhVmlkZW9UcmFjaygpXHJcblxyXG4gICAgICAgICAgICBpZiAoY2FtZXJhVmlkZW9UcmFjaykge1xyXG4gICAgICAgICAgICAgIGxldCB2aWRlb1RyYWNrcyA9IG15TWVkaWFTdHJlYW0uZ2V0VmlkZW9UcmFja3MoKVxyXG4gICAgICAgICAgICAgIHZpZGVvVHJhY2tzLmZvckVhY2godHJhY2sgPT4ge1xyXG4gICAgICAgICAgICAgICAgdHJhY2suc3RvcCgpXHJcbiAgICAgICAgICAgICAgICBteU1lZGlhU3RyZWFtLnJlbW92ZVRyYWNrKHRyYWNrKVxyXG4gICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgbXlNZWRpYVN0cmVhbS5hZGRUcmFjayhjYW1lcmFWaWRlb1RyYWNrKVxyXG5cclxuICAgICAgICAgICAgICBjYWxsdHlwZUluZm9CdG4uY2xhc3NMaXN0LnJlbW92ZShcImNhbGx0eXBlLWluZm8tYnRuLS1zZWxlY3RlZFwiKVxyXG4gICAgICAgICAgICAgIGNhbGx0eXBlSW5mb0J0bi5jbGFzc0xpc3QuYWRkKFwiY2FsbHR5cGUtaW5mby1idG4tLXVuc2VsZWN0ZWRcIilcclxuICAgICAgICAgICAgICBjYWxsdHlwZUluZm9QcmV2aWV3LmNsYXNzTGlzdC5yZW1vdmUoXHJcbiAgICAgICAgICAgICAgICBcImNhbGx0eXBlLWluZm9fX3ByZXZpZXctLXZpZGVvLW9mZlwiXHJcbiAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgIGNhbGx0eXBlSW5mb1ByZXZpZXcuY2xhc3NMaXN0LmFkZChcclxuICAgICAgICAgICAgICAgIFwiY2FsbHR5cGUtaW5mb19fcHJldmlldy0tY2FtZXJhXCJcclxuICAgICAgICAgICAgICApXHJcblxyXG4gICAgICAgICAgICAgIGNhbGx0eXBlSW5mb0J0bi5kYXRhc2V0LmJ0bldvcmtpbmdTdGF0ZSA9IFwidmlkZW8tb2ZmXCJcclxuICAgICAgICAgICAgICBteVN0cmVhbVR5cGVEYXRhLmlzQ2FtZXJhT24gPSB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gZWxzZSBpZiAoY2FsbHR5cGVJbmZvQnRuLmRhdGFzZXQuYnRuV29ya2luZ1N0YXRlID09PSBcInZpZGVvLW9mZlwiKSB7XHJcbiAgICAgICAgICAgIGxldCB2aWRlb1RyYWNrcyA9IG15TWVkaWFTdHJlYW0uZ2V0VmlkZW9UcmFja3MoKVxyXG4gICAgICAgICAgICB2aWRlb1RyYWNrcy5mb3JFYWNoKHRyYWNrID0+IHtcclxuICAgICAgICAgICAgICB0cmFjay5zdG9wKClcclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIGNhbGx0eXBlSW5mb0J0bi5jbGFzc0xpc3QuYWRkKFwiY2FsbHR5cGUtaW5mby1idG4tLXNlbGVjdGVkXCIpXHJcbiAgICAgICAgICAgIGNhbGx0eXBlSW5mb0J0bi5jbGFzc0xpc3QucmVtb3ZlKFwiY2FsbHR5cGUtaW5mby1idG4tLXVuc2VsZWN0ZWRcIilcclxuICAgICAgICAgICAgY2FsbHR5cGVJbmZvUHJldmlldy5jbGFzc0xpc3QuYWRkKFxyXG4gICAgICAgICAgICAgIFwiY2FsbHR5cGUtaW5mb19fcHJldmlldy0tdmlkZW8tb2ZmXCJcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICBjYWxsdHlwZUluZm9QcmV2aWV3LmNsYXNzTGlzdC5yZW1vdmUoXHJcbiAgICAgICAgICAgICAgXCJjYWxsdHlwZS1pbmZvX19wcmV2aWV3LS1jYW1lcmFcIlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIGNhbGx0eXBlSW5mb0J0bi5kYXRhc2V0LmJ0bldvcmtpbmdTdGF0ZSA9IFwidmlkZW8tb25cIlxyXG4gICAgICAgICAgICBteVN0cmVhbVR5cGVEYXRhLmlzQ2FtZXJhT24gPSBmYWxzZVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAoY2FsbHR5cGVJbmZvQnRuLmRhdGFzZXQuYnRuVHlwZSA9PT0gXCJhdWRpb1wiKSB7XHJcbiAgICAgICAgaWYgKGNhbGx0eXBlSW5mb0J0bi5kYXRhc2V0LmJ0bldvcmtpbmdTdGF0ZSA9PT0gXCJhdWRpby1vblwiKSB7XHJcbiAgICAgICAgICBsZXQgeyBnZXRDYWxsQXVkaW9UcmFjayB9ID0gYXdhaXQgaW1wb3J0KFwiLi4vY2FsbC5kZXZcIilcclxuICAgICAgICAgIGxldCBjYWxsQXVkaW9UcmFjayA9IGF3YWl0IGdldENhbGxBdWRpb1RyYWNrKClcclxuXHJcbiAgICAgICAgICBpZiAoY2FsbEF1ZGlvVHJhY2spIHtcclxuICAgICAgICAgICAgbGV0IGF1ZGlvVHJhY2tzID0gbXlNZWRpYVN0cmVhbS5nZXRBdWRpb1RyYWNrcygpXHJcbiAgICAgICAgICAgIGF1ZGlvVHJhY2tzLmZvckVhY2godHJhY2sgPT4ge1xyXG4gICAgICAgICAgICAgIHRyYWNrLnN0b3AoKVxyXG4gICAgICAgICAgICAgIG15TWVkaWFTdHJlYW0ucmVtb3ZlVHJhY2sodHJhY2spXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIG15TWVkaWFTdHJlYW0uYWRkVHJhY2soY2FsbEF1ZGlvVHJhY2spXHJcblxyXG4gICAgICAgICAgICBjYWxsdHlwZUluZm9CdG4uY2xhc3NMaXN0LnJlbW92ZShcImNhbGx0eXBlLWluZm8tYnRuLS1zZWxlY3RlZFwiKVxyXG4gICAgICAgICAgICBjYWxsdHlwZUluZm9CdG4uY2xhc3NMaXN0LmFkZChcImNhbGx0eXBlLWluZm8tYnRuLS11bnNlbGVjdGVkXCIpXHJcbiAgICAgICAgICAgIGNhbGx0eXBlSW5mb1ByZXZpZXcuY2xhc3NMaXN0LnJlbW92ZShcclxuICAgICAgICAgICAgICBcImNhbGx0eXBlLWluZm9fX3ByZXZpZXctLWF1ZGlvLW9mZlwiXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgY2FsbHR5cGVJbmZvQnRuLmRhdGFzZXQuYnRuV29ya2luZ1N0YXRlID0gXCJhdWRpby1vZmZcIlxyXG5cclxuICAgICAgICAgICAgbXlTdHJlYW1UeXBlRGF0YS5pc0F1ZGlvT24gPSB0cnVlXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChjYWxsdHlwZUluZm9CdG4uZGF0YXNldC5idG5Xb3JraW5nU3RhdGUgPT09IFwiYXVkaW8tb2ZmXCIpIHtcclxuICAgICAgICAgIGxldCBhdWRpb1RyYWNrcyA9IG15TWVkaWFTdHJlYW0uZ2V0QXVkaW9UcmFja3MoKVxyXG4gICAgICAgICAgYXVkaW9UcmFja3MuZm9yRWFjaCh0cmFjayA9PiB7XHJcbiAgICAgICAgICAgIHRyYWNrLnN0b3AoKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIGNhbGx0eXBlSW5mb0J0bi5jbGFzc0xpc3QuYWRkKFwiY2FsbHR5cGUtaW5mby1idG4tLXNlbGVjdGVkXCIpXHJcbiAgICAgICAgICBjYWxsdHlwZUluZm9CdG4uY2xhc3NMaXN0LnJlbW92ZShcImNhbGx0eXBlLWluZm8tYnRuLS11bnNlbGVjdGVkXCIpXHJcbiAgICAgICAgICBjYWxsdHlwZUluZm9QcmV2aWV3LmNsYXNzTGlzdC5hZGQoXCJjYWxsdHlwZS1pbmZvX19wcmV2aWV3LS1hdWRpby1vZmZcIilcclxuICAgICAgICAgIGNhbGx0eXBlSW5mb0J0bi5kYXRhc2V0LmJ0bldvcmtpbmdTdGF0ZSA9IFwiYXVkaW8tb25cIlxyXG4gICAgICAgICAgbXlTdHJlYW1UeXBlRGF0YS5pc0F1ZGlvT24gPSBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAoY2FsbHR5cGVJbmZvQnRuLmRhdGFzZXQuYnRuVHlwZSA9PT0gXCJzaGFyZS1zY3JlZW5cIikge1xyXG4gICAgICAgIGlmIChjYWxsdHlwZUluZm9CdG4uZGF0YXNldC5idG5Xb3JraW5nU3RhdGUgPT09IFwic2hhcmUtc2NyZWVuLW9uXCIpIHtcclxuICAgICAgICAgIGxldCB7IGdldFNjcmVlblNoYXJlVmlkZW9UcmFjayB9ID0gYXdhaXQgaW1wb3J0KFwiLi4vY2FsbC5kZXZcIilcclxuICAgICAgICAgIGxldCBzY3JlZW5TaGFyZVZpZGVvVHJhY2sgPSBhd2FpdCBnZXRTY3JlZW5TaGFyZVZpZGVvVHJhY2soKVxyXG5cclxuICAgICAgICAgIGlmIChzY3JlZW5TaGFyZVZpZGVvVHJhY2spIHtcclxuICAgICAgICAgICAgbGV0IHZpZGVvVHJhY2tzID0gbXlNZWRpYVN0cmVhbS5nZXRWaWRlb1RyYWNrcygpXHJcbiAgICAgICAgICAgIHZpZGVvVHJhY2tzLmZvckVhY2godHJhY2sgPT4ge1xyXG4gICAgICAgICAgICAgIHRyYWNrLnN0b3AoKVxyXG4gICAgICAgICAgICAgIG15TWVkaWFTdHJlYW0ucmVtb3ZlVHJhY2sodHJhY2spXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIG15TWVkaWFTdHJlYW0uYWRkVHJhY2soc2NyZWVuU2hhcmVWaWRlb1RyYWNrKVxyXG5cclxuICAgICAgICAgICAgY2FsbHR5cGVJbmZvQnRuLmNsYXNzTGlzdC5hZGQoXCJjYWxsdHlwZS1pbmZvLWJ0bi0tc2VsZWN0ZWRcIilcclxuICAgICAgICAgICAgY2FsbHR5cGVJbmZvQnRuLmNsYXNzTGlzdC5yZW1vdmUoXCJjYWxsdHlwZS1pbmZvLWJ0bi0tdW5zZWxlY3RlZFwiKVxyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgY2FsbHR5cGVJbmZvUHJldmlldy5jbGFzc0xpc3QuY29udGFpbnMoXHJcbiAgICAgICAgICAgICAgICBcImNhbGx0eXBlLWluZm9fX3ByZXZpZXctLXZpZGVvLW9mZlwiXHJcbiAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgY2FsbHR5cGVJbmZvUHJldmlldy5jbGFzc0xpc3QucmVtb3ZlKFxyXG4gICAgICAgICAgICAgICAgXCJjYWxsdHlwZS1pbmZvX19wcmV2aWV3LS12aWRlby1vZmZcIlxyXG4gICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgIGNhbGx0eXBlSW5mb1ByZXZpZXcuY2xhc3NMaXN0LmNvbnRhaW5zKFxyXG4gICAgICAgICAgICAgICAgXCJjYWxsdHlwZS1pbmZvX19wcmV2aWV3LS1jYW1lcmFcIlxyXG4gICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgIGNhbGx0eXBlSW5mb1ByZXZpZXcuY2xhc3NMaXN0LnJlbW92ZShcclxuICAgICAgICAgICAgICAgIFwiY2FsbHR5cGUtaW5mb19fcHJldmlldy0tY2FtZXJhXCJcclxuICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgIGNhbGx0eXBlSW5mb0J0bi5kYXRhc2V0LmJ0bldvcmtpbmdTdGF0ZSA9IFwic2hhcmUtc2NyZWVuLW9mZlwiXHJcblxyXG4gICAgICAgICAgICBteVN0cmVhbVR5cGVEYXRhLmlzU2NyZWVuU2hhcmVPbiA9IHRydWVcclxuXHJcbiAgICAgICAgICAgIHNjcmVlblNoYXJlVmlkZW9UcmFjay5vbmVuZGVkID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgIGxldCB2aWRlb1RyYWNrcyA9IG15TWVkaWFTdHJlYW0uZ2V0VmlkZW9UcmFja3MoKVxyXG4gICAgICAgICAgICAgIHZpZGVvVHJhY2tzLmZvckVhY2godHJhY2sgPT4ge1xyXG4gICAgICAgICAgICAgICAgdHJhY2suc3RvcCgpXHJcbiAgICAgICAgICAgICAgICBteU1lZGlhU3RyZWFtLnJlbW92ZVRyYWNrKHRyYWNrKVxyXG4gICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICFjYWxsdHlwZUluZm9QcmV2aWV3LmNsYXNzTGlzdC5jb250YWlucyhcclxuICAgICAgICAgICAgICAgICAgXCJjYWxsdHlwZS1pbmZvX19wcmV2aWV3LS1jYW1lcmFcIlxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIGNhbGx0eXBlSW5mb1ByZXZpZXcuY2xhc3NMaXN0LmFkZChcclxuICAgICAgICAgICAgICAgICAgXCJjYWxsdHlwZS1pbmZvX19wcmV2aWV3LS1jYW1lcmFcIlxyXG4gICAgICAgICAgICAgICAgKVxyXG5cclxuICAgICAgICAgICAgICBpZiAobXlTdHJlYW1UeXBlRGF0YS5pc0NhbWVyYU9uKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgeyBnZXRDYW1lcmFWaWRlb1RyYWNrIH0gPSBhd2FpdCBpbXBvcnQoXCIuLi9jYWxsLmRldlwiKVxyXG4gICAgICAgICAgICAgICAgbGV0IGNhbWVyYVZpZGVvVHJhY2sgPSBhd2FpdCBnZXRDYW1lcmFWaWRlb1RyYWNrKClcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY2FtZXJhVmlkZW9UcmFjaykge1xyXG4gICAgICAgICAgICAgICAgICBteU1lZGlhU3RyZWFtLmFkZFRyYWNrKGNhbWVyYVZpZGVvVHJhY2spXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgIWNhbGx0eXBlSW5mb1ByZXZpZXcuY2xhc3NMaXN0LmNvbnRhaW5zKFxyXG4gICAgICAgICAgICAgICAgICAgIFwiY2FsbHR5cGUtaW5mb19fcHJldmlldy0tdmlkZW8tb2ZmXCJcclxuICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICBjYWxsdHlwZUluZm9QcmV2aWV3LmNsYXNzTGlzdC5hZGQoXHJcbiAgICAgICAgICAgICAgICAgICAgXCJjYWxsdHlwZS1pbmZvX19wcmV2aWV3LS12aWRlby1vZmZcIlxyXG4gICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgIGNhbGx0eXBlSW5mb0J0bi5kYXRhc2V0LmJ0bldvcmtpbmdTdGF0ZSA9PT0gXCJzaGFyZS1zY3JlZW4tb2ZmXCJcclxuICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGNhbGx0eXBlSW5mb0J0bi5jbGFzc0xpc3QucmVtb3ZlKFwiY2FsbHR5cGUtaW5mby1idG4tLXNlbGVjdGVkXCIpXHJcbiAgICAgICAgICAgICAgICBjYWxsdHlwZUluZm9CdG4uY2xhc3NMaXN0LmFkZChcImNhbGx0eXBlLWluZm8tYnRuLS11bnNlbGVjdGVkXCIpXHJcblxyXG4gICAgICAgICAgICAgICAgY2FsbHR5cGVJbmZvQnRuLmRhdGFzZXQuYnRuV29ya2luZ1N0YXRlID0gXCJzaGFyZS1zY3JlZW4tb25cIlxyXG4gICAgICAgICAgICAgICAgbXlTdHJlYW1UeXBlRGF0YS5pc1NjcmVlblNoYXJlT24gPSBmYWxzZVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgICBjYWxsdHlwZUluZm9CdG4uZGF0YXNldC5idG5Xb3JraW5nU3RhdGUgPT09IFwic2hhcmUtc2NyZWVuLW9mZlwiXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBsZXQgdmlkZW9UcmFja3MgPSBteU1lZGlhU3RyZWFtLmdldFZpZGVvVHJhY2tzKClcclxuICAgICAgICAgIHZpZGVvVHJhY2tzLmZvckVhY2godHJhY2sgPT4ge1xyXG4gICAgICAgICAgICB0cmFjay5zdG9wKClcclxuICAgICAgICAgICAgbXlNZWRpYVN0cmVhbS5yZW1vdmVUcmFjayh0cmFjaylcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICFjYWxsdHlwZUluZm9QcmV2aWV3LmNsYXNzTGlzdC5jb250YWlucyhcclxuICAgICAgICAgICAgICBcImNhbGx0eXBlLWluZm9fX3ByZXZpZXctLWNhbWVyYVwiXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgIClcclxuICAgICAgICAgICAgY2FsbHR5cGVJbmZvUHJldmlldy5jbGFzc0xpc3QuYWRkKFwiY2FsbHR5cGUtaW5mb19fcHJldmlldy0tY2FtZXJhXCIpXHJcblxyXG4gICAgICAgICAgaWYgKG15U3RyZWFtVHlwZURhdGEuaXNDYW1lcmFPbikge1xyXG4gICAgICAgICAgICBsZXQgeyBnZXRDYW1lcmFWaWRlb1RyYWNrIH0gPSBhd2FpdCBpbXBvcnQoXCIuLi9jYWxsLmRldlwiKVxyXG4gICAgICAgICAgICBsZXQgY2FtZXJhVmlkZW9UcmFjayA9IGF3YWl0IGdldENhbWVyYVZpZGVvVHJhY2soKVxyXG5cclxuICAgICAgICAgICAgaWYgKGNhbWVyYVZpZGVvVHJhY2spIHtcclxuICAgICAgICAgICAgICBteU1lZGlhU3RyZWFtLmFkZFRyYWNrKGNhbWVyYVZpZGVvVHJhY2spXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAhY2FsbHR5cGVJbmZvUHJldmlldy5jbGFzc0xpc3QuY29udGFpbnMoXHJcbiAgICAgICAgICAgICAgICBcImNhbGx0eXBlLWluZm9fX3ByZXZpZXctLXZpZGVvLW9mZlwiXHJcbiAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgY2FsbHR5cGVJbmZvUHJldmlldy5jbGFzc0xpc3QuYWRkKFxyXG4gICAgICAgICAgICAgICAgXCJjYWxsdHlwZS1pbmZvX19wcmV2aWV3LS12aWRlby1vZmZcIlxyXG4gICAgICAgICAgICAgIClcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNhbGx0eXBlSW5mb0J0bi5jbGFzc0xpc3QucmVtb3ZlKFwiY2FsbHR5cGUtaW5mby1idG4tLXNlbGVjdGVkXCIpXHJcbiAgICAgICAgICBjYWxsdHlwZUluZm9CdG4uY2xhc3NMaXN0LmFkZChcImNhbGx0eXBlLWluZm8tYnRuLS11bnNlbGVjdGVkXCIpXHJcblxyXG4gICAgICAgICAgY2FsbHR5cGVJbmZvQnRuLmRhdGFzZXQuYnRuV29ya2luZ1N0YXRlID0gXCJzaGFyZS1zY3JlZW4tb25cIlxyXG4gICAgICAgICAgbXlTdHJlYW1UeXBlRGF0YS5pc1NjcmVlblNoYXJlT24gPSBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzaG93Q2FsbHR5cGVNZXNzYWdlKHRpdGxlLCBkZXNjKSB7XHJcbiAgY2FsbHR5cGVJbmZvLmNsYXNzTGlzdC5hZGQoXCJjYWxsdHlwZS1pbmZvLS1oaWRlXCIpXHJcbiAgY2FsbHR5cGVNZXNzYWdlLmNsYXNzTGlzdC5yZW1vdmUoXCJjYWxsdHlwZS1tZXNzYWdlLS1oaWRlXCIpXHJcblxyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FsbHR5cGVNZXNzYWdlVGl0bGVcIikudGV4dENvbnRlbnQgPSB0aXRsZVxyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FsbHR5cGVNZXNzYWdlRGVzY1wiKS5pbm5lckhUTUwgPSBkZXNjXHJcbn1cclxuIl0sIm5hbWVzIjpbInN2Z19jYWxsUGVybWlzc2lvbkxvY2tJY29uIiwiY2FsbHR5cGVJbmZvQ29udGFpbmVyIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImNhbGx0eXBlSW5mbyIsImNhbGx0eXBlSW5mb1ByZXZpZXciLCJjYWxsdHlwZUluZm9CdG5Db250YWluZXIiLCJjYWxsdHlwZU1lc3NhZ2UiLCJjYWxsdHlwZU1lc3NhZ2VSZWxvYWRCdG4iLCJteU1lZGlhU3RyZWFtIiwibXlTdHJlYW1UeXBlRGF0YSIsImNyZWF0ZUNhbGx0eXBlSW5mb0NvbnRhaW5lciIsInN0cmVhbSIsInN0cmVhbVR5cGVEYXRhIiwidmlkZW8iLCJjcmVhdGVFbGVtZW50IiwibXV0ZWQiLCJzcmNPYmplY3QiLCJhZGRFdmVudExpc3RlbmVyIiwicGxheSIsImluc2VydEFkamFjZW50RWxlbWVudCIsImluaXRpYWxpc2VFdmVudEZvckNhbGx0eXBlSW5mb0NvbnRhaW5lciIsImxvY2F0aW9uIiwicmVsb2FkIiwiZSIsImNhbGx0eXBlSW5mb0J0biIsInRhcmdldCIsImNsb3Nlc3QiLCJjb250YWlucyIsImRhdGFzZXQiLCJidG5UeXBlIiwiaXNTY3JlZW5TaGFyZU9uIiwiYnRuV29ya2luZ1N0YXRlIiwiZ2V0Q2FtZXJhVmlkZW9UcmFjayIsImNhbWVyYVZpZGVvVHJhY2siLCJ2aWRlb1RyYWNrcyIsImdldFZpZGVvVHJhY2tzIiwiZm9yRWFjaCIsInRyYWNrIiwic3RvcCIsInJlbW92ZVRyYWNrIiwiYWRkVHJhY2siLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhZGQiLCJpc0NhbWVyYU9uIiwiZ2V0Q2FsbEF1ZGlvVHJhY2siLCJjYWxsQXVkaW9UcmFjayIsImF1ZGlvVHJhY2tzIiwiZ2V0QXVkaW9UcmFja3MiLCJpc0F1ZGlvT24iLCJnZXRTY3JlZW5TaGFyZVZpZGVvVHJhY2siLCJzY3JlZW5TaGFyZVZpZGVvVHJhY2siLCJvbmVuZGVkIiwic2hvd0NhbGx0eXBlTWVzc2FnZSIsInRpdGxlIiwiZGVzYyIsInRleHRDb250ZW50IiwiaW5uZXJIVE1MIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./dev-javascripts/call/js/calltypeInfoContainer.dev.js\n");

/***/ })

}]);