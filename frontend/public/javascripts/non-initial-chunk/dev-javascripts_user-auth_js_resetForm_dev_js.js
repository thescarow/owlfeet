"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkfrontend"] = self["webpackChunkfrontend"] || []).push([["dev-javascripts_user-auth_js_resetForm_dev_js"],{

/***/ "./dev-javascripts/user-auth/js/resetForm.dev.js":
/*!*******************************************************!*\
  !*** ./dev-javascripts/user-auth/js/resetForm.dev.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _common_mainNotification_dev__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/mainNotification.dev */ \"./dev-javascripts/common/mainNotification.dev.js\");\n /////////////////////////////////////////////////////////////\n\nconst resetFormContainer = document.getElementById(\"resetFormContainer\");\nconst resetForm = document.getElementById(\"resetForm\");\nconst resetFormPage1 = document.getElementById(\"resetFormPage1\");\nconst resetFormPage2 = document.getElementById(\"resetFormPage2\");\nconst resetFormPage3 = document.getElementById(\"resetFormPage3\"); ////////////////////////////////////////////////////////////////////\n// reset password progress\n\nconst resetProgressInfoStep = document.getElementById(\"resetProgressInfoStep\");\nconst resetProgressInfoStepInfo = document.getElementById(\"resetProgressInfoStepInfo\");\nconst resetProgressBarhighlighter = document.getElementById(\"resetProgressBarhighlighter\"); // mobile page\n\nconst resetMobileNumber = document.getElementById(\"resetMobileNumber\");\nconst resetMobileData = document.getElementById(\"resetMobileData\"); //from otp page\n\nconst sendResetOtpBtn = document.getElementById(\"sendResetOtpBtn\");\nlet sendResetOtpAgainBtn = document.getElementById(\"sendResetOtpAgainBtn\");\nlet resetOtpActivityTimer = document.getElementById(\"resetOtpActivityTimer\");\nlet resetOtpActivityMinute = document.getElementById(\"resetOtpActivityMinute\");\nlet resetOtpActivitySecond = document.getElementById(\"resetOtpActivitySecond\");\nlet resetOtpTimerCounter = 0;\nlet currentResetMobileNumber = 0;\n\nfunction startResetOtpTimer() {\n  sendResetOtpAgainBtn.classList.add(\"otp-activity__btn--disabled\");\n  resetOtpActivityTimer.classList.add(\"otp-activity__timer--show\");\n  resetOtpTimerCounter = 120;\n  let timerId;\n  timerId = setInterval(() => {\n    resetOtpActivityMinute.textContent = \"0\" + Math.floor(resetOtpTimerCounter / 60) + \":\";\n    let seconds = resetOtpTimerCounter % 60;\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n    resetOtpActivitySecond.textContent = seconds;\n    resetOtpTimerCounter--;\n\n    if (resetOtpTimerCounter == 0) {\n      clearInterval(timerId);\n      resetOtpActivityMinute.textContent = \"02:\";\n      resetOtpActivitySecond.textContent = \"00\";\n      sendResetOtpAgainBtn.classList.remove(\"otp-activity__btn--disabled\");\n      resetOtpActivityTimer.classList.remove(\"otp-activity__timer--show\");\n    }\n  }, 1000);\n}\n\nconst mobileValidator = /^[5-9][0-9]{9}$/;\nsendResetOtpBtn.addEventListener(\"click\", () => {\n  if (resetMobileNumber.value.length === 10 && mobileValidator.test(resetMobileNumber.value)) {\n    if (currentResetMobileNumber.toString() !== resetMobileNumber.value.toString()) {\n      currentResetMobileNumber = resetMobileNumber.value;\n      fetch(\"/user-auth/send-reset-password-otp\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          mobile: resetMobileNumber.value\n        })\n      }).then(res => {\n        if (res.ok) {\n          return res.json();\n        } else throw new Error(\"Server Error,Please try again\");\n      }).then(data => {\n        if (data.isSuccess) {\n          startResetOtpTimer();\n          resetFormPage1.style.left = \"-150%\";\n          resetFormPage2.style.left = \"0%\";\n          resetForm.scrollTop = 0;\n          resetMobileData.textContent = resetMobileNumber.value;\n          resetProgressBarhighlighter.style.width = \"66%\";\n          resetProgressInfoStepInfo.textContent = \"OTP\";\n          resetProgressInfoStep.textContent = \"STEP: 2 OF 3\";\n          (0,_common_mainNotification_dev__WEBPACK_IMPORTED_MODULE_0__.createMainNotification)(\"Otp send Successfully,Please check your inbox\", \"success\");\n        } else {\n          (0,_common_mainNotification_dev__WEBPACK_IMPORTED_MODULE_0__.createMainNotification)(data.error, \"error\");\n        }\n      }).catch(err => {\n        console.log(\"Server error\", err);\n        (0,_common_mainNotification_dev__WEBPACK_IMPORTED_MODULE_0__.createMainNotification)(\"Server error\", \"error\");\n      });\n    } else {\n      resetFormPage1.style.left = \"-150%\";\n      resetFormPage2.style.left = \"0%\";\n      resetForm.scrollTop = 0;\n      resetMobileData.textContent = resetMobileNumber.value;\n      resetProgressBarhighlighter.style.width = \"66%\";\n      resetProgressInfoStepInfo.textContent = \"OTP\";\n      resetProgressInfoStep.textContent = \"STEP: 2 OF 3\";\n    }\n  } else {\n    (0,_common_mainNotification_dev__WEBPACK_IMPORTED_MODULE_0__.createMainNotification)(\"Invalid Mobile Number, Please Change It\", \"info\");\n  }\n});\nsendResetOtpAgainBtn.addEventListener(\"click\", e => {\n  sendResetOtpAgainBtn.classList.add(\"otp-activity__btn--click\");\n  setTimeout(() => {\n    sendResetOtpAgainBtn.classList.remove(\"otp-activity__btn--click\");\n  }, 500);\n\n  if (mobileValidator.test(resetMobileNumber.value)) {\n    if (!sendResetOtpAgainBtn.classList.contains(\"otp-activity__btn--disabled\")) {\n      let data = {\n        mobile: resetMobileNumber.value\n      };\n      fetch(\"/user-auth/send-reset-password-otp\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      }).then(res => {\n        if (res.ok) return res.json();else throw new Error(\"Server Error\");\n      }).then(data => {\n        if (data.isSuccess) {\n          startResetOtpTimer();\n          (0,_common_mainNotification_dev__WEBPACK_IMPORTED_MODULE_0__.createMainNotification)(\"Otp sent successfully,please check your inbox\", \"success\");\n        } else {\n          (0,_common_mainNotification_dev__WEBPACK_IMPORTED_MODULE_0__.createMainNotification)(data.error, \"error\");\n        }\n      }).catch(err => {\n        console.log(\"server error: \", err);\n        (0,_common_mainNotification_dev__WEBPACK_IMPORTED_MODULE_0__.createMainNotification)(\"Server error,please refresh your page and try again\", \"error\");\n      });\n    }\n  } else {\n    (0,_common_mainNotification_dev__WEBPACK_IMPORTED_MODULE_0__.createMainNotification)(\"Invalid mobile number,please check it\", \"info\");\n  }\n}); /////////////////////////////////////////////////\n// reset password Otp form\n\nconst backToMobilePageBtn = document.getElementById(\"backToMobilePageBtn\");\nconst getNewPasswordFormBtn = document.getElementById(\"getNewPasswordFormBtn\");\nconst resetOtpInputs = document.querySelectorAll(\"#resetOtpInputs input\");\nresetOtpInputs.forEach((input, index) => {\n  input.dataset.index = index;\n  input.addEventListener(\"paste\", handleOnPasteOtp);\n  input.addEventListener(\"keyup\", handleOtp);\n});\n\nfunction handleOnPasteOtp(e) {\n  const otpData = e.clipboardData.getData(\"text\");\n  const otpArr = otpData.split(\"\");\n\n  if (otpArr.length == resetOtpInputs.length) {\n    resetOtpInputs.forEach((input, index) => input.value = otpArr[index]);\n  } else {\n    (0,_common_mainNotification_dev__WEBPACK_IMPORTED_MODULE_0__.createMainNotification)(\"You have copied incomplete otp,please go and copy again\", \"info\");\n  }\n}\n\nfunction handleOtp(e) {\n  const inputBox = e.target;\n  let inputBoxValue = inputBox.value.toString();\n  inputBox.value = \"\";\n  inputBox.value = inputBoxValue ? inputBoxValue[0] : \"\";\n  let fieldIndex = inputBox.dataset.index;\n\n  if (inputBoxValue.length > 0 && fieldIndex < resetOtpInputs.length - 1) {\n    inputBox.nextElementSibling.focus();\n  }\n\n  if (e.key == \"Backspace\" && fieldIndex > 0) {\n    inputBox.previousElementSibling.focus();\n  }\n}\n\ngetNewPasswordFormBtn.addEventListener(\"click\", () => {\n  let resetOtp = \"\";\n  resetOtpInputs.forEach(input => {\n    resetOtp += input.value;\n  });\n\n  if (resetMobileNumber.value.length == 10 && resetOtp.length == 6) {\n    let data = {\n      otp: resetOtp,\n      mobile: resetMobileNumber.value\n    };\n    fetch(\"/user-auth/check-mobile-otp\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    }).then(res => {\n      if (res.ok) return res.json();else throw new Error(\"Server Error\");\n    }).then(data => {\n      if (data.isSuccess) {\n        resetFormContainer.dataset.accessToken = data.accessToken;\n        resetFormPage2.style.left = \"-150%\";\n        resetFormPage3.style.left = \"0%\";\n        resetForm.scrollTop = 0;\n        resetProgressBarhighlighter.style.width = \"100%\";\n        resetProgressInfoStepInfo.textContent = \"Set New Password\";\n        resetProgressInfoStep.textContent = \"STEP: 3 OF 3\";\n      } else {\n        (0,_common_mainNotification_dev__WEBPACK_IMPORTED_MODULE_0__.createMainNotification)(data.error, \"error\");\n      }\n    }).catch(err => {\n      console.log(\"Server error\", err);\n      (0,_common_mainNotification_dev__WEBPACK_IMPORTED_MODULE_0__.createMainNotification)(\"Server error\", \"error\");\n    });\n  } else {\n    (0,_common_mainNotification_dev__WEBPACK_IMPORTED_MODULE_0__.createMainNotification)(\"Error: Please type correct otp\", \"error\");\n  }\n});\nbackToMobilePageBtn.addEventListener(\"click\", () => {\n  resetFormPage2.style.left = \"150%\";\n  resetFormPage1.style.left = \"0%\";\n  resetForm.scrollTop = 0;\n  resetProgressBarhighlighter.style.width = \"33%\";\n  resetProgressInfoStepInfo.textContent = \"Your Mobile Number\";\n  resetProgressInfoStep.textContent = \"STEP: 1 OF 3\";\n}); //////////////////////////////////////////\n// new password page\n\nlet resetPassword = document.getElementById(\"resetPassword\");\nlet resetConfirmPassword = document.getElementById(\"resetConfirmPassword\");\nconst resetPasswordBtn = [...document.getElementsByClassName(\"input-field__btn--toggle-password-view\")];\nresetPasswordBtn.forEach(btn => {\n  btn.addEventListener(\"click\", () => {\n    if (btn.classList.contains(\"input-field__btn--unselected\")) {\n      btn.classList.remove(\"input-field__btn--unselected\");\n      btn.classList.add(\"input-field__btn--selected\");\n      if (btn.classList.contains(\"input-field__btn--password\")) resetPassword.type = \"text\";else if (btn.classList.contains(\"input-field__btn--confirm-password\")) resetConfirmPassword.type = \"text\";\n    } else if (btn.classList.contains(\"input-field__btn--selected\")) {\n      btn.classList.remove(\"input-field__btn--selected\");\n      btn.classList.add(\"input-field__btn--unselected\");\n      if (btn.classList.contains(\"input-field__btn--password\")) resetPassword.type = \"password\";else if (btn.classList.contains(\"input-field__btn--confirm-password\")) resetConfirmPassword.type = \"password\";\n    }\n  });\n}); //////////////////////////////////////////////////////////////\n// password strenth\n// traversing the DOM and getting the input and span using their IDs\n\nconst resetPasswordStrengthDivs = [...document.querySelectorAll(\"#resetPasswordStrength div\")];\nconst resetPasswordStrengthtext = document.getElementsByClassName(\"reset-password-strength-text\")[0];\nconst resetPasswordRule8 = document.getElementById(\"resetPasswordRule8\");\nconst resetPasswordRuleNumber = document.getElementById(\"resetPasswordRuleNumber\");\nconst resetPasswordRuleUpper = document.getElementById(\"resetPasswordRuleUpper\");\nconst resetPasswordRuleSpecial = document.getElementById(\"resetPasswordRuleSpecial\"); // The strong and weak password Regex pattern checker\n\nlet strongPassword = new RegExp(\"(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^A-Za-z0-9])(?=.{8,})\");\nlet mediumPassword = new RegExp(\"((?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^A-Za-z0-9])(?=.{6,}))|((?=.*[a-z])(?=.*[A-Z])(?=.*[^A-Za-z0-9])(?=.{8,}))|((?=.*[a-z])(?=.*[A-Z])(?=.*[^A-Za-z0-9])(?=.{8,}))|((?=.*[a-z])(?=.*[0-9])(?=.*[^A-Za-z0-9])(?=.{8,}))\" //if missing number or missing special character or missing upper case or char length is 6\n);\nlet passwordRule8 = new RegExp(\"(?=.{8,})\");\nlet passwordRuleNumber = new RegExp(\"\\\\d\");\nlet passwordRuleUpper = new RegExp(\"[A-Z]\");\nlet passwordRuleSpecial = new RegExp(\"[^A-Za-z0-9]\");\n\nfunction passwordStrengthChecker(PasswordParameter) {\n  // We then change the badge's color and text based on the password strength\n  resetPasswordRule8.classList.toggle(\"true\", passwordRule8.test(PasswordParameter));\n  resetPasswordRuleNumber.classList.toggle(\"true\", passwordRuleNumber.test(PasswordParameter));\n  resetPasswordRuleUpper.classList.toggle(\"true\", passwordRuleUpper.test(PasswordParameter));\n  resetPasswordRuleSpecial.classList.toggle(\"true\", passwordRuleSpecial.test(PasswordParameter));\n\n  if (strongPassword.test(PasswordParameter)) {\n    resetPasswordStrengthDivs[0].style.backgroundColor = \"#61f743\";\n    resetPasswordStrengthDivs[1].style.backgroundColor = \"#61f743\";\n    resetPasswordStrengthDivs[2].style.backgroundColor = \"#61f743\";\n    resetPasswordStrengthtext.textContent = \"Good\";\n  } else if (mediumPassword.test(PasswordParameter)) {\n    resetPasswordStrengthDivs[0].style.backgroundColor = \"#f7f143\";\n    resetPasswordStrengthDivs[1].style.backgroundColor = \"#f7f143\";\n    resetPasswordStrengthDivs[2].style.backgroundColor = \"transparent\";\n    resetPasswordStrengthtext.textContent = \"Fair\";\n  } else {\n    resetPasswordStrengthDivs[0].style.backgroundColor = \"#fc4444\";\n    resetPasswordStrengthDivs[1].style.backgroundColor = \"transparent\";\n    resetPasswordStrengthDivs[2].style.backgroundColor = \"transparent\";\n    resetPasswordStrengthtext.textContent = \"Week\";\n  }\n} // Adding an input event listener when a user types to the  password input\n// passwordTimeout before a callback is called\n\n\nlet passwordTimeout;\nresetPassword.addEventListener(\"input\", () => {\n  //The badge is hidden by default, so we show it\n  clearTimeout(passwordTimeout); //We then call the passwordStrengthChecker function as a callback then pass the typed password to it\n  //Incase a user clears the text, the badge is transparent again\n\n  if (resetPassword.value.length === 0) {\n    resetPasswordStrengthDivs[0].style.backgroundColor = \"transparent\";\n    resetPasswordStrengthDivs[1].style.backgroundColor = \"transparent\";\n    resetPasswordStrengthDivs[2].style.backgroundColor = \"transparent\";\n    resetPasswordStrengthtext.textContent = \"None\";\n  } else {\n    passwordTimeout = setTimeout(() => {\n      if (resetConfirmPassword.value !== \"\") if (resetConfirmPassword.value === resetPassword.value) {\n        resetConfirmPasswordText.textContent = \"Match\";\n      } else {\n        resetConfirmPasswordText.textContent = \"Not match\";\n      }\n      passwordStrengthChecker(resetPassword.value);\n    }, 500);\n  }\n});\nresetPassword.addEventListener(\"keyup\", e => {\n  resetPassword.value = resetPassword.value.replace(/\\s/g, \"\");\n}); // confirm password\n\nconst resetConfirmPasswordText = document.getElementById(\"resetConfirmPasswordText\");\nlet confirmPasswordTimeout;\nresetConfirmPassword.addEventListener(\"input\", () => {\n  clearTimeout(confirmPasswordTimeout);\n  confirmPasswordTimeout = setTimeout(() => {\n    if (resetConfirmPassword.value !== \"\") if (resetConfirmPassword.value === resetPassword.value) {\n      resetConfirmPasswordText.textContent = \"Match\";\n    } else {\n      resetConfirmPasswordText.textContent = \"Not match\";\n    }\n  }, 500);\n\n  if (resetConfirmPassword.value.length === 0) {\n    resetConfirmPasswordText.textContent = \"\";\n  }\n});\nresetConfirmPassword.addEventListener(\"keyup\", e => {\n  resetConfirmPassword.value = resetConfirmPassword.value.replace(/\\s/g, \"\");\n});\nconst submitResetPasswordBtn = document.getElementById(\"submitResetPasswordBtn\");\nsubmitResetPasswordBtn.addEventListener(\"click\", () => {\n  if (resetPassword.value === resetConfirmPassword.value) {\n    let data = {\n      mobile: resetMobileNumber.value,\n      password: resetPassword.value,\n      resetAccessToken: resetFormContainer.dataset.accessToken\n    };\n    fetch(\"/user-auth/reset-password\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    }).then(res => {\n      if (res.ok) return res.json();else throw new Error(\"Server Error\");\n    }).then(data => {\n      if (data.isSuccess) {\n        (0,_common_mainNotification_dev__WEBPACK_IMPORTED_MODULE_0__.createMainNotification)(\"Password Changed Successfully\", \"success\");\n        setTimeout(() => {\n          location.replace(\"/user-auth/login\");\n        }, 2000);\n      } else {\n        (0,_common_mainNotification_dev__WEBPACK_IMPORTED_MODULE_0__.createMainNotification)(data.error, \"error\");\n      }\n    }).catch(err => {\n      console.log(\"Server error: \" + err);\n      (0,_common_mainNotification_dev__WEBPACK_IMPORTED_MODULE_0__.createMainNotification)(\"Server error\", \"error\");\n    });\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./dev-javascripts/user-auth/js/resetForm.dev.js\n");

/***/ })

}]);