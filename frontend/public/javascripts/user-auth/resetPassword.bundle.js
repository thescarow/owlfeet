/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./devJavascripts/userAuth/resetPassword.dev.js":
/*!******************************************************!*\
  !*** ./devJavascripts/userAuth/resetPassword.dev.js ***!
  \******************************************************/
/***/ (() => {

eval("function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar forgotPasswordForm = document.getElementById(\"forgotPasswordForm\"); /////////////////////////////////////////////////////////////\n// notification field\n\nvar otpNotification = document.getElementById(\"otpNotification\");\nvar mobileNotification = document.getElementById(\"mobileNotification\");\nvar forgotPasswordFormPage1 = document.getElementById(\"forgotPasswordFormPage1\");\nvar forgotPasswordFormPage2 = document.getElementById(\"forgotPasswordFormPage2\");\nvar forgotPasswordFormPage3 = document.getElementById(\"forgotPasswordFormPage3\"); ////////////////////////////////////////////////////////////////////\n// reset password progress\n\nvar forgotPasswordProgressInfoStep = document.getElementById(\"forgotPasswordProgressInfoStep\");\nvar forgotPasswordProgressInfoStepInfo = document.getElementById(\"forgotPasswordProgressInfoStepInfo\");\nvar forgotPasswordProgressBarhighlighter = document.getElementById(\"forgotPasswordProgressBarhighlighter\"); // mobile page\n\nvar mobileData = document.getElementById(\"mobileData\"); //from otp page\n\nvar mobileNumber = document.getElementById(\"mobileNumber\");\nvar sendOtp = document.getElementById(\"sendOtp\");\nvar mobileValidator = /^[5-9][0-9]{9}$/;\nsendOtp.addEventListener(\"click\", function () {\n  if (mobileValidator.test(mobileNumber.value)) {\n    fetch(\"/user-auth/send-reset-password-otp\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        mobile: mobileNumber.value\n      })\n    }).then(function (res) {\n      if (res.ok) {\n        return res.json();\n      } else throw new Error(\"Server Error,Please try again\");\n    }).then(function (data) {\n      if (data.isSuccess) {\n        forgotPasswordFormPage1.style.left = \"-150%\";\n        forgotPasswordFormPage2.style.left = \"0%\";\n        forgotPasswordForm.scrollTop = 0;\n        mobileData.textContent = mobileNumber.value;\n        forgotPasswordProgressBarhighlighter.style.width = \"66%\";\n        forgotPasswordProgressInfoStepInfo.textContent = \"OTP\";\n        forgotPasswordProgressInfoStep.textContent = \"STEP: 2 OF 3\";\n        otpNotification.textContent = \"Otp send Successfully,Please check your inbox\";\n        otpNotification.classList.add(\"show\", \"success\");\n        setTimeout(function () {\n          otpNotification.classList.remove(\"show\", \"success\");\n        }, 5000);\n      } else {\n        mobileNotification.textContent = data.error;\n        mobileNotification.classList.add(\"show\", \"error\");\n        setTimeout(function () {\n          mobileNotification.classList.remove(\"show\", \"error\");\n        }, 5000);\n      }\n    })[\"catch\"](function (err) {\n      mobileNotification.textContent = \"Server Error\";\n      mobileNotification.classList.add(\"show\", \"error\");\n      setTimeout(function () {\n        mobileNotification.classList.remove(\"show\", \"error\");\n      }, 5000);\n    });\n  } else {\n    mobileNotification.textContent = \"Invalid Mobile Number, Please Change It\";\n    mobileNotification.classList.add(\"show\");\n    setTimeout(function () {\n      mobileNotification.classList.remove(\"show\");\n    }, 5000);\n  }\n}); /////////////////////////////////////////////////\n// reset password Otp form\n\nvar backToMobilePage = document.getElementById(\"backToMobilePage\");\nvar getNewPasswordForm = document.getElementById(\"getNewPasswordForm\");\nvar inputs = document.querySelectorAll(\"#otp input\");\ninputs.forEach(function (input, index) {\n  input.dataset.index = index;\n  input.addEventListener(\"paste\", handleOnPasteOtp);\n  input.addEventListener(\"keyup\", handleOtp);\n});\n\nfunction handleOnPasteOtp(e) {\n  var data = e.clipboardData.getData(\"text\");\n  var value = data.split(\"\");\n\n  if (value.length == inputs.length) {\n    inputs.forEach(function (input, index) {\n      return input.value = value[index];\n    });\n  } else {\n    otpNotification.textContent = \"You have copied incomplete otp,please go and copy again\";\n    otpNotification.classList.add(\"show\");\n    setTimeout(function () {\n      otpNotification.classList.remove(\"show\");\n    }, 5000);\n  }\n}\n\nfunction handleOtp(e) {\n  var input = e.target;\n  var value = input.value;\n  input.value = \"\";\n  input.value = value ? value[0] : \"\";\n  var fieldIndex = input.dataset.index;\n\n  if (value.length > 0 && fieldIndex < inputs.length - 1) {\n    input.nextElementSibling.focus();\n  }\n\n  if (e.key == \"Backspace\" && fieldIndex > 0) {\n    input.previousElementSibling.focus();\n  }\n}\n\ngetNewPasswordForm.addEventListener(\"click\", function () {\n  var otp = \"\";\n  inputs.forEach(function (input) {\n    otp += input.value;\n  });\n  console.log(otp);\n\n  if (mobileNumber.value.length == 10 && otp.length == 6) {\n    var data = {\n      otp: otp,\n      mobile: mobileNumber.value\n    };\n    fetch(\"/user-auth/check-mobile-otp\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    }).then(function (res) {\n      if (res.ok) return res.json();else throw new Error(\"Server Error\");\n    }).then(function (data) {\n      if (data.isSuccess) {\n        forgotPasswordFormPage2.style.left = \"-150%\";\n        forgotPasswordFormPage3.style.left = \"0%\";\n        forgotPasswordForm.scrollTop = 0;\n        forgotPasswordProgressBarhighlighter.style.width = \"100%\";\n        forgotPasswordProgressInfoStepInfo.textContent = \"Set New Password\";\n        forgotPasswordProgressInfoStep.textContent = \"STEP: 3 OF 3\";\n      } else {\n        otpNotification.textContent = data.error;\n        otpNotification.classList.add(\"show\", \"error\");\n        setTimeout(function () {\n          otpNotification.classList.remove(\"show\", \"error\");\n        }, 5000);\n      }\n    })[\"catch\"](function (err) {\n      otpNotification.textContent = \"Server Error\";\n      otpNotification.classList.add(\"show\", \"error\");\n      setTimeout(function () {\n        otpNotification.classList.remove(\"show\", \"error\");\n      }, 5000);\n    });\n  } else {\n    otpNotification.textContent = \"Error: Please type correct otp\";\n    otpNotification.classList.add(\"show\", \"error\");\n    setTimeout(function () {\n      otpNotification.classList.remove(\"show\", \"error\");\n    }, 5000);\n  }\n});\nbackToMobilePage.addEventListener(\"click\", function () {\n  forgotPasswordFormPage2.style.left = \"150%\";\n  forgotPasswordFormPage1.style.left = \"0%\";\n  forgotPasswordForm.scrollTop = 0;\n  forgotPasswordProgressBarhighlighter.style.width = \"33%\";\n  forgotPasswordProgressInfoStepInfo.textContent = \"Your Mobile Number\";\n  forgotPasswordProgressInfoStep.textContent = \"STEP: 1 OF 3\";\n}); //////////////////////////////////////////////////////////////\n// reset password form\n\nvar password = document.getElementById(\"password\");\n\nvar passwordStrengthDivs = _toConsumableArray(document.querySelectorAll(\"#passwordStrength div\"));\n\nvar passwordStrengthtext = document.getElementsByClassName(\"password-strength-text\")[0];\nvar passwordRule8List = document.getElementById(\"passwordRule8\");\nvar passwordRuleNumberList = document.getElementById(\"passwordRuleNumber\");\nvar passwordRuleUpperList = document.getElementById(\"passwordRuleUpper\");\nvar passwordRuleSpecialList = document.getElementById(\"passwordRuleSpecial\"); // The strong and weak password Regex pattern checker\n\nvar strongPassword = new RegExp(\"(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^A-Za-z0-9])(?=.{8,})\");\nvar mediumPassword = new RegExp(\"((?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^A-Za-z0-9])(?=.{6,}))|((?=.*[a-z])(?=.*[A-Z])(?=.*[^A-Za-z0-9])(?=.{8,}))|((?=.*[a-z])(?=.*[A-Z])(?=.*[^A-Za-z0-9])(?=.{8,}))|((?=.*[a-z])(?=.*[0-9])(?=.*[^A-Za-z0-9])(?=.{8,}))\" //if missing number or missing special character or missing upper case or char length is 6\n);\nvar passwordRule8 = new RegExp(\"(?=.{8,})\");\nvar passwordRuleNumber = new RegExp(\"\\\\d\");\nvar passwordRuleUpper = new RegExp(\"[A-Z]\");\nvar passwordRuleSpecial = new RegExp(\"[^A-Za-z0-9]\");\n\nfunction passwordStrengthChecker(PasswordParameter) {\n  // We then change the badge's color and text based on the password strength\n  passwordRule8List.classList.toggle(\"true\", passwordRule8.test(PasswordParameter));\n  passwordRuleNumberList.classList.toggle(\"true\", passwordRuleNumber.test(PasswordParameter));\n  passwordRuleUpperList.classList.toggle(\"true\", passwordRuleUpper.test(PasswordParameter));\n  passwordRuleSpecialList.classList.toggle(\"true\", passwordRuleSpecial.test(PasswordParameter));\n\n  if (strongPassword.test(PasswordParameter)) {\n    for (var i = 0; i < passwordStrengthDivs.length; i++) {\n      passwordStrengthDivs[i].classList.remove(\"weak\", \"medium\");\n      passwordStrengthDivs[i].classList.add(\"strong\");\n    }\n\n    passwordStrengthtext.textContent = \"Strong\";\n  } else if (mediumPassword.test(PasswordParameter)) {\n    for (var _i = 0; _i < passwordStrengthDivs.length; _i++) {\n      passwordStrengthDivs[_i].classList.remove(\"weak\", \"medium\", \"strong\");\n    }\n\n    passwordStrengthDivs[0].classList.add(\"medium\");\n    passwordStrengthDivs[1].classList.add(\"medium\");\n    passwordStrengthtext.textContent = \"Medium\";\n  } else {\n    for (var _i2 = 0; _i2 < passwordStrengthDivs.length; _i2++) {\n      passwordStrengthDivs[_i2].classList.remove(\"weak\", \"medium\", \"strong\");\n    }\n\n    passwordStrengthDivs[0].classList.add(\"weak\");\n    passwordStrengthtext.textContent = \"Low\";\n  }\n} // Adding an input event listener when a user types to the  password input\n// passwordTimeout before a callback is called\n\n\nvar passwordTimeout;\npassword.addEventListener(\"input\", function () {\n  //The badge is hidden by default, so we show it\n  clearTimeout(passwordTimeout); //We then call the passwordStrengthChecker function as a callback then pass the typed password to it\n\n  passwordTimeout = setTimeout(function () {\n    return passwordStrengthChecker(password.value);\n  }, 500); //Incase a user clears the text, the badge is transparent again\n\n  if (password.value.length == 0) {\n    passwordStrengthDivs[0].style.backgroundColor = \"transparent\";\n    passwordStrengthDivs[1].style.backgroundColor = \"transparent\";\n    passwordStrengthDivs[2].style.backgroundColor = \"transparent\";\n    passwordStrengthtext.textContent = \"None\";\n  }\n});\npassword.addEventListener(\"keyup\", function (e) {\n  password.value = password.value.replace(/\\s/g, \"\");\n}); ///////////////////////////////////////////////////////////////\n// confirm password\n\nvar confirmPasswordCheck = document.getElementById(\"confirmPasswordCheck\");\nvar confirmPassword = document.getElementById(\"confirmPassword\");\nvar confirmPasswordTimeout;\nconfirmPassword.addEventListener(\"input\", function () {\n  clearTimeout(confirmPasswordTimeout);\n  confirmPasswordTimeout = setTimeout(function () {\n    if (confirmPassword.value == password.value) {\n      confirmPasswordCheck.textContent = \"match\";\n    } else {\n      confirmPasswordCheck.textContent = \"no match\";\n    }\n  }, 500);\n\n  if (confirmPassword.value.length == 0) {\n    confirmPasswordCheck.textContent = \"no match\";\n  }\n});\nconfirmPassword.addEventListener(\"keyup\", function (e) {\n  confirmPassword.value = confirmPassword.value.replace(/\\s/g, \"\");\n}); //////////////////////////////////////////////////////////////////\n// password show\n\nvar passwordShow = _toConsumableArray(document.getElementsByClassName(\"password-show\"));\n\npasswordShow.forEach(function (btn) {\n  btn.addEventListener(\"click\", function () {\n    passwordShow.forEach(function (eachSvg) {\n      eachSvg.classList.toggle(\"show\");\n    });\n    var type = password.getAttribute(\"type\");\n\n    if (type == \"password\") {\n      password.type = \"text\";\n      confirmPassword.type = \"text\";\n    } else {\n      password.type = \"password\";\n      confirmPassword.type = \"password\";\n    }\n  });\n});\nvar submitForgotPassword = document.getElementById(\"submitForgotPassword\");\nvar submitNotification = document.getElementById(\"submitNotification\");\nsubmitForgotPassword.addEventListener(\"click\", function () {\n  if (password.value == confirmPassword.value) {\n    var data = {\n      mobile: mobileNumber.value,\n      password: password.value\n    };\n    console.log(data);\n    fetch(\"/user-auth/reset-password\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    }).then(function (res) {\n      if (res.ok) return res.json();else throw new Error(\"Server Error\");\n    }).then(function (data) {\n      if (data.isSuccess) {\n        submitNotification.textContent = \"Password Changed Successfully\";\n        submitNotification.classList.add(\"show\", \"success\");\n        setTimeout(function () {\n          submitNotification.classList.remove(\"show\", \"success\");\n          location.replace(\"/user-auth/login\");\n        }, 2000);\n      } else {\n        submitNotification.textContent = data.error;\n        submitNotification.classList.add(\"show\", \"error\");\n        setTimeout(function () {\n          submitNotification.classList.remove(\"show\", \"error\");\n        }, 5000);\n      }\n    })[\"catch\"](function (err) {\n      submitNotification.textContent = \"Server Error\";\n      submitNotification.classList.add(\"show\", \"error\");\n      setTimeout(function () {\n        submitNotification.classList.remove(\"show\", \"error\");\n      }, 5000);\n    });\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./devJavascripts/userAuth/resetPassword.dev.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./devJavascripts/userAuth/resetPassword.dev.js"]();
/******/ 	
/******/ })()
;